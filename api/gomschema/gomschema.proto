syntax = "proto3";

package gomschema;

// For some reason, for some languages, the output directory isn't good enough.
option go_package=".;gomschema";
option java_package=".";

///////////////////////////////////////////////////////////////////////////////
// Protobuf doesn't like really huge messages, so we need to provide indexes
// of messages for streaming.
//
// A GoMenacing dump comprises a header stream and an index stream. These can
// either be in the form of a ".gmix" index file and a ".gmdt" data file, or
// they can be interleaved in the same stream/file. See the Header.source
// property.

/// Header provides size listings for a stream of protobuf messages of a given
/// type.
message Header {
    enum Type {
        CInvalid = 0;
        CHeader = 1;
        CCommodity = 2;
        CSystem = 3;
        CFacility = 4;
        CListing = 5;
    };
    /// Identify the type of objects that follow.
    Type header_type = 1;

    /// Enumerates the number and size of messages to follow.
    repeated uint32 sizes = 2 [packed=true];

    reserved 3;

    /// Optional description of where this came from.
    string source = 4;

    /// Any application-specific, user-purposed data. Key identifies the purpose, value is the data.
    map<string, bytes> userdata = 5;
};

///////////////////////////////////////////////////////////////////////////////
/// Commodity is a type of item that can be traded within the game. At the moment,
/// the categories are small enough I decided to just enumerate them right here.
message Commodity {
    enum Category {
        CatNone = 0;
        CatChemicals = 1;
        CatConsumerItems = 2;
        CatLegalDrugs = 3;
        CatFoods = 4;
        CatIndustrialMaterials = 5;
        CatMachinery = 6;
        CatMedicines = 7;
        CatMetals = 8;
        CatMinerals = 9;
        CatSlavery = 10;
        CatTechnology = 11;
        CatTextiles = 12;
        CatWaste = 13;
        CatWeapons = 14;
        CatUnknown = 15;
        CatSalvage = 16;
    };

    /// Locally sourced identifier across this import.
    uint32 id = 1;

    /// Name can be localized as long as the English name is preserved for hashing.
    string name = 2;

    /// Timestamp of when this was captured.
    uint64 timestamp_utc = 3;

    /// What type of item is this.
    Category category_id = 4;

    /// Whether the item is known to be rare.
    bool is_rare = 5;

    /// Whether the item is known to be marketable.
    bool is_non_marketable = 6;

    /// The average galactic market price in credits.
    uint32 average_cr = 7;
};

///////////////////////////////////////////////////////////////////////////////
// Common enums for system/facility.

/// GovernmentType enumerates the different governments available in-game.
enum GovernmentType {
    GovNone = 0;
    GovAnarchy = 1;
    GovCommunism = 2;
    GovConfederacy = 3;
    GovCooperative = 4;
    GovCorporate = 5;
    GovDemocracy = 6;
    GovDictatorship = 7;
    GovFeudal = 8;
    GovPatronage = 9;
    GovPrison = 10;
    GovPrisonColony = 11;
    GovTheocracy = 12;
};

/// AllegianceType enumerates the allegiances that systems/stations can have.
enum AllegianceType {
    AllegNone = 0;
    AllegAlliance = 1;
    AllegEmpire = 2;
    AllegFederation = 3;
    AllegIndependent = 4;
    AllegPilotsFederation = 5;
};

///////////////////////////////////////////////////////////////////////////////
/// Galactic coordinate for a system.
message Coordinate {
    double x = 1;
    double y = 2;
    double z = 3;
};

/// SecurityLevel enumerates the law enforcement strength in a system.
enum SecurityLevel {
    SecurityNone = 0;
    SecurityAnarchy = 1;
    SecurityLow = 2;
    SecurityMedium = 3;
    SecurityHigh = 4;
};

/// System corresponds to an individual Elite-Dangerous star system, akin to a map.
message System {
    /// Locally sourced id for this system across this import.
    uint32 id = 1;

    /// Unique name of the system.
    string name = 2;

    /// Timestamp of the last update to this entry UTC.
    uint64 timestamp_utc = 3;

    /// Position in the galaxy.
    Coordinate position = 4;

    /// If we know whether or not the system is populated.
    bool populated = 5;

    /// If we know whether or not the system needs a permit for entry.
    bool needs_permit = 6;

    /// Law-Enforcement level of the system.
    SecurityLevel security_level = 7;

    /// Current governance of the system.
    GovernmentType government = 8;

    /// Which faction is the system allied to.
    AllegianceType allegiance = 9;
};

///////////////////////////////////////////////////////////////////////////////
/// Facilities (stations, planetary bases, etc).

/// Enumeration of facility kinds.
enum FacilityType {
    FTNone = 0;
    FTCivilianOutpost = 1;
    FTCommercialOutpost = 2;
    FTCoriolisStarport = 3;
    FTIndustrialOutpost = 4;
    FTMilitaryOutpost = 5;
    FTMiningOutpost = 6;
    FTOcellusStarport = 7;
    FTOrbisStarport = 8;
    FTScientificOutpost = 9;
    FTPlanetaryOutpost = 10;
    FTPlanetaryPort = 11;
    FTPlanetarySettlement = 12;
    FTMegaship = 13;
    FTAsteroidBase = 14;
    FTFleetCarrier = 15;
};

/// FeatureBit denotes which bits of the Features mask represent which capacity.
enum FeatureBit {
	Market      = 0;
	BlackMarket = 1;
	Commodities = 2;
	Docking     = 3;
	Fleet       = 4;
	LargePad    = 5;
	MediumPad   = 6;
	Outfitting  = 7;
	Planetary   = 8;
	Rearm       = 9;
	Refuel      = 10;
	Repair      = 11;
	Shipyard    = 12;
	SmallPad    = 13;
};

/// Facility describes a station/planetary base, anything you can dock/trade with in-game.
message Facility {
    /// Locally sourced id for this facility across this import.
    uint32 id = 1;

    /// Locally sourced id for the facility's system.
    uint32 system_id = 2;

    /// Name of the facility (minus system name)
    string name = 3;

    /// Timestamp of the last update to this entry UTC.
    uint64 timestamp_utc = 4;

    /// Identifies the type of facility (e.g station, planetary outpost) this is.
    FacilityType facility_type = 5;

    /// Identify which capabilities this facility has.
    uint32 features = 6;

    /// Distance in light seconds from system entry point.
    uint32 ls_from_star = 7;

    /// Type of government running this station.
    GovernmentType government = 8;

    /// Type of allegiance this station holds.
    AllegianceType allegiance = 9;
};

///////////////////////////////////////////////////////////////////////////////
/// Trading

/// The supply/demand levels and cost for an individual commodity at a facility.
message CommodityListing {
    /// What product is represented.
    uint32 commodity_id = 1;
    /// Units of the commodity available at this facility.
    uint32 supply_units = 2;
    /// What the station is charging.
    uint32 supply_credits = 3;
    /// How many units the facility is seeking to buy.
    uint32 demand_units = 4;
    /// How much the station is paying.
    uint32 demand_credits = 5;
    /// Unix timestamp of when this was collected.
    uint64 timestamp_utc = 6;
};

/// All of the available supply and demand for a designated facility.
message FacilityListing {
    /// Locally sourced id for the facility this listing is for.
    uint32 id = 1;

    /// What the station is selling/buying.
    repeated CommodityListing listings = 2;
};

