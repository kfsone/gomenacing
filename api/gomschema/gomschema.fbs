// Protobuf description of the GoMenacing database formats and enumerations.
// Author: Oliver 'kfsone' Smith <oliver@kfs.org>
// Date: 8/27/2020
//
//+build !test

include "enums.fbs";

namespace gomschema;

// We'll be storing our data in "gom" files.
file_identifier "gomd";

/// Commodity is a type of item that can be traded within the game. At the moment,
/// the categories are small enough I decided to just enumerate them right here.
table Commodity {
	/// Elite Dangerous' internal ID for the commodity acts as the key.
	commodity_id: uint64 (key);
	/// Name can be localized as long as the English name is preserved for hashing.
	name: string;
	/// What type of item is this.
	category_id: CommodityType;
  	/// Whether the item is known to be rare.
  	is_rare: bool = false;
	/// Whether the item is known to be marketable.
	is_non_marketable: bool = false;
	/// The average galactic market price in credits.
	average_cr: uint32;
}

/// Trade is a discrete entry for a Commodity that is or can be traded at with
/// a number of units and a value.
struct Trade {
	/// Which commodity this descrbes.
	commodity_id: uint64;
	/// How many units
	units: uint32;
	/// How many credits
	credits: uint16;
	/// Unix timestamp UTC.
	timestamp_utc: uint64;
}

// FacilityListing represents the trade available at a given facility.
table FacilityListing {
	/// Identifies the facility presenting these trades.
	facility_id: uint32 (key);
	/// Commodities this facility sells.
	supply: [Trade];
	/// Commodities this facility buys.
	demand: [Trade];
}

/// Facility represents a static, dockable entity within the game such as a station or planetary base.
/// Instead of assigning stations their own unique IDs, we produce an fnv1a_32 hash of the system name
/// and the station name.
table Facility {
	/// "{upper system name}@{facility name upper}"
	facility_id: uint32 (key, hash: "fnv1a_32");

	/// Hash of the all-upper name of the system.
	system_id: uint32 (hash: "fnv1a_32");

	/// Name of the facility itself.
	name: string;

	/// Unix timestamp UTC of last update.
	timestamp_utc: uint64 = 0;

	/// Optional facility type.
	facility_type: FacilityType = None;

    /// Does it have an accessible trade market.
    has_market: bool = true;
    /// Does it have a black market.
    has_black_market: bool = false;
    /// Can it refuel.
    has_refuel: bool = true;
    /// Can it repair.
    has_repair: bool = true;
    /// Can it re-arm.
    has_rearm: bool = true;
    /// Does it sell/upgrade ship components.
    has_outfitting: bool = true;
    /// Can you buy ships here.
    has_shipyard: bool = false;
    /// Can you dock here (this is taken from EDDB and might be redundant).
    has_docking: bool = true;
    /// Does the market have regular trading commodities available.
    has_commodities: bool = true;
    /// Is it on a planet.
    is_planetary: bool = false;

	/// Distance from the facility to the entry point in the system.
	ls_to_star: uint32 = 0;

  	/// The governance of this station. If not present, assume system's government.
	government: Government = Corporate;

	/// The allegiance of this station. If not present, assume system's allegiance.
	allegiance: Allegiance = Independent;

	/// Presumably the internal ED identifier for the market here.
	ed_market_id: uint64 = 0;
}

/// Galactic coordinate for a system.
struct Coordinate {
	x: double;
	y: double;
	z: double;
}

/// System corresponds to an individual Elite-Dangerous star system, akin to a map.
table System {
	/// System ID is it's upper-cased name hashed via fnv1a.
	system_id: uint32 (key, hash: "fnv1a_32");

	/// Unique name of the system.
	name: string;

	/// Position in the galaxy.
	position: Coordinate;

	/// Timestamp of the last update to this entry UTC.
	timestamp_utc: uint64 = 0;

	power: string (shared);

	/// Whether anyone lives here.
  	populated: bool = true;

	/// Whether a permit is required to enter the systme.
	needs_permit: bool = false;

	/// Law-Enforcement level of the system.
	security: SecurityLevel = Medium;

  	/// What is the government for the system.
  	government_id: Government = Corporate;

  	/// Which faction is the system allied to.
	allegiance_id : Allegiance = Independent;

	/// Guess: Elite Dangerous Internal ID
	ed_address : uint64 = 0;

	/// Facilities in this system.
	facilities: [Facility];
}

/// Encapsulation of all the data.
table Galaxy {
	/// Semantically-versioned schema id.
	schema_version: string;

	/// Human-friendly description of what is enclosed, e.g "import from source X" or
	/// "complete local database". Entirely descriptive.
	description: string;

	/// Human-friendly attributition, if relevant.
	attribution: string;

	/// UTC Unix time of generation.
	timestamp_utc: uint64;

	/// Items recognized by this data.
	commodities: [Commodity];

	/// Systems recognized by this data (presence of facilities optional).
	systems: [System];

	/// Fields reserved for any user-specific notes.
	user_data: string;

	/// 3rd-party application values that prefer .ini format.
	ini_data: string;

	/// 3rd-party application values that prefer .json format.
	json_data: string;

	/// 3rd-party application values that prefer .yaml because they hate life.
	yaml_data: string;
}

root_type Galaxy;
