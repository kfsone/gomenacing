// Protobuf description of the GoMenacing database formats and enumerations.
// Author: Oliver 'kfsone' Smith <oliver@kfs.org>
// Date: 8/27/2020
//
//+build !test

syntax = "proto3";

package ettudata;
option go_package = "github.com/kfsone/gomenacing/ettudata;ettudata";

// Government is an enumeration of government types reduced to a single field.
// (this encapsulation prevents the enums leaking into the parent scope)
message Government {
  enum Type {
    None = 0;
    Anarchy = 1;
    Communism = 2;
    Confederacy = 3;
    Cooperative = 4;
    Corporate = 5;
    Democracy = 6;
    Dictatorship = 7;
    Feudal = 8;
    Patronage = 9;
    Prison = 10;
    PrisonColony = 11;
    Theocracy = 12;
  };
  Type type = 1;
}

// Allegiance is an enumeration of allegiance types reduced to a single field.
message Allegiance {
  enum Type {
    None = 0;
    Alliance = 1;
    Empire = 2;
    Federation = 3;
    Independent = 4;
    PilotsFederation = 5;
  };
  Type type = 1;
};


// System corresponds to an individual Elite-Dangerous star system, akin to a map.
message System {

  ////////////////////////////////////////////////////////////////////////////
  // Sub-types

  // Coordinates encapsulates a 3-dimensional stellar position into a single message.
  message Coordinates {
    double x = 1;
    double y = 2;
    double z = 3;
  };

  // Security level is system-specific and determines how aggressive law enforcement is.
  message Security {
    enum Type {
      None = 0;
      Anarchy = 1;
      Low = 2;
      Medium = 3;
      High = 4;
    };
    Type type = 1;
  };

  // Power is system-specific and has to do with factions and missions (I think).
  message Power {
    enum State {
      None = 0;
      Contested = 1;
      Control = 2;
      Expansion = 3;
      Exploited = 4;
    };
    State state = 1;
  };

  ////////////////////////////////////////////////////////////////////////////
  // Fields

  // Unique ID assigned to the system in this database.
  uint64 id = 1;
  // Unique name of the system.
  string name = 2;
  // Unique timestamp of the last update to this entry.
  uint64 updated = 3;

  Coordinates position = 4;

  // Whether anyone lives here.
  bool isPopulated = 5;
  // Requires a special permit to enter the system.
  bool needsPermit = 6;

  // Law-enforcement aggressiveness.
  Security security = 7;

  // Current power state.
  Power power = 8;

  // What is the government for the system.
  Government government = 9;

  // Which faction is the system allied to.
  Allegiance allegiance = 10;

  // Something something id.
  uint64 edsmId = 11;

  // Something something id - I think this is the elite-dangerous internal id?
  uint64 edSystemAddress = 12;
};


// Facility represents a static, dockable entity within the game such as a station or planetary base.
message Facility {
  // Type enumerates the different facility types, based on values from EDDB.
  enum Type {
    None = 0;
    CivilianOutpost = 1;
    CommercialOutpost = 2;
    CoriolisStarport = 3;
    IndustrialOutpost = 4;
    MilitaryOutpost = 5;
    MiningOutpost = 6;
    OcellusStarport = 7;
    OrbisStarport = 8;
    ScientificOutpost = 9;
    PlanetaryOutpost = 13;
    PlanetaryPort = 14;
    PlanetarySettlement = 16;
    Megaship = 19;
    AsteroidBase = 20;
    FleetCarrier = 24;
  };

  // Features encapsulates the minor attributes of a facility such
  // as whether you can trade with it, how large the pad is.
  // This helps keep the number of fields within Facility proper
  // under 15.
  message Features {
    // PadSize enumerates the different sizes for landing pads.
    enum PadSize {
      None = 0;
      Small = 1;
      Medium = 2;
      Large = 3;
    };

    // Does it have an accessible trade market.
    bool hasMarket = 1;
    // Does it have a black market.
    bool hasBlackmarket = 2;
    // Can it refuel.
    bool hasRefuel = 3;
    // Can it repair.
    bool hasRepair = 4;
    // Can it re-arm.
    bool hasRearm = 5;
    // Does it sell/upgrade ship components.
    bool hasOutfitting = 6;
    // Can you buy ships here.
    bool hasShipyard = 7;
    // Can you dock here (this is taken from EDDB and might be redundant).
    bool hasDocking = 8;
    // Does the market have regular trading commodities available.
    bool hasCommodities = 9;
    // Is it on a planet.
    bool isPlanetary = 10;
    ///TODO: fleet?

    // What's the largest ship supported by the landing pad.
    PadSize pad = 11;
  };

  // Unique ID assigned to the facility in this database.
  uint64 id = 1;
  // Facility name excluding system.
  string name = 2;
  // Unix timestamp of last update.
  uint64 updated = 3;
  // The database-ID of the system this facility belongs to.
  uint64 systemId = 4;

  // What type of facility this is.
  Type type = 5;

  // List of features and pad size at this facility.
  Features features = 6;

  // Distance from the facility to the entry point in the system.
  float lsToStar = 7;

  // The governance of this station. If not present, assume system's government.
  Government government = 8;
  ///TODO: should pr

  // The allegiance of this station. If not present, assume system's allegiance.
  Allegiance allegiance = 9;

  uint64 edMarketId = 10;
};

// Commodity is a type of item that can be traded within the game. At the moment,
// the categories are small enough I decided to just enumerate them right here.
message Commodity {
  // Category represents a grouping of Commodities, e.g. "Tech" or "Drugs".
  enum Category {
    None = 0;
    Chemicals = 1;
    ConsumerItems = 2;
    LegalDrugs = 3;
    Foods = 4;
    IndustrialMaterials = 5;
    Machinery = 6;
    Medicines = 7;
    Metals = 8;
    Minerals = 9;
    Slavery = 10;
    Technology = 11;
    Textiles = 12;
    Waste = 13;
    Weapons = 14;
    Unknown = 15;
    Salvage = 16;
  };

  // Unique ID assigned to this commodity in the local database.
  uint64 id = 1;
  // Name of the commodity.
  string name = 2;
  // Which category does the commodity belong to.
  Category category = 3;
  // Do we know if it is rare?
  bool isRare = 4;
  // Do we know if it is non-marketable?
  bool isNonMarketable = 5;
  // Do we know (or care?) what the average galactic price is?
  uint64 averagePrice = 6;
  // Do we know elite's internal ID for it?
  uint64 edId = 7;
};

// Listing is a discrete entry for a Commodity that is being sold at a
// facility. Listings are grouped by facility in a FacilityListing.
message Listing {
  // Capacity describes the number of units and price associated with
  // either demand or supply for a listing.
  message Capacity {
    enum Bracket {
      None = 0;
      Low = 1;
      Med = 2;
      High = 3;
    };

    // Which supply/demand bracket is the item in?
    Bracket bracket = 1;
    // How many units are wanted/available.
    uint32 units = 2;
    // Asking/offering price.
    uint32 credits = 3;
  };

  // Local database ID of the commodity being listed.
  uint32 commodityId = 1;
  // A description of availability and cost here if the item is sold.
  Capacity supply = 2;
  // A description of units required and the price offered for them here.
  Capacity demand = 3;
  // Unix timestamp of when this record was collected.
  uint64 collected = 4;
};

// FacilityListing represents the trade available at a given facility.
message FacilityListing {
  // Local database Unique ID of this facility.
  uint64 facilityId = 1;
  // List of commodities being traded here.
  repeated Listing listings = 2;
};
