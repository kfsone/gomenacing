// Protobuf description of the GoMenacing database formats and enumerations.
// Author: Oliver 'kfsone' Smith <oliver@kfs.org>
// Date: 8/27/2020
//
//+build !test

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: datatypes.proto

package ettudata

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Government_Type int32

const (
	Government_None         Government_Type = 0
	Government_Anarchy      Government_Type = 1
	Government_Communism    Government_Type = 2
	Government_Confederacy  Government_Type = 3
	Government_Cooperative  Government_Type = 4
	Government_Corporate    Government_Type = 5
	Government_Democracy    Government_Type = 6
	Government_Dictatorship Government_Type = 7
	Government_Feudal       Government_Type = 8
	Government_Patronage    Government_Type = 9
	Government_Prison       Government_Type = 10
	Government_PrisonColony Government_Type = 11
	Government_Theocracy    Government_Type = 12
)

// Enum value maps for Government_Type.
var (
	Government_Type_name = map[int32]string{
		0:  "None",
		1:  "Anarchy",
		2:  "Communism",
		3:  "Confederacy",
		4:  "Cooperative",
		5:  "Corporate",
		6:  "Democracy",
		7:  "Dictatorship",
		8:  "Feudal",
		9:  "Patronage",
		10: "Prison",
		11: "PrisonColony",
		12: "Theocracy",
	}
	Government_Type_value = map[string]int32{
		"None":         0,
		"Anarchy":      1,
		"Communism":    2,
		"Confederacy":  3,
		"Cooperative":  4,
		"Corporate":    5,
		"Democracy":    6,
		"Dictatorship": 7,
		"Feudal":       8,
		"Patronage":    9,
		"Prison":       10,
		"PrisonColony": 11,
		"Theocracy":    12,
	}
)

func (x Government_Type) Enum() *Government_Type {
	p := new(Government_Type)
	*p = x
	return p
}

func (x Government_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Government_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_proto_enumTypes[0].Descriptor()
}

func (Government_Type) Type() protoreflect.EnumType {
	return &file_datatypes_proto_enumTypes[0]
}

func (x Government_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Government_Type.Descriptor instead.
func (Government_Type) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{0, 0}
}

type Allegiance_Type int32

const (
	Allegiance_None             Allegiance_Type = 0
	Allegiance_Alliance         Allegiance_Type = 1
	Allegiance_Empire           Allegiance_Type = 2
	Allegiance_Federation       Allegiance_Type = 3
	Allegiance_Independent      Allegiance_Type = 4
	Allegiance_PilotsFederation Allegiance_Type = 5
)

// Enum value maps for Allegiance_Type.
var (
	Allegiance_Type_name = map[int32]string{
		0: "None",
		1: "Alliance",
		2: "Empire",
		3: "Federation",
		4: "Independent",
		5: "PilotsFederation",
	}
	Allegiance_Type_value = map[string]int32{
		"None":             0,
		"Alliance":         1,
		"Empire":           2,
		"Federation":       3,
		"Independent":      4,
		"PilotsFederation": 5,
	}
)

func (x Allegiance_Type) Enum() *Allegiance_Type {
	p := new(Allegiance_Type)
	*p = x
	return p
}

func (x Allegiance_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Allegiance_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_proto_enumTypes[1].Descriptor()
}

func (Allegiance_Type) Type() protoreflect.EnumType {
	return &file_datatypes_proto_enumTypes[1]
}

func (x Allegiance_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Allegiance_Type.Descriptor instead.
func (Allegiance_Type) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{1, 0}
}

type System_Security_Type int32

const (
	System_Security_None    System_Security_Type = 0
	System_Security_Anarchy System_Security_Type = 1
	System_Security_Low     System_Security_Type = 2
	System_Security_Medium  System_Security_Type = 3
	System_Security_High    System_Security_Type = 4
)

// Enum value maps for System_Security_Type.
var (
	System_Security_Type_name = map[int32]string{
		0: "None",
		1: "Anarchy",
		2: "Low",
		3: "Medium",
		4: "High",
	}
	System_Security_Type_value = map[string]int32{
		"None":    0,
		"Anarchy": 1,
		"Low":     2,
		"Medium":  3,
		"High":    4,
	}
)

func (x System_Security_Type) Enum() *System_Security_Type {
	p := new(System_Security_Type)
	*p = x
	return p
}

func (x System_Security_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_Security_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_proto_enumTypes[2].Descriptor()
}

func (System_Security_Type) Type() protoreflect.EnumType {
	return &file_datatypes_proto_enumTypes[2]
}

func (x System_Security_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_Security_Type.Descriptor instead.
func (System_Security_Type) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{2, 1, 0}
}

type System_Power_State int32

const (
	System_Power_None      System_Power_State = 0
	System_Power_Contested System_Power_State = 1
	System_Power_Control   System_Power_State = 2
	System_Power_Expansion System_Power_State = 3
	System_Power_Exploited System_Power_State = 4
)

// Enum value maps for System_Power_State.
var (
	System_Power_State_name = map[int32]string{
		0: "None",
		1: "Contested",
		2: "Control",
		3: "Expansion",
		4: "Exploited",
	}
	System_Power_State_value = map[string]int32{
		"None":      0,
		"Contested": 1,
		"Control":   2,
		"Expansion": 3,
		"Exploited": 4,
	}
)

func (x System_Power_State) Enum() *System_Power_State {
	p := new(System_Power_State)
	*p = x
	return p
}

func (x System_Power_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_Power_State) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_proto_enumTypes[3].Descriptor()
}

func (System_Power_State) Type() protoreflect.EnumType {
	return &file_datatypes_proto_enumTypes[3]
}

func (x System_Power_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_Power_State.Descriptor instead.
func (System_Power_State) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{2, 2, 0}
}

// Type enumerates the different facility types, based on values from EDDB.
type Facility_Type int32

const (
	Facility_None                Facility_Type = 0
	Facility_CivilianOutpost     Facility_Type = 1
	Facility_CommercialOutpost   Facility_Type = 2
	Facility_CoriolisStarport    Facility_Type = 3
	Facility_IndustrialOutpost   Facility_Type = 4
	Facility_MilitaryOutpost     Facility_Type = 5
	Facility_MiningOutpost       Facility_Type = 6
	Facility_OcellusStarport     Facility_Type = 7
	Facility_OrbisStarport       Facility_Type = 8
	Facility_ScientificOutpost   Facility_Type = 9
	Facility_PlanetaryOutpost    Facility_Type = 13
	Facility_PlanetaryPort       Facility_Type = 14
	Facility_PlanetarySettlement Facility_Type = 16
	Facility_Megaship            Facility_Type = 19
	Facility_AsteroidBase        Facility_Type = 20
	Facility_FleetCarrier        Facility_Type = 24
)

// Enum value maps for Facility_Type.
var (
	Facility_Type_name = map[int32]string{
		0:  "None",
		1:  "CivilianOutpost",
		2:  "CommercialOutpost",
		3:  "CoriolisStarport",
		4:  "IndustrialOutpost",
		5:  "MilitaryOutpost",
		6:  "MiningOutpost",
		7:  "OcellusStarport",
		8:  "OrbisStarport",
		9:  "ScientificOutpost",
		13: "PlanetaryOutpost",
		14: "PlanetaryPort",
		16: "PlanetarySettlement",
		19: "Megaship",
		20: "AsteroidBase",
		24: "FleetCarrier",
	}
	Facility_Type_value = map[string]int32{
		"None":                0,
		"CivilianOutpost":     1,
		"CommercialOutpost":   2,
		"CoriolisStarport":    3,
		"IndustrialOutpost":   4,
		"MilitaryOutpost":     5,
		"MiningOutpost":       6,
		"OcellusStarport":     7,
		"OrbisStarport":       8,
		"ScientificOutpost":   9,
		"PlanetaryOutpost":    13,
		"PlanetaryPort":       14,
		"PlanetarySettlement": 16,
		"Megaship":            19,
		"AsteroidBase":        20,
		"FleetCarrier":        24,
	}
)

func (x Facility_Type) Enum() *Facility_Type {
	p := new(Facility_Type)
	*p = x
	return p
}

func (x Facility_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Facility_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_proto_enumTypes[4].Descriptor()
}

func (Facility_Type) Type() protoreflect.EnumType {
	return &file_datatypes_proto_enumTypes[4]
}

func (x Facility_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Facility_Type.Descriptor instead.
func (Facility_Type) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{3, 0}
}

// PadSize enumerates the different sizes for landing pads.
type Facility_Features_PadSize int32

const (
	Facility_Features_None   Facility_Features_PadSize = 0
	Facility_Features_Small  Facility_Features_PadSize = 1
	Facility_Features_Medium Facility_Features_PadSize = 2
	Facility_Features_Large  Facility_Features_PadSize = 3
)

// Enum value maps for Facility_Features_PadSize.
var (
	Facility_Features_PadSize_name = map[int32]string{
		0: "None",
		1: "Small",
		2: "Medium",
		3: "Large",
	}
	Facility_Features_PadSize_value = map[string]int32{
		"None":   0,
		"Small":  1,
		"Medium": 2,
		"Large":  3,
	}
)

func (x Facility_Features_PadSize) Enum() *Facility_Features_PadSize {
	p := new(Facility_Features_PadSize)
	*p = x
	return p
}

func (x Facility_Features_PadSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Facility_Features_PadSize) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_proto_enumTypes[5].Descriptor()
}

func (Facility_Features_PadSize) Type() protoreflect.EnumType {
	return &file_datatypes_proto_enumTypes[5]
}

func (x Facility_Features_PadSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Facility_Features_PadSize.Descriptor instead.
func (Facility_Features_PadSize) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{3, 0, 0}
}

// Category represents a grouping of Commodities, e.g. "Tech" or "Drugs".
type Commodity_Category int32

const (
	Commodity_None                Commodity_Category = 0
	Commodity_Chemicals           Commodity_Category = 1
	Commodity_ConsumerItems       Commodity_Category = 2
	Commodity_LegalDrugs          Commodity_Category = 3
	Commodity_Foods               Commodity_Category = 4
	Commodity_IndustrialMaterials Commodity_Category = 5
	Commodity_Machinery           Commodity_Category = 6
	Commodity_Medicines           Commodity_Category = 7
	Commodity_Metals              Commodity_Category = 8
	Commodity_Minerals            Commodity_Category = 9
	Commodity_Slavery             Commodity_Category = 10
	Commodity_Technology          Commodity_Category = 11
	Commodity_Textiles            Commodity_Category = 12
	Commodity_Waste               Commodity_Category = 13
	Commodity_Weapons             Commodity_Category = 14
	Commodity_Unknown             Commodity_Category = 15
	Commodity_Salvage             Commodity_Category = 16
)

// Enum value maps for Commodity_Category.
var (
	Commodity_Category_name = map[int32]string{
		0:  "None",
		1:  "Chemicals",
		2:  "ConsumerItems",
		3:  "LegalDrugs",
		4:  "Foods",
		5:  "IndustrialMaterials",
		6:  "Machinery",
		7:  "Medicines",
		8:  "Metals",
		9:  "Minerals",
		10: "Slavery",
		11: "Technology",
		12: "Textiles",
		13: "Waste",
		14: "Weapons",
		15: "Unknown",
		16: "Salvage",
	}
	Commodity_Category_value = map[string]int32{
		"None":                0,
		"Chemicals":           1,
		"ConsumerItems":       2,
		"LegalDrugs":          3,
		"Foods":               4,
		"IndustrialMaterials": 5,
		"Machinery":           6,
		"Medicines":           7,
		"Metals":              8,
		"Minerals":            9,
		"Slavery":             10,
		"Technology":          11,
		"Textiles":            12,
		"Waste":               13,
		"Weapons":             14,
		"Unknown":             15,
		"Salvage":             16,
	}
)

func (x Commodity_Category) Enum() *Commodity_Category {
	p := new(Commodity_Category)
	*p = x
	return p
}

func (x Commodity_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Commodity_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_proto_enumTypes[6].Descriptor()
}

func (Commodity_Category) Type() protoreflect.EnumType {
	return &file_datatypes_proto_enumTypes[6]
}

func (x Commodity_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Commodity_Category.Descriptor instead.
func (Commodity_Category) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{4, 0}
}

type Listing_Capacity_Bracket int32

const (
	Listing_Capacity_None Listing_Capacity_Bracket = 0
	Listing_Capacity_Low  Listing_Capacity_Bracket = 1
	Listing_Capacity_Med  Listing_Capacity_Bracket = 2
	Listing_Capacity_High Listing_Capacity_Bracket = 3
)

// Enum value maps for Listing_Capacity_Bracket.
var (
	Listing_Capacity_Bracket_name = map[int32]string{
		0: "None",
		1: "Low",
		2: "Med",
		3: "High",
	}
	Listing_Capacity_Bracket_value = map[string]int32{
		"None": 0,
		"Low":  1,
		"Med":  2,
		"High": 3,
	}
)

func (x Listing_Capacity_Bracket) Enum() *Listing_Capacity_Bracket {
	p := new(Listing_Capacity_Bracket)
	*p = x
	return p
}

func (x Listing_Capacity_Bracket) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Listing_Capacity_Bracket) Descriptor() protoreflect.EnumDescriptor {
	return file_datatypes_proto_enumTypes[7].Descriptor()
}

func (Listing_Capacity_Bracket) Type() protoreflect.EnumType {
	return &file_datatypes_proto_enumTypes[7]
}

func (x Listing_Capacity_Bracket) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Listing_Capacity_Bracket.Descriptor instead.
func (Listing_Capacity_Bracket) EnumDescriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{5, 0, 0}
}

// Government is an enumeration of government types reduced to a single field.
// (this encapsulation prevents the enums leaking into the parent scope)
type Government struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Government_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ettudata.Government_Type" json:"type,omitempty"`
}

func (x *Government) Reset() {
	*x = Government{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Government) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Government) ProtoMessage() {}

func (x *Government) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Government.ProtoReflect.Descriptor instead.
func (*Government) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{0}
}

func (x *Government) GetType() Government_Type {
	if x != nil {
		return x.Type
	}
	return Government_None
}

// Allegiance is an enumeration of allegiance types reduced to a single field.
type Allegiance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Allegiance_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ettudata.Allegiance_Type" json:"type,omitempty"`
}

func (x *Allegiance) Reset() {
	*x = Allegiance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allegiance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allegiance) ProtoMessage() {}

func (x *Allegiance) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allegiance.ProtoReflect.Descriptor instead.
func (*Allegiance) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{1}
}

func (x *Allegiance) GetType() Allegiance_Type {
	if x != nil {
		return x.Type
	}
	return Allegiance_None
}

// System corresponds to an individual Elite-Dangerous star system, akin to a map.
type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID assigned to the system in this database.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique name of the system.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Unique timestamp of the last update to this entry.
	Updated  uint64              `protobuf:"varint,3,opt,name=updated,proto3" json:"updated,omitempty"`
	Position *System_Coordinates `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	// Whether anyone lives here.
	IsPopulated bool `protobuf:"varint,5,opt,name=isPopulated,proto3" json:"isPopulated,omitempty"`
	// Requires a special permit to enter the system.
	NeedsPermit bool `protobuf:"varint,6,opt,name=needsPermit,proto3" json:"needsPermit,omitempty"`
	// Law-enforcement aggressiveness.
	Security *System_Security `protobuf:"bytes,7,opt,name=security,proto3" json:"security,omitempty"`
	// What is the government for the system.
	Government *Government `protobuf:"bytes,9,opt,name=government,proto3" json:"government,omitempty"`
	// Which faction is the system allied to.
	Allegiance *Allegiance `protobuf:"bytes,10,opt,name=allegiance,proto3" json:"allegiance,omitempty"`
	// Something something id.
	EdsmID uint64 `protobuf:"varint,11,opt,name=edsmID,proto3" json:"edsmID,omitempty"`
	// Something something id - I think this is the elite-dangerous internal id?
	EdSystemAddress uint64 `protobuf:"varint,12,opt,name=edSystemAddress,proto3" json:"edSystemAddress,omitempty"`
}

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{2}
}

func (x *System) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *System) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *System) GetUpdated() uint64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *System) GetPosition() *System_Coordinates {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *System) GetIsPopulated() bool {
	if x != nil {
		return x.IsPopulated
	}
	return false
}

func (x *System) GetNeedsPermit() bool {
	if x != nil {
		return x.NeedsPermit
	}
	return false
}

func (x *System) GetSecurity() *System_Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *System) GetGovernment() *Government {
	if x != nil {
		return x.Government
	}
	return nil
}

func (x *System) GetAllegiance() *Allegiance {
	if x != nil {
		return x.Allegiance
	}
	return nil
}

func (x *System) GetEdsmID() uint64 {
	if x != nil {
		return x.EdsmID
	}
	return 0
}

func (x *System) GetEdSystemAddress() uint64 {
	if x != nil {
		return x.EdSystemAddress
	}
	return 0
}

// Facility represents a static, dockable entity within the game such as a station or planetary base.
type Facility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID assigned to the facility in this database.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Facility name excluding system.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Unix timestamp of last update.
	Updated uint64 `protobuf:"varint,3,opt,name=updated,proto3" json:"updated,omitempty"`
	// The database-ID of the system this facility belongs to.
	SystemID uint64 `protobuf:"varint,4,opt,name=systemID,proto3" json:"systemID,omitempty"`
	// What type of facility this is.
	Type Facility_Type `protobuf:"varint,5,opt,name=type,proto3,enum=ettudata.Facility_Type" json:"type,omitempty"`
	// List of features and pad size at this facility.
	Features *Facility_Features `protobuf:"bytes,6,opt,name=features,proto3" json:"features,omitempty"`
	// Distance from the facility to the entry point in the system.
	LsToStar float32 `protobuf:"fixed32,7,opt,name=lsToStar,proto3" json:"lsToStar,omitempty"`
	// The governance of this station. If not present, assume system's government.
	Government *Government `protobuf:"bytes,8,opt,name=government,proto3" json:"government,omitempty"` ///TODO: should pr
	// The allegiance of this station. If not present, assume system's allegiance.
	Allegiance *Allegiance `protobuf:"bytes,9,opt,name=allegiance,proto3" json:"allegiance,omitempty"`
	EdMarketID uint64      `protobuf:"varint,10,opt,name=edMarketID,proto3" json:"edMarketID,omitempty"`
}

func (x *Facility) Reset() {
	*x = Facility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facility) ProtoMessage() {}

func (x *Facility) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facility.ProtoReflect.Descriptor instead.
func (*Facility) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{3}
}

func (x *Facility) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Facility) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Facility) GetUpdated() uint64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Facility) GetSystemID() uint64 {
	if x != nil {
		return x.SystemID
	}
	return 0
}

func (x *Facility) GetType() Facility_Type {
	if x != nil {
		return x.Type
	}
	return Facility_None
}

func (x *Facility) GetFeatures() *Facility_Features {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Facility) GetLsToStar() float32 {
	if x != nil {
		return x.LsToStar
	}
	return 0
}

func (x *Facility) GetGovernment() *Government {
	if x != nil {
		return x.Government
	}
	return nil
}

func (x *Facility) GetAllegiance() *Allegiance {
	if x != nil {
		return x.Allegiance
	}
	return nil
}

func (x *Facility) GetEdMarketID() uint64 {
	if x != nil {
		return x.EdMarketID
	}
	return 0
}

// Commodity is a type of item that can be traded within the game. At the moment,
// the categories are small enough I decided to just enumerate them right here.
type Commodity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID assigned to this commodity in the local database.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the commodity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Which category does the commodity belong to.
	Category Commodity_Category `protobuf:"varint,3,opt,name=category,proto3,enum=ettudata.Commodity_Category" json:"category,omitempty"`
	// Do we know if it is rare?
	IsRare bool `protobuf:"varint,4,opt,name=isRare,proto3" json:"isRare,omitempty"`
	// Do we know if it is non-marketable?
	IsNonMarketable bool `protobuf:"varint,5,opt,name=isNonMarketable,proto3" json:"isNonMarketable,omitempty"`
	// Do we know (or care?) what the average galactic price is?
	AveragePrice uint64 `protobuf:"varint,6,opt,name=averagePrice,proto3" json:"averagePrice,omitempty"`
	// Do we know elite's internal ID for it?
	EdID uint64 `protobuf:"varint,7,opt,name=edID,proto3" json:"edID,omitempty"`
}

func (x *Commodity) Reset() {
	*x = Commodity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commodity) ProtoMessage() {}

func (x *Commodity) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commodity.ProtoReflect.Descriptor instead.
func (*Commodity) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{4}
}

func (x *Commodity) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Commodity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Commodity) GetCategory() Commodity_Category {
	if x != nil {
		return x.Category
	}
	return Commodity_None
}

func (x *Commodity) GetIsRare() bool {
	if x != nil {
		return x.IsRare
	}
	return false
}

func (x *Commodity) GetIsNonMarketable() bool {
	if x != nil {
		return x.IsNonMarketable
	}
	return false
}

func (x *Commodity) GetAveragePrice() uint64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *Commodity) GetEdID() uint64 {
	if x != nil {
		return x.EdID
	}
	return 0
}

// Listing is a discrete entry for a Commodity that is being sold at a
// facility. Listings are grouped by facility in a FacilityListing.
type Listing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local database ID of the commodity being listed.
	CommodityID uint32 `protobuf:"varint,1,opt,name=commodityID,proto3" json:"commodityID,omitempty"`
	// A description of availability and cost here if the item is sold.
	Supply *Listing_Capacity `protobuf:"bytes,2,opt,name=supply,proto3" json:"supply,omitempty"`
	// A description of units required and the price offered for them here.
	Demand *Listing_Capacity `protobuf:"bytes,3,opt,name=demand,proto3" json:"demand,omitempty"`
	// Unix timestamp of when this record was collected.
	Collected uint64 `protobuf:"varint,4,opt,name=collected,proto3" json:"collected,omitempty"`
}

func (x *Listing) Reset() {
	*x = Listing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listing) ProtoMessage() {}

func (x *Listing) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listing.ProtoReflect.Descriptor instead.
func (*Listing) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{5}
}

func (x *Listing) GetCommodityID() uint32 {
	if x != nil {
		return x.CommodityID
	}
	return 0
}

func (x *Listing) GetSupply() *Listing_Capacity {
	if x != nil {
		return x.Supply
	}
	return nil
}

func (x *Listing) GetDemand() *Listing_Capacity {
	if x != nil {
		return x.Demand
	}
	return nil
}

func (x *Listing) GetCollected() uint64 {
	if x != nil {
		return x.Collected
	}
	return 0
}

// FacilityListing represents the trade available at a given facility.
type FacilityListing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local database Unique ID of this facility.
	FacilityID uint64 `protobuf:"varint,1,opt,name=facilityID,proto3" json:"facilityID,omitempty"`
	// List of commodities being traded here.
	Listings []*Listing `protobuf:"bytes,2,rep,name=listings,proto3" json:"listings,omitempty"`
}

func (x *FacilityListing) Reset() {
	*x = FacilityListing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacilityListing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacilityListing) ProtoMessage() {}

func (x *FacilityListing) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacilityListing.ProtoReflect.Descriptor instead.
func (*FacilityListing) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{6}
}

func (x *FacilityListing) GetFacilityID() uint64 {
	if x != nil {
		return x.FacilityID
	}
	return 0
}

func (x *FacilityListing) GetListings() []*Listing {
	if x != nil {
		return x.Listings
	}
	return nil
}

// Coordinates encapsulates a 3-dimensional stellar position into a single message.
type System_Coordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *System_Coordinates) Reset() {
	*x = System_Coordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Coordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Coordinates) ProtoMessage() {}

func (x *System_Coordinates) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Coordinates.ProtoReflect.Descriptor instead.
func (*System_Coordinates) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{2, 0}
}

func (x *System_Coordinates) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *System_Coordinates) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *System_Coordinates) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Security level is system-specific and determines how aggressive law enforcement is.
type System_Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type System_Security_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ettudata.System_Security_Type" json:"type,omitempty"`
}

func (x *System_Security) Reset() {
	*x = System_Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Security) ProtoMessage() {}

func (x *System_Security) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Security.ProtoReflect.Descriptor instead.
func (*System_Security) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{2, 1}
}

func (x *System_Security) GetType() System_Security_Type {
	if x != nil {
		return x.Type
	}
	return System_Security_None
}

// Power is system-specific and has to do with factions and missions (I think).
type System_Power struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State System_Power_State `protobuf:"varint,1,opt,name=state,proto3,enum=ettudata.System_Power_State" json:"state,omitempty"`
}

func (x *System_Power) Reset() {
	*x = System_Power{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_Power) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_Power) ProtoMessage() {}

func (x *System_Power) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_Power.ProtoReflect.Descriptor instead.
func (*System_Power) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{2, 2}
}

func (x *System_Power) GetState() System_Power_State {
	if x != nil {
		return x.State
	}
	return System_Power_None
}

// Features encapsulates the minor attributes of a facility such
// as whether you can trade with it, how large the pad is.
// This helps keep the number of fields within Facility proper
// under 15.
type Facility_Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Does it have an accessible trade market.
	HasMarket bool `protobuf:"varint,1,opt,name=hasMarket,proto3" json:"hasMarket,omitempty"`
	// Does it have a black market.
	HasBlackmarket bool `protobuf:"varint,2,opt,name=hasBlackmarket,proto3" json:"hasBlackmarket,omitempty"`
	// Can it refuel.
	HasRefuel bool `protobuf:"varint,3,opt,name=hasRefuel,proto3" json:"hasRefuel,omitempty"`
	// Can it repair.
	HasRepair bool `protobuf:"varint,4,opt,name=hasRepair,proto3" json:"hasRepair,omitempty"`
	// Can it re-arm.
	HasRearm bool `protobuf:"varint,5,opt,name=hasRearm,proto3" json:"hasRearm,omitempty"`
	// Does it sell/upgrade ship components.
	HasOutfitting bool `protobuf:"varint,6,opt,name=hasOutfitting,proto3" json:"hasOutfitting,omitempty"`
	// Can you buy ships here.
	HasShipyard bool `protobuf:"varint,7,opt,name=hasShipyard,proto3" json:"hasShipyard,omitempty"`
	// Can you dock here (this is taken from EDDB and might be redundant).
	HasDocking bool `protobuf:"varint,8,opt,name=hasDocking,proto3" json:"hasDocking,omitempty"`
	// Does the market have regular trading commodities available.
	HasCommodities bool `protobuf:"varint,9,opt,name=hasCommodities,proto3" json:"hasCommodities,omitempty"`
	// Is it on a planet.
	IsPlanetary bool `protobuf:"varint,10,opt,name=isPlanetary,proto3" json:"isPlanetary,omitempty"` ///TODO: fleet?
	// What's the largest ship supported by the landing pad.
	Pad Facility_Features_PadSize `protobuf:"varint,11,opt,name=pad,proto3,enum=ettudata.Facility_Features_PadSize" json:"pad,omitempty"`
}

func (x *Facility_Features) Reset() {
	*x = Facility_Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facility_Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facility_Features) ProtoMessage() {}

func (x *Facility_Features) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facility_Features.ProtoReflect.Descriptor instead.
func (*Facility_Features) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Facility_Features) GetHasMarket() bool {
	if x != nil {
		return x.HasMarket
	}
	return false
}

func (x *Facility_Features) GetHasBlackmarket() bool {
	if x != nil {
		return x.HasBlackmarket
	}
	return false
}

func (x *Facility_Features) GetHasRefuel() bool {
	if x != nil {
		return x.HasRefuel
	}
	return false
}

func (x *Facility_Features) GetHasRepair() bool {
	if x != nil {
		return x.HasRepair
	}
	return false
}

func (x *Facility_Features) GetHasRearm() bool {
	if x != nil {
		return x.HasRearm
	}
	return false
}

func (x *Facility_Features) GetHasOutfitting() bool {
	if x != nil {
		return x.HasOutfitting
	}
	return false
}

func (x *Facility_Features) GetHasShipyard() bool {
	if x != nil {
		return x.HasShipyard
	}
	return false
}

func (x *Facility_Features) GetHasDocking() bool {
	if x != nil {
		return x.HasDocking
	}
	return false
}

func (x *Facility_Features) GetHasCommodities() bool {
	if x != nil {
		return x.HasCommodities
	}
	return false
}

func (x *Facility_Features) GetIsPlanetary() bool {
	if x != nil {
		return x.IsPlanetary
	}
	return false
}

func (x *Facility_Features) GetPad() Facility_Features_PadSize {
	if x != nil {
		return x.Pad
	}
	return Facility_Features_None
}

// Capacity describes the number of units and price associated with
// either demand or supply for a listing.
type Listing_Capacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which supply/demand bracket is the item in?
	Bracket Listing_Capacity_Bracket `protobuf:"varint,1,opt,name=bracket,proto3,enum=ettudata.Listing_Capacity_Bracket" json:"bracket,omitempty"`
	// How many units are wanted/available.
	Units uint32 `protobuf:"varint,2,opt,name=units,proto3" json:"units,omitempty"`
	// Asking/offering price.
	Credits uint32 `protobuf:"varint,3,opt,name=credits,proto3" json:"credits,omitempty"`
}

func (x *Listing_Capacity) Reset() {
	*x = Listing_Capacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_datatypes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listing_Capacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listing_Capacity) ProtoMessage() {}

func (x *Listing_Capacity) ProtoReflect() protoreflect.Message {
	mi := &file_datatypes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listing_Capacity.ProtoReflect.Descriptor instead.
func (*Listing_Capacity) Descriptor() ([]byte, []int) {
	return file_datatypes_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Listing_Capacity) GetBracket() Listing_Capacity_Bracket {
	if x != nil {
		return x.Bracket
	}
	return Listing_Capacity_None
}

func (x *Listing_Capacity) GetUnits() uint32 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *Listing_Capacity) GetCredits() uint32 {
	if x != nil {
		return x.Credits
	}
	return 0
}

var File_datatypes_proto protoreflect.FileDescriptor

var file_datatypes_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x22, 0x84, 0x02, 0x0a, 0x0a,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x73, 0x6d, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x63, 0x79, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f,
	0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x6d,
	0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x65,
	0x75, 0x64, 0x61, 0x6c, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6e,
	0x61, 0x67, 0x65, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x10,
	0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x6e,
	0x79, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x68, 0x65, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79,
	0x10, 0x0c, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x67,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x61, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x73, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x05, 0x22, 0xeb, 0x05, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x65, 0x67,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x74,
	0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x64, 0x73, 0x6d, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65,
	0x64, 0x73, 0x6d, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x65, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x37, 0x0a, 0x0b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x1a, 0x7c, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6e,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x69, 0x67, 0x68, 0x10, 0x04, 0x1a, 0x88, 0x01, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x65, 0x64, 0x10,
	0x04, 0x22, 0x84, 0x09, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6c, 0x73, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x6c, 0x6c, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x65,
	0x67, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x64, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x1a, 0xc8, 0x03, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73,
	0x52, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61,
	0x73, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x72,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x72,
	0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x4f, 0x75, 0x74,
	0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x53, 0x68,
	0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61,
	0x73, 0x53, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73,
	0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68,
	0x61, 0x73, 0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x03, 0x70, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x03, 0x70, 0x61, 0x64, 0x22, 0x35, 0x0a, 0x07, 0x50, 0x61,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x10,
	0x03, 0x22, 0xc4, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x61, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x72, 0x69, 0x6f, 0x6c, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74,
	0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70,
	0x6f, 0x73, 0x74, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x72,
	0x62, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x08, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x6f,
	0x73, 0x74, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x10, 0x0e, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x65, 0x67, 0x61, 0x73, 0x68,
	0x69, 0x70, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x69, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x10, 0x18, 0x22, 0xe5, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65,
	0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x52, 0x61, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x65, 0x64, 0x49, 0x44, 0x22, 0xff,
	0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x6d, 0x69, 0x63, 0x61,
	0x6c, 0x73, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x44, 0x72, 0x75, 0x67, 0x73, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6f, 0x6f, 0x64, 0x73,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x74,
	0x61, 0x6c, 0x73, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x73, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x72, 0x79, 0x10, 0x0a,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x10, 0x0b,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x10, 0x0c, 0x12, 0x09,
	0x0a, 0x05, 0x57, 0x61, 0x73, 0x74, 0x65, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x73, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x10, 0x10,
	0x22, 0xdd, 0x02, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x06, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x06, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x1a, 0xa9, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x42,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22,
	0x2f, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x65, 0x64, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x10, 0x03,
	0x22, 0x60, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x66, 0x73, 0x6f, 0x6e, 0x65, 0x2f, 0x67, 0x6f, 0x6d, 0x65, 0x6e, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x2f, 0x65, 0x74, 0x74, 0x75, 0x64, 0x61, 0x74, 0x61, 0x3b, 0x65, 0x74, 0x74, 0x75,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_datatypes_proto_rawDescOnce sync.Once
	file_datatypes_proto_rawDescData = file_datatypes_proto_rawDesc
)

func file_datatypes_proto_rawDescGZIP() []byte {
	file_datatypes_proto_rawDescOnce.Do(func() {
		file_datatypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_datatypes_proto_rawDescData)
	})
	return file_datatypes_proto_rawDescData
}

var file_datatypes_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_datatypes_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_datatypes_proto_goTypes = []interface{}{
	(Government_Type)(0),           // 0: ettudata.Government.Type
	(Allegiance_Type)(0),           // 1: ettudata.Allegiance.Type
	(System_Security_Type)(0),      // 2: ettudata.System.Security.Type
	(System_Power_State)(0),        // 3: ettudata.System.Power.State
	(Facility_Type)(0),             // 4: ettudata.Facility.Type
	(Facility_Features_PadSize)(0), // 5: ettudata.Facility.Features.PadSize
	(Commodity_Category)(0),        // 6: ettudata.Commodity.Category
	(Listing_Capacity_Bracket)(0),  // 7: ettudata.Listing.Capacity.Bracket
	(*Government)(nil),             // 8: ettudata.Government
	(*Allegiance)(nil),             // 9: ettudata.Allegiance
	(*System)(nil),                 // 10: ettudata.System
	(*Facility)(nil),               // 11: ettudata.Facility
	(*Commodity)(nil),              // 12: ettudata.Commodity
	(*Listing)(nil),                // 13: ettudata.Listing
	(*FacilityListing)(nil),        // 14: ettudata.FacilityListing
	(*System_Coordinates)(nil),     // 15: ettudata.System.Coordinates
	(*System_Security)(nil),        // 16: ettudata.System.Security
	(*System_Power)(nil),           // 17: ettudata.System.Power
	(*Facility_Features)(nil),      // 18: ettudata.Facility.Features
	(*Listing_Capacity)(nil),       // 19: ettudata.Listing.Capacity
}
var file_datatypes_proto_depIdxs = []int32{
	0,  // 0: ettudata.Government.type:type_name -> ettudata.Government.Type
	1,  // 1: ettudata.Allegiance.type:type_name -> ettudata.Allegiance.Type
	15, // 2: ettudata.System.position:type_name -> ettudata.System.Coordinates
	16, // 3: ettudata.System.security:type_name -> ettudata.System.Security
	8,  // 4: ettudata.System.government:type_name -> ettudata.Government
	9,  // 5: ettudata.System.allegiance:type_name -> ettudata.Allegiance
	4,  // 6: ettudata.Facility.type:type_name -> ettudata.Facility.Type
	18, // 7: ettudata.Facility.features:type_name -> ettudata.Facility.Features
	8,  // 8: ettudata.Facility.government:type_name -> ettudata.Government
	9,  // 9: ettudata.Facility.allegiance:type_name -> ettudata.Allegiance
	6,  // 10: ettudata.Commodity.category:type_name -> ettudata.Commodity.Category
	19, // 11: ettudata.Listing.supply:type_name -> ettudata.Listing.Capacity
	19, // 12: ettudata.Listing.demand:type_name -> ettudata.Listing.Capacity
	13, // 13: ettudata.FacilityListing.listings:type_name -> ettudata.Listing
	2,  // 14: ettudata.System.Security.type:type_name -> ettudata.System.Security.Type
	3,  // 15: ettudata.System.Power.state:type_name -> ettudata.System.Power.State
	5,  // 16: ettudata.Facility.Features.pad:type_name -> ettudata.Facility.Features.PadSize
	7,  // 17: ettudata.Listing.Capacity.bracket:type_name -> ettudata.Listing.Capacity.Bracket
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_datatypes_proto_init() }
func file_datatypes_proto_init() {
	if File_datatypes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_datatypes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Government); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allegiance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commodity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacilityListing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Coordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_Power); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facility_Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_datatypes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listing_Capacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_datatypes_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_datatypes_proto_goTypes,
		DependencyIndexes: file_datatypes_proto_depIdxs,
		EnumInfos:         file_datatypes_proto_enumTypes,
		MessageInfos:      file_datatypes_proto_msgTypes,
	}.Build()
	File_datatypes_proto = out.File
	file_datatypes_proto_rawDesc = nil
	file_datatypes_proto_goTypes = nil
	file_datatypes_proto_depIdxs = nil
}
