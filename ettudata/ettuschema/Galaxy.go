// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ettuschema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Encapsulation of all the data.
type Galaxy struct {
	_tab flatbuffers.Table
}

func GetRootAsGalaxy(buf []byte, offset flatbuffers.UOffsetT) *Galaxy {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Galaxy{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Galaxy) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Galaxy) Table() flatbuffers.Table {
	return rcv._tab
}

/// Semantically-versioned schema id.
func (rcv *Galaxy) SchemaVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Semantically-versioned schema id.
/// Human-friendly description of what is enclosed, e.g "import from source X" or
/// "complete local database". Entirely descriptive.
func (rcv *Galaxy) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Human-friendly description of what is enclosed, e.g "import from source X" or
/// "complete local database". Entirely descriptive.
/// Human-friendly attributition, if relevant.
func (rcv *Galaxy) Attribution() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Human-friendly attributition, if relevant.
/// UTC Unix time of generation.
func (rcv *Galaxy) TimestampUtc() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// UTC Unix time of generation.
func (rcv *Galaxy) MutateTimestampUtc(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

/// Items recognized by this data.
func (rcv *Galaxy) Commodities(obj *Commodity, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Galaxy) CommoditiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Items recognized by this data.
/// Systems recognized by this data (presence of facilities optional).
func (rcv *Galaxy) Systems(obj *System, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Galaxy) SystemsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Systems recognized by this data (presence of facilities optional).
/// Fields reserved for any user-specific notes.
func (rcv *Galaxy) UserData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Fields reserved for any user-specific notes.
/// 3rd-party application values that prefer .ini format.
func (rcv *Galaxy) IniData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 3rd-party application values that prefer .ini format.
/// 3rd-party application values that prefer .json format.
func (rcv *Galaxy) JsonData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 3rd-party application values that prefer .json format.
/// 3rd-party application values that prefer .yaml because they hate life.
func (rcv *Galaxy) YamlData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// 3rd-party application values that prefer .yaml because they hate life.
func GalaxyStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func GalaxyAddSchemaVersion(builder *flatbuffers.Builder, schemaVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(schemaVersion), 0)
}
func GalaxyAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(description), 0)
}
func GalaxyAddAttribution(builder *flatbuffers.Builder, attribution flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(attribution), 0)
}
func GalaxyAddTimestampUtc(builder *flatbuffers.Builder, timestampUtc uint64) {
	builder.PrependUint64Slot(3, timestampUtc, 0)
}
func GalaxyAddCommodities(builder *flatbuffers.Builder, commodities flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(commodities), 0)
}
func GalaxyStartCommoditiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GalaxyAddSystems(builder *flatbuffers.Builder, systems flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(systems), 0)
}
func GalaxyStartSystemsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GalaxyAddUserData(builder *flatbuffers.Builder, userData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(userData), 0)
}
func GalaxyAddIniData(builder *flatbuffers.Builder, iniData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(iniData), 0)
}
func GalaxyAddJsonData(builder *flatbuffers.Builder, jsonData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(jsonData), 0)
}
func GalaxyAddYamlData(builder *flatbuffers.Builder, yamlData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(yamlData), 0)
}
func GalaxyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
