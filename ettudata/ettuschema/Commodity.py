# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ettuschema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Commodity is a type of item that can be traded within the game. At the moment,
# the categories are small enough I decided to just enumerate them right here.
class Commodity(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCommodity(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Commodity()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def CommodityBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x67\x6F\x6D\x64", size_prefixed=size_prefixed)

    # Commodity
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Elite Dangerous' internal ID for the commodity acts as the key.
    # Commodity
    def CommodityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Name can be localized as long as the English name is preserved for hashing.
    # Commodity
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # What type of item is this.
    # Commodity
    def CategoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Whether the item is known to be rare.
    # Commodity
    def IsRare(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Whether the item is known to be marketable.
    # Commodity
    def IsNonMarketable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The average galactic market price in credits.
    # Commodity
    def AverageCr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def CommodityStart(builder): builder.StartObject(6)
def CommodityAddCommodityId(builder, commodityId): builder.PrependUint64Slot(0, commodityId, 0)
def CommodityAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def CommodityAddCategoryId(builder, categoryId): builder.PrependInt8Slot(2, categoryId, 0)
def CommodityAddIsRare(builder, isRare): builder.PrependBoolSlot(3, isRare, 0)
def CommodityAddIsNonMarketable(builder, isNonMarketable): builder.PrependBoolSlot(4, isNonMarketable, 0)
def CommodityAddAverageCr(builder, averageCr): builder.PrependUint32Slot(5, averageCr, 0)
def CommodityEnd(builder): return builder.EndObject()
