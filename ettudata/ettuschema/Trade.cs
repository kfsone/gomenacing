// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ettuschema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Trade is a discrete entry for a Commodity that is or can be traded at with
/// a number of units and a value.
public struct Trade : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Trade __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Which commodity this descrbes.
  public ulong CommodityId { get { return __p.bb.GetUlong(__p.bb_pos + 0); } }
  public void MutateCommodityId(ulong commodity_id) { __p.bb.PutUlong(__p.bb_pos + 0, commodity_id); }
  /// How many units
  public uint Units { get { return __p.bb.GetUint(__p.bb_pos + 8); } }
  public void MutateUnits(uint units) { __p.bb.PutUint(__p.bb_pos + 8, units); }
  /// How many credits
  public ushort Credits { get { return __p.bb.GetUshort(__p.bb_pos + 12); } }
  public void MutateCredits(ushort credits) { __p.bb.PutUshort(__p.bb_pos + 12, credits); }
  /// Unix timestamp UTC.
  public ulong TimestampUtc { get { return __p.bb.GetUlong(__p.bb_pos + 16); } }
  public void MutateTimestampUtc(ulong timestamp_utc) { __p.bb.PutUlong(__p.bb_pos + 16, timestamp_utc); }

  public static Offset<ettuschema.Trade> CreateTrade(FlatBufferBuilder builder, ulong CommodityId, uint Units, ushort Credits, ulong TimestampUtc) {
    builder.Prep(8, 24);
    builder.PutUlong(TimestampUtc);
    builder.Pad(2);
    builder.PutUshort(Credits);
    builder.PutUint(Units);
    builder.PutUlong(CommodityId);
    return new Offset<ettuschema.Trade>(builder.Offset);
  }
};


}
