// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ettuschema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Commodity is a type of item that can be traded within the game. At the moment,
/// the categories are small enough I decided to just enumerate them right here.
type Commodity struct {
	_tab flatbuffers.Table
}

func GetRootAsCommodity(buf []byte, offset flatbuffers.UOffsetT) *Commodity {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Commodity{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Commodity) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Commodity) Table() flatbuffers.Table {
	return rcv._tab
}

/// Elite Dangerous' internal ID for the commodity acts as the key.
func (rcv *Commodity) CommodityId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Elite Dangerous' internal ID for the commodity acts as the key.
func (rcv *Commodity) MutateCommodityId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

/// Name can be localized as long as the English name is preserved for hashing.
func (rcv *Commodity) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name can be localized as long as the English name is preserved for hashing.
/// What type of item is this.
func (rcv *Commodity) CategoryId() CommodityType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return CommodityType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// What type of item is this.
func (rcv *Commodity) MutateCategoryId(n CommodityType) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// Whether the item is known to be rare.
func (rcv *Commodity) IsRare() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Whether the item is known to be rare.
func (rcv *Commodity) MutateIsRare(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

/// Whether the item is known to be marketable.
func (rcv *Commodity) IsNonMarketable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Whether the item is known to be marketable.
func (rcv *Commodity) MutateIsNonMarketable(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

/// The average galactic market price in credits.
func (rcv *Commodity) AverageCr() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// The average galactic market price in credits.
func (rcv *Commodity) MutateAverageCr(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func CommodityStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func CommodityAddCommodityId(builder *flatbuffers.Builder, commodityId uint64) {
	builder.PrependUint64Slot(0, commodityId, 0)
}
func CommodityAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func CommodityAddCategoryId(builder *flatbuffers.Builder, categoryId CommodityType) {
	builder.PrependInt8Slot(2, int8(categoryId), 0)
}
func CommodityAddIsRare(builder *flatbuffers.Builder, isRare bool) {
	builder.PrependBoolSlot(3, isRare, false)
}
func CommodityAddIsNonMarketable(builder *flatbuffers.Builder, isNonMarketable bool) {
	builder.PrependBoolSlot(4, isNonMarketable, false)
}
func CommodityAddAverageCr(builder *flatbuffers.Builder, averageCr uint32) {
	builder.PrependUint32Slot(5, averageCr, 0)
}
func CommodityEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
