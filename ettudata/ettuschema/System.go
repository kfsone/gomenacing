// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ettuschema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// System corresponds to an individual Elite-Dangerous star system, akin to a map.
type System struct {
	_tab flatbuffers.Table
}

func GetRootAsSystem(buf []byte, offset flatbuffers.UOffsetT) *System {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &System{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *System) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *System) Table() flatbuffers.Table {
	return rcv._tab
}

/// System ID is it's upper-cased name hashed via fnv1a.
func (rcv *System) SystemId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// System ID is it's upper-cased name hashed via fnv1a.
func (rcv *System) MutateSystemId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Unique name of the system.
func (rcv *System) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique name of the system.
/// Position in the galaxy.
func (rcv *System) Position(obj *Coordinate) *Coordinate {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Coordinate)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Position in the galaxy.
/// Timestamp of the last update to this entry UTC.
func (rcv *System) TimestampUtc() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Timestamp of the last update to this entry UTC.
func (rcv *System) MutateTimestampUtc(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *System) Power() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Whether anyone lives here.
func (rcv *System) Populated() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Whether anyone lives here.
func (rcv *System) MutatePopulated(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

/// Whether a permit is required to enter the systme.
func (rcv *System) NeedsPermit() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Whether a permit is required to enter the systme.
func (rcv *System) MutateNeedsPermit(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

/// Law-Enforcement level of the system.
func (rcv *System) Security() SecurityLevel {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return SecurityLevel(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 3
}

/// Law-Enforcement level of the system.
func (rcv *System) MutateSecurity(n SecurityLevel) bool {
	return rcv._tab.MutateInt8Slot(18, int8(n))
}

/// What is the government for the system.
func (rcv *System) GovernmentId() Government {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return Government(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 5
}

/// What is the government for the system.
func (rcv *System) MutateGovernmentId(n Government) bool {
	return rcv._tab.MutateInt8Slot(20, int8(n))
}

/// Which faction is the system allied to.
func (rcv *System) AllegianceId() Allegiance {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return Allegiance(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 4
}

/// Which faction is the system allied to.
func (rcv *System) MutateAllegianceId(n Allegiance) bool {
	return rcv._tab.MutateInt8Slot(22, int8(n))
}

/// Guess: Elite Dangerous Internal ID
func (rcv *System) EdAddress() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Guess: Elite Dangerous Internal ID
func (rcv *System) MutateEdAddress(n uint64) bool {
	return rcv._tab.MutateUint64Slot(24, n)
}

/// Facilities in this system.
func (rcv *System) Facilities(obj *Facility, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *System) FacilitiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Facilities in this system.
func SystemStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func SystemAddSystemId(builder *flatbuffers.Builder, systemId uint32) {
	builder.PrependUint32Slot(0, systemId, 0)
}
func SystemAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func SystemAddPosition(builder *flatbuffers.Builder, position flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(position), 0)
}
func SystemAddTimestampUtc(builder *flatbuffers.Builder, timestampUtc uint64) {
	builder.PrependUint64Slot(3, timestampUtc, 0)
}
func SystemAddPower(builder *flatbuffers.Builder, power flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(power), 0)
}
func SystemAddPopulated(builder *flatbuffers.Builder, populated bool) {
	builder.PrependBoolSlot(5, populated, true)
}
func SystemAddNeedsPermit(builder *flatbuffers.Builder, needsPermit bool) {
	builder.PrependBoolSlot(6, needsPermit, false)
}
func SystemAddSecurity(builder *flatbuffers.Builder, security SecurityLevel) {
	builder.PrependInt8Slot(7, int8(security), 3)
}
func SystemAddGovernmentId(builder *flatbuffers.Builder, governmentId Government) {
	builder.PrependInt8Slot(8, int8(governmentId), 5)
}
func SystemAddAllegianceId(builder *flatbuffers.Builder, allegianceId Allegiance) {
	builder.PrependInt8Slot(9, int8(allegianceId), 4)
}
func SystemAddEdAddress(builder *flatbuffers.Builder, edAddress uint64) {
	builder.PrependUint64Slot(10, edAddress, 0)
}
func SystemAddFacilities(builder *flatbuffers.Builder, facilities flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(facilities), 0)
}
func SystemStartFacilitiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SystemEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
