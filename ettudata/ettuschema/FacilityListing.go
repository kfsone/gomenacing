// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ettuschema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FacilityListing struct {
	_tab flatbuffers.Table
}

func GetRootAsFacilityListing(buf []byte, offset flatbuffers.UOffsetT) *FacilityListing {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FacilityListing{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FacilityListing) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FacilityListing) Table() flatbuffers.Table {
	return rcv._tab
}

/// Identifies the facility presenting these trades.
func (rcv *FacilityListing) FacilityId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Identifies the facility presenting these trades.
func (rcv *FacilityListing) MutateFacilityId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Commodities this facility sells.
func (rcv *FacilityListing) Supply(obj *Trade, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 24
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *FacilityListing) SupplyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Commodities this facility sells.
/// Commodities this facility buys.
func (rcv *FacilityListing) Demand(obj *Trade, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 24
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *FacilityListing) DemandLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Commodities this facility buys.
func FacilityListingStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FacilityListingAddFacilityId(builder *flatbuffers.Builder, facilityId uint32) {
	builder.PrependUint32Slot(0, facilityId, 0)
}
func FacilityListingAddSupply(builder *flatbuffers.Builder, supply flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(supply), 0)
}
func FacilityListingStartSupplyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(24, numElems, 8)
}
func FacilityListingAddDemand(builder *flatbuffers.Builder, demand flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(demand), 0)
}
func FacilityListingStartDemandVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(24, numElems, 8)
}
func FacilityListingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
