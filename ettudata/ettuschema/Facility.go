// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ettuschema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Facility represents a static, dockable entity within the game such as a station or planetary base.
/// Instead of assigning stations their own unique IDs, we produce an fnv1a_32 hash of the system name
/// and the station name.
type Facility struct {
	_tab flatbuffers.Table
}

func GetRootAsFacility(buf []byte, offset flatbuffers.UOffsetT) *Facility {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Facility{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Facility) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Facility) Table() flatbuffers.Table {
	return rcv._tab
}

/// "{upper system name}@{facility name upper}"
func (rcv *Facility) FacilityId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// "{upper system name}@{facility name upper}"
func (rcv *Facility) MutateFacilityId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

/// Hash of the all-upper name of the system.
func (rcv *Facility) SystemId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Hash of the all-upper name of the system.
func (rcv *Facility) MutateSystemId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

/// Name of the facility itself.
func (rcv *Facility) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the facility itself.
/// Unix timestamp UTC of last update.
func (rcv *Facility) TimestampUtc() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Unix timestamp UTC of last update.
func (rcv *Facility) MutateTimestampUtc(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

/// Optional facility type.
func (rcv *Facility) FacilityType() FacilityType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return FacilityType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Optional facility type.
func (rcv *Facility) MutateFacilityType(n FacilityType) bool {
	return rcv._tab.MutateInt8Slot(12, int8(n))
}

/// Does it have an accessible trade market.
func (rcv *Facility) HasMarket() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Does it have an accessible trade market.
func (rcv *Facility) MutateHasMarket(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

/// Does it have a black market.
func (rcv *Facility) HasBlackMarket() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Does it have a black market.
func (rcv *Facility) MutateHasBlackMarket(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

/// Can it refuel.
func (rcv *Facility) HasRefuel() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Can it refuel.
func (rcv *Facility) MutateHasRefuel(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

/// Can it repair.
func (rcv *Facility) HasRepair() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Can it repair.
func (rcv *Facility) MutateHasRepair(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

/// Can it re-arm.
func (rcv *Facility) HasRearm() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Can it re-arm.
func (rcv *Facility) MutateHasRearm(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

/// Does it sell/upgrade ship components.
func (rcv *Facility) HasOutfitting() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Does it sell/upgrade ship components.
func (rcv *Facility) MutateHasOutfitting(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

/// Can you buy ships here.
func (rcv *Facility) HasShipyard() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Can you buy ships here.
func (rcv *Facility) MutateHasShipyard(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

/// Can you dock here (this is taken from EDDB and might be redundant).
func (rcv *Facility) HasDocking() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Can you dock here (this is taken from EDDB and might be redundant).
func (rcv *Facility) MutateHasDocking(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

/// Does the market have regular trading commodities available.
func (rcv *Facility) HasCommodities() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return true
}

/// Does the market have regular trading commodities available.
func (rcv *Facility) MutateHasCommodities(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

/// Is it on a planet.
func (rcv *Facility) IsPlanetary() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Is it on a planet.
func (rcv *Facility) MutateIsPlanetary(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

/// Distance from the facility to the entry point in the system.
func (rcv *Facility) LsToStar() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Distance from the facility to the entry point in the system.
func (rcv *Facility) MutateLsToStar(n uint32) bool {
	return rcv._tab.MutateUint32Slot(34, n)
}

/// The governance of this station. If not present, assume system's government.
func (rcv *Facility) Government() Government {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return Government(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 5
}

/// The governance of this station. If not present, assume system's government.
func (rcv *Facility) MutateGovernment(n Government) bool {
	return rcv._tab.MutateInt8Slot(36, int8(n))
}

/// The allegiance of this station. If not present, assume system's allegiance.
func (rcv *Facility) Allegiance() Allegiance {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return Allegiance(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 4
}

/// The allegiance of this station. If not present, assume system's allegiance.
func (rcv *Facility) MutateAllegiance(n Allegiance) bool {
	return rcv._tab.MutateInt8Slot(38, int8(n))
}

/// Presumably the internal ED identifier for the market here.
func (rcv *Facility) EdMarketId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// Presumably the internal ED identifier for the market here.
func (rcv *Facility) MutateEdMarketId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(40, n)
}

func FacilityStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func FacilityAddFacilityId(builder *flatbuffers.Builder, facilityId uint32) {
	builder.PrependUint32Slot(0, facilityId, 0)
}
func FacilityAddSystemId(builder *flatbuffers.Builder, systemId uint32) {
	builder.PrependUint32Slot(1, systemId, 0)
}
func FacilityAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func FacilityAddTimestampUtc(builder *flatbuffers.Builder, timestampUtc uint64) {
	builder.PrependUint64Slot(3, timestampUtc, 0)
}
func FacilityAddFacilityType(builder *flatbuffers.Builder, facilityType FacilityType) {
	builder.PrependInt8Slot(4, int8(facilityType), 0)
}
func FacilityAddHasMarket(builder *flatbuffers.Builder, hasMarket bool) {
	builder.PrependBoolSlot(5, hasMarket, true)
}
func FacilityAddHasBlackMarket(builder *flatbuffers.Builder, hasBlackMarket bool) {
	builder.PrependBoolSlot(6, hasBlackMarket, false)
}
func FacilityAddHasRefuel(builder *flatbuffers.Builder, hasRefuel bool) {
	builder.PrependBoolSlot(7, hasRefuel, true)
}
func FacilityAddHasRepair(builder *flatbuffers.Builder, hasRepair bool) {
	builder.PrependBoolSlot(8, hasRepair, true)
}
func FacilityAddHasRearm(builder *flatbuffers.Builder, hasRearm bool) {
	builder.PrependBoolSlot(9, hasRearm, true)
}
func FacilityAddHasOutfitting(builder *flatbuffers.Builder, hasOutfitting bool) {
	builder.PrependBoolSlot(10, hasOutfitting, true)
}
func FacilityAddHasShipyard(builder *flatbuffers.Builder, hasShipyard bool) {
	builder.PrependBoolSlot(11, hasShipyard, false)
}
func FacilityAddHasDocking(builder *flatbuffers.Builder, hasDocking bool) {
	builder.PrependBoolSlot(12, hasDocking, true)
}
func FacilityAddHasCommodities(builder *flatbuffers.Builder, hasCommodities bool) {
	builder.PrependBoolSlot(13, hasCommodities, true)
}
func FacilityAddIsPlanetary(builder *flatbuffers.Builder, isPlanetary bool) {
	builder.PrependBoolSlot(14, isPlanetary, false)
}
func FacilityAddLsToStar(builder *flatbuffers.Builder, lsToStar uint32) {
	builder.PrependUint32Slot(15, lsToStar, 0)
}
func FacilityAddGovernment(builder *flatbuffers.Builder, government Government) {
	builder.PrependInt8Slot(16, int8(government), 5)
}
func FacilityAddAllegiance(builder *flatbuffers.Builder, allegiance Allegiance) {
	builder.PrependInt8Slot(17, int8(allegiance), 4)
}
func FacilityAddEdMarketId(builder *flatbuffers.Builder, edMarketId uint64) {
	builder.PrependUint64Slot(18, edMarketId, 0)
}
func FacilityEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
