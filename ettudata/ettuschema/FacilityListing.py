# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ettuschema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FacilityListing(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFacilityListing(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FacilityListing()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def FacilityListingBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x67\x6F\x6D\x64", size_prefixed=size_prefixed)

    # FacilityListing
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Identifies the facility presenting these trades.
    # FacilityListing
    def FacilityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Commodities this facility sells.
    # FacilityListing
    def Supply(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 24
            from ettuschema.Trade import Trade
            obj = Trade()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FacilityListing
    def SupplyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FacilityListing
    def SupplyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Commodities this facility buys.
    # FacilityListing
    def Demand(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 24
            from ettuschema.Trade import Trade
            obj = Trade()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FacilityListing
    def DemandLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FacilityListing
    def DemandIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def FacilityListingStart(builder): builder.StartObject(3)
def FacilityListingAddFacilityId(builder, facilityId): builder.PrependUint32Slot(0, facilityId, 0)
def FacilityListingAddSupply(builder, supply): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(supply), 0)
def FacilityListingStartSupplyVector(builder, numElems): return builder.StartVector(24, numElems, 8)
def FacilityListingAddDemand(builder, demand): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(demand), 0)
def FacilityListingStartDemandVector(builder, numElems): return builder.StartVector(24, numElems, 8)
def FacilityListingEnd(builder): return builder.EndObject()
