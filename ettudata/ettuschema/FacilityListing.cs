// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ettuschema
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FacilityListing : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FacilityListing GetRootAsFacilityListing(ByteBuffer _bb) { return GetRootAsFacilityListing(_bb, new FacilityListing()); }
  public static FacilityListing GetRootAsFacilityListing(ByteBuffer _bb, FacilityListing obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FacilityListing __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Identifies the facility presenting these trades.
  public uint FacilityId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool MutateFacilityId(uint facility_id) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutUint(o + __p.bb_pos, facility_id); return true; } else { return false; } }
  /// Commodities this facility sells.
  public ettuschema.Trade? Supply(int j) { int o = __p.__offset(6); return o != 0 ? (ettuschema.Trade?)(new ettuschema.Trade()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int SupplyLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Commodities this facility buys.
  public ettuschema.Trade? Demand(int j) { int o = __p.__offset(8); return o != 0 ? (ettuschema.Trade?)(new ettuschema.Trade()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int DemandLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ettuschema.FacilityListing> CreateFacilityListing(FlatBufferBuilder builder,
      uint facility_id = 0,
      VectorOffset supplyOffset = default(VectorOffset),
      VectorOffset demandOffset = default(VectorOffset)) {
    builder.StartTable(3);
    FacilityListing.AddDemand(builder, demandOffset);
    FacilityListing.AddSupply(builder, supplyOffset);
    FacilityListing.AddFacilityId(builder, facility_id);
    return FacilityListing.EndFacilityListing(builder);
  }

  public static void StartFacilityListing(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddFacilityId(FlatBufferBuilder builder, uint facilityId) { builder.AddUint(0, facilityId, 0); }
  public static void AddSupply(FlatBufferBuilder builder, VectorOffset supplyOffset) { builder.AddOffset(1, supplyOffset.Value, 0); }
  public static void StartSupplyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 8); }
  public static void AddDemand(FlatBufferBuilder builder, VectorOffset demandOffset) { builder.AddOffset(2, demandOffset.Value, 0); }
  public static void StartDemandVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 8); }
  public static Offset<ettuschema.FacilityListing> EndFacilityListing(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ettuschema.FacilityListing>(o);
  }

  public static VectorOffset CreateSortedVectorOfFacilityListing(FlatBufferBuilder builder, Offset<FacilityListing>[] offsets) {
    Array.Sort(offsets, (Offset<FacilityListing> o1, Offset<FacilityListing> o2) => builder.DataBuffer.GetUint(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBuffer.GetUint(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static FacilityListing? __lookup_by_key(int vectorLocation, uint key, ByteBuffer bb) {
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = bb.GetUint(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new FacilityListing().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
