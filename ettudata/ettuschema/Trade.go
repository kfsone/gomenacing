// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ettuschema

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Trade is a discrete entry for a Commodity that is or can be traded at with
/// a number of units and a value.
type Trade struct {
	_tab flatbuffers.Struct
}

func (rcv *Trade) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Trade) Table() flatbuffers.Table {
	return rcv._tab.Table
}

/// Which commodity this descrbes.
func (rcv *Trade) CommodityId() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
/// Which commodity this descrbes.
func (rcv *Trade) MutateCommodityId(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

/// How many units
func (rcv *Trade) Units() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
/// How many units
func (rcv *Trade) MutateUnits(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

/// How many credits
func (rcv *Trade) Credits() uint16 {
	return rcv._tab.GetUint16(rcv._tab.Pos + flatbuffers.UOffsetT(12))
}
/// How many credits
func (rcv *Trade) MutateCredits(n uint16) bool {
	return rcv._tab.MutateUint16(rcv._tab.Pos+flatbuffers.UOffsetT(12), n)
}

/// Unix timestamp UTC.
func (rcv *Trade) TimestampUtc() uint64 {
	return rcv._tab.GetUint64(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
/// Unix timestamp UTC.
func (rcv *Trade) MutateTimestampUtc(n uint64) bool {
	return rcv._tab.MutateUint64(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func CreateTrade(builder *flatbuffers.Builder, commodityId uint64, units uint32, credits uint16, timestampUtc uint64) flatbuffers.UOffsetT {
	builder.Prep(8, 24)
	builder.PrependUint64(timestampUtc)
	builder.Pad(2)
	builder.PrependUint16(credits)
	builder.PrependUint32(units)
	builder.PrependUint64(commodityId)
	return builder.Offset()
}
