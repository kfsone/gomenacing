# automatically generated by the FlatBuffers compiler, do not modify

# namespace: gomschema

import flatbuffers

# /// Facility represents a static, dockable entity within the game such as a station or planetary base.
# /// Instead of assigning stations their own unique IDs, we produce an fnv1a_32 hash of the system name
# /// and the station name.
class Facility(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFacility(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Facility()
        x.Init(buf, n + offset)
        return x

    # Facility
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// "{upper system name}@{facility name upper}"
    # Facility
    def FacilityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Hash of the all-upper name of the system.
    # Facility
    def SystemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Name of the facility itself.
    # Facility
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

# /// Unix timestamp UTC of last update.
    # Facility
    def TimestampUtc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

# /// Optional facility type.
    # Facility
    def FacilityType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

# /// Does it have an accessible trade market.
    # Facility
    def HasMarket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

# /// Does it have a black market.
    # Facility
    def HasBlackMarket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

# /// Can it refuel.
    # Facility
    def HasRefuel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

# /// Can it repair.
    # Facility
    def HasRepair(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

# /// Can it re-arm.
    # Facility
    def HasRearm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

# /// Does it sell/upgrade ship components.
    # Facility
    def HasOutfitting(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

# /// Can you buy ships here.
    # Facility
    def HasShipyard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

# /// Can you dock here (this is taken from EDDB and might be redundant).
    # Facility
    def HasDocking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

# /// Does the market have regular trading commodities available.
    # Facility
    def HasCommodities(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

# /// Is it on a planet.
    # Facility
    def IsPlanetary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

# /// Distance from the facility to the entry point in the system.
    # Facility
    def LsToStar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// The governance of this station. If not present, assume system's government.
    # Facility
    def Government(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 5

# /// The allegiance of this station. If not present, assume system's allegiance.
    # Facility
    def Allegiance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 4

# /// Presumably the internal ED identifier for the market here.
    # Facility
    def EdMarketId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

# /// Items available for sale/purchase.
    # Facility
    def Trades(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FacilityListing import FacilityListing
            obj = FacilityListing()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Facility
    def TradesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def FacilityStart(builder): builder.StartObject(20)
def FacilityAddFacilityId(builder, facilityId): builder.PrependUint32Slot(0, facilityId, 0)
def FacilityAddSystemId(builder, systemId): builder.PrependUint32Slot(1, systemId, 0)
def FacilityAddName(builder, name): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def FacilityAddTimestampUtc(builder, timestampUtc): builder.PrependUint64Slot(3, timestampUtc, 0)
def FacilityAddFacilityType(builder, facilityType): builder.PrependInt8Slot(4, facilityType, 0)
def FacilityAddHasMarket(builder, hasMarket): builder.PrependBoolSlot(5, hasMarket, 1)
def FacilityAddHasBlackMarket(builder, hasBlackMarket): builder.PrependBoolSlot(6, hasBlackMarket, 0)
def FacilityAddHasRefuel(builder, hasRefuel): builder.PrependBoolSlot(7, hasRefuel, 1)
def FacilityAddHasRepair(builder, hasRepair): builder.PrependBoolSlot(8, hasRepair, 1)
def FacilityAddHasRearm(builder, hasRearm): builder.PrependBoolSlot(9, hasRearm, 1)
def FacilityAddHasOutfitting(builder, hasOutfitting): builder.PrependBoolSlot(10, hasOutfitting, 1)
def FacilityAddHasShipyard(builder, hasShipyard): builder.PrependBoolSlot(11, hasShipyard, 0)
def FacilityAddHasDocking(builder, hasDocking): builder.PrependBoolSlot(12, hasDocking, 1)
def FacilityAddHasCommodities(builder, hasCommodities): builder.PrependBoolSlot(13, hasCommodities, 1)
def FacilityAddIsPlanetary(builder, isPlanetary): builder.PrependBoolSlot(14, isPlanetary, 0)
def FacilityAddLsToStar(builder, lsToStar): builder.PrependUint32Slot(15, lsToStar, 0)
def FacilityAddGovernment(builder, government): builder.PrependInt8Slot(16, government, 5)
def FacilityAddAllegiance(builder, allegiance): builder.PrependInt8Slot(17, allegiance, 4)
def FacilityAddEdMarketId(builder, edMarketId): builder.PrependUint64Slot(18, edMarketId, 0)
def FacilityAddTrades(builder, trades): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(trades), 0)
def FacilityStartTradesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FacilityEnd(builder): return builder.EndObject()
