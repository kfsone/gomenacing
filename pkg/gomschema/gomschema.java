// automatically generated by the FlatBuffers compiler, do not modify

package gomschema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

import javax.annotation.Nullable;

@SuppressWarnings("unused")

@javax.annotation.Generated(value="flatc")
/**
 * Government is an enumeration of government types reduced to a single field.
 */
public final class Government {
  private Government() { }
  public static final byte None = 0;
  public static final byte Anarchy = 1;
  public static final byte Communism = 2;
  public static final byte Confederacy = 3;
  public static final byte ooperative = 4;
  public static final byte Corporate = 5;
  public static final byte emocracy = 6;
  public static final byte Dictatorship = 7;
  public static final byte Feudal = 8;
  public static final byte Patronage = 9;
  public static final byte Prison = 10;
  public static final byte PrisonColony = 11;
  public static final byte Theocracy = 12;

  public static final String[] names = { "None", "Anarchy", "Communism", "Confederacy", "ooperative", "Corporate", "emocracy", "Dictatorship", "Feudal", "Patronage", "Prison", "PrisonColony", "Theocracy", };

  public static String name(int e) { return names[e]; }
}

/**
 * Allegiance is an enumeration of allegiance types reduced to a single field.
 */
public final class Allegiance {
  private Allegiance() { }
  public static final byte None = 0;
  public static final byte Alliance = 1;
  public static final byte Empire = 2;
  public static final byte Federation = 3;
  public static final byte Independent = 4;
  public static final byte PilotsFederation = 5;

  public static final String[] names = { "None", "Alliance", "Empire", "Federation", "Independent", "PilotsFederation", };

  public static String name(int e) { return names[e]; }
}

/**
 * Security level is system-specific and determines how aggressive law enforcement is.
 */
public final class SecurityLevel {
  private SecurityLevel() { }
  public static final byte None = 0;
  public static final byte Anarchy = 1;
  public static final byte Low = 2;
  public static final byte Medium = 3;
  public static final byte High = 4;

  public static final String[] names = { "None", "Anarchy", "Low", "Medium", "High", };

  public static String name(int e) { return names[e]; }
}

public final class FacilityType {
  private FacilityType() { }
  public static final byte None = 0;
  public static final byte CivilianOutpost = 1;
  public static final byte CommercialOutpost = 2;
  public static final byte CoriolisStarport = 3;
  public static final byte IndustrialOutpost = 4;
  public static final byte MilitaryOutpost = 5;
  public static final byte MiningOutpost = 6;
  public static final byte OcellusStarport = 7;
  public static final byte OrbisStarport = 8;
  public static final byte ScientificOutpost = 9;
  public static final byte PlanetaryOutpost = 10;
  public static final byte PlanetaryPort = 11;
  public static final byte PlanetarySettlement = 12;
  public static final byte Megaship = 13;
  public static final byte AsteroidBase = 14;
  public static final byte FleetCarrier = 15;

  public static final String[] names = { "None", "CivilianOutpost", "CommercialOutpost", "CoriolisStarport", "IndustrialOutpost", "MilitaryOutpost", "MiningOutpost", "OcellusStarport", "OrbisStarport", "ScientificOutpost", "PlanetaryOutpost", "PlanetaryPort", "PlanetarySettlement", "Megaship", "AsteroidBase", "FleetCarrier", };

  public static String name(int e) { return names[e]; }
}

public final class LandingPad {
  private LandingPad() { }
  public static final byte None = 0;
  public static final byte Small = 1;
  public static final byte Medium = 2;
  public static final byte Large = 3;

  public static final String[] names = { "None", "Small", "Medium", "Large", };

  public static String name(int e) { return names[e]; }
}

public final class CommodityType {
  private CommodityType() { }
  public static final byte None = 0;
  public static final byte Chemicals = 1;
  public static final byte ConsumerItems = 2;
  public static final byte LegalDrugs = 3;
  public static final byte Foods = 4;
  public static final byte IndustrialMaterials = 5;
  public static final byte Machinery = 6;
  public static final byte Medicines = 7;
  public static final byte Metals = 8;
  public static final byte Minerals = 9;
  public static final byte Slavery = 10;
  public static final byte Technology = 11;
  public static final byte Textiles = 12;
  public static final byte Waste = 13;
  public static final byte Weapons = 14;
  public static final byte Unknown = 15;
  public static final byte Salvage = 16;

  public static final String[] names = { "None", "Chemicals", "ConsumerItems", "LegalDrugs", "Foods", "IndustrialMaterials", "Machinery", "Medicines", "Metals", "Minerals", "Slavery", "Technology", "Textiles", "Waste", "Weapons", "Unknown", "Salvage", };

  public static String name(int e) { return names[e]; }
}

/**
 * Commodity is a type of item that can be traded within the game. At the moment,
 * the categories are small enough I decided to just enumerate them right here.
 */
public final class Commodity extends Table {
  public static Commodity getRootAsCommodity(ByteBuffer _bb) { return getRootAsCommodity(_bb, new Commodity()); }
  public static Commodity getRootAsCommodity(ByteBuffer _bb, Commodity obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Commodity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Elite Dangerous' internal ID for the commodity acts as the key.
   */
  public long commodityId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateCommodityId(long commodity_id) { int o = __offset(4); if (o != 0) { bb.putLong(o + bb_pos, commodity_id); return true; } else { return false; } }
  /**
   * Name can be localized as long as the English name is preserved for hashing.
   */
  public  @Nullable String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * What type of item is this.
   */
  public byte categoryId() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateCategoryId(byte category_id) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, category_id); return true; } else { return false; } }
  /**
   * Whether the item is known to be rare.
   */
  public boolean isRare() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsRare(boolean is_rare) { int o = __offset(10); if (o != 0) { bb.put(o + bb_pos, (byte)(is_rare ? 1 : 0)); return true; } else { return false; } }
  /**
   * Whether the item is known to be marketable.
   */
  public boolean isNonMarketable() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsNonMarketable(boolean is_non_marketable) { int o = __offset(12); if (o != 0) { bb.put(o + bb_pos, (byte)(is_non_marketable ? 1 : 0)); return true; } else { return false; } }
  /**
   * The average galactic market price in credits.
   */
  public long averageCr() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean mutateAverageCr(long average_cr) { int o = __offset(14); if (o != 0) { bb.putInt(o + bb_pos, (int)average_cr); return true; } else { return false; } }

  public static int createCommodity(FlatBufferBuilder builder,
      long commodity_id,
      int nameOffset,
      byte category_id,
      boolean is_rare,
      boolean is_non_marketable,
      long average_cr) {
    builder.startObject(6);
    Commodity.addCommodityId(builder, commodity_id);
    Commodity.addAverageCr(builder, average_cr);
    Commodity.addName(builder, nameOffset);
    Commodity.addIsNonMarketable(builder, is_non_marketable);
    Commodity.addIsRare(builder, is_rare);
    Commodity.addCategoryId(builder, category_id);
    return Commodity.endCommodity(builder);
  }

  public static void startCommodity(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addCommodityId(FlatBufferBuilder builder, long commodityId) { builder.addLong(0, commodityId, 0L); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addCategoryId(FlatBufferBuilder builder, byte categoryId) { builder.addByte(2, categoryId, 0); }
  public static void addIsRare(FlatBufferBuilder builder, boolean isRare) { builder.addBoolean(3, isRare, false); }
  public static void addIsNonMarketable(FlatBufferBuilder builder, boolean isNonMarketable) { builder.addBoolean(4, isNonMarketable, false); }
  public static void addAverageCr(FlatBufferBuilder builder, long averageCr) { builder.addInt(5, (int)averageCr, (int)0L); }
  public static int endCommodity(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    long val_1 = _bb.getLong(__offset(4, o1, _bb));
    long val_2 = _bb.getLong(__offset(4, o2, _bb));
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }

  public static Commodity __lookup_by_key(Commodity obj, int vectorLocation, long key, ByteBuffer bb) {
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      long val = bb.getLong(__offset(4, bb.capacity() - tableOffset, bb));
      int comp = val > key ? 1 : val < key ? -1 : 0;
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return (obj == null ? new Commodity() : obj).__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

/**
 * Trade is a discrete entry for a Commodity that is or can be traded at with
 * a number of units and a value.
 */
public final class Trade extends Struct {
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Trade __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Which commodity this describes.
   */
  public long commodityId() { return bb.getLong(bb_pos + 0); }
  public void mutateCommodityId(long commodity_id) { bb.putLong(bb_pos + 0, commodity_id); }
  /**
   * How many units
   */
  public long units() { return (long)bb.getInt(bb_pos + 8) & 0xFFFFFFFFL; }
  public void mutateUnits(long units) { bb.putInt(bb_pos + 8, (int)units); }
  /**
   * How many credits
   */
  public int credits() { return bb.getShort(bb_pos + 12) & 0xFFFF; }
  public void mutateCredits(int credits) { bb.putShort(bb_pos + 12, (short)credits); }
  /**
   * Unix timestamp UTC.
   */
  public long timestampUtc() { return bb.getLong(bb_pos + 16); }
  public void mutateTimestampUtc(long timestamp_utc) { bb.putLong(bb_pos + 16, timestamp_utc); }

  public static int createTrade(FlatBufferBuilder builder, long commodityId, long units, int credits, long timestampUtc) {
    builder.prep(8, 24);
    builder.putLong(timestampUtc);
    builder.pad(2);
    builder.putShort((short)credits);
    builder.putInt((int)units);
    builder.putLong(commodityId);
    return builder.offset();
  }
}

public final class FacilityListing extends Table {
  public static FacilityListing getRootAsFacilityListing(ByteBuffer _bb) { return getRootAsFacilityListing(_bb, new FacilityListing()); }
  public static FacilityListing getRootAsFacilityListing(ByteBuffer _bb, FacilityListing obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public FacilityListing __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Commodities this facility sells.
   */
  public  @Nullable Trade supply(int j) { return supply(new Trade(), j); }
  public  @Nullable Trade supply(Trade obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o) + j * 24, bb) : null; }
  public int supplyLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  /**
   * Commodities this facility buys.
   */
  public  @Nullable Trade demand(int j) { return demand(new Trade(), j); }
  public  @Nullable Trade demand(Trade obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o) + j * 24, bb) : null; }
  public int demandLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createFacilityListing(FlatBufferBuilder builder,
      int supplyOffset,
      int demandOffset) {
    builder.startObject(2);
    FacilityListing.addDemand(builder, demandOffset);
    FacilityListing.addSupply(builder, supplyOffset);
    return FacilityListing.endFacilityListing(builder);
  }

  public static void startFacilityListing(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addSupply(FlatBufferBuilder builder, int supplyOffset) { builder.addOffset(0, supplyOffset, 0); }
  public static void startSupplyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(24, numElems, 8); }
  public static void addDemand(FlatBufferBuilder builder, int demandOffset) { builder.addOffset(1, demandOffset, 0); }
  public static void startDemandVector(FlatBufferBuilder builder, int numElems) { builder.startVector(24, numElems, 8); }
  public static int endFacilityListing(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

/**
 * Facility represents a static, dockable entity within the game such as a station or planetary base.
 * Instead of assigning stations their own unique IDs, we produce an fnv1a_32 hash of the system name
 * and the station name.
 */
public final class Facility extends Table {
  public static Facility getRootAsFacility(ByteBuffer _bb) { return getRootAsFacility(_bb, new Facility()); }
  public static Facility getRootAsFacility(ByteBuffer _bb, Facility obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Facility __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * "{upper system name}@{facility name upper}"
   */
  public long facilityId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean mutateFacilityId(long facility_id) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, (int)facility_id); return true; } else { return false; } }
  /**
   * Hash of the all-upper name of the system.
   */
  public long systemId() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean mutateSystemId(long system_id) { int o = __offset(6); if (o != 0) { bb.putInt(o + bb_pos, (int)system_id); return true; } else { return false; } }
  /**
   * Name of the facility itself.
   */
  public  @Nullable String name() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unix timestamp UTC of last update.
   */
  public long timestampUtc() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateTimestampUtc(long timestamp_utc) { int o = __offset(10); if (o != 0) { bb.putLong(o + bb_pos, timestamp_utc); return true; } else { return false; } }
  /**
   * Optional facility type.
   */
  public byte facilityType() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateFacilityType(byte facility_type) { int o = __offset(12); if (o != 0) { bb.put(o + bb_pos, facility_type); return true; } else { return false; } }
  /**
   * Does it have an accessible trade market.
   */
  public boolean hasMarket() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean mutateHasMarket(boolean has_market) { int o = __offset(14); if (o != 0) { bb.put(o + bb_pos, (byte)(has_market ? 1 : 0)); return true; } else { return false; } }
  /**
   * Does it have a black market.
   */
  public boolean hasBlackMarket() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateHasBlackMarket(boolean has_black_market) { int o = __offset(16); if (o != 0) { bb.put(o + bb_pos, (byte)(has_black_market ? 1 : 0)); return true; } else { return false; } }
  /**
   * Can it refuel.
   */
  public boolean hasRefuel() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean mutateHasRefuel(boolean has_refuel) { int o = __offset(18); if (o != 0) { bb.put(o + bb_pos, (byte)(has_refuel ? 1 : 0)); return true; } else { return false; } }
  /**
   * Can it repair.
   */
  public boolean hasRepair() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean mutateHasRepair(boolean has_repair) { int o = __offset(20); if (o != 0) { bb.put(o + bb_pos, (byte)(has_repair ? 1 : 0)); return true; } else { return false; } }
  /**
   * Can it re-arm.
   */
  public boolean hasRearm() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean mutateHasRearm(boolean has_rearm) { int o = __offset(22); if (o != 0) { bb.put(o + bb_pos, (byte)(has_rearm ? 1 : 0)); return true; } else { return false; } }
  /**
   * Does it sell/upgrade ship components.
   */
  public boolean hasOutfitting() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean mutateHasOutfitting(boolean has_outfitting) { int o = __offset(24); if (o != 0) { bb.put(o + bb_pos, (byte)(has_outfitting ? 1 : 0)); return true; } else { return false; } }
  /**
   * Can you buy ships here.
   */
  public boolean hasShipyard() { int o = __offset(26); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateHasShipyard(boolean has_shipyard) { int o = __offset(26); if (o != 0) { bb.put(o + bb_pos, (byte)(has_shipyard ? 1 : 0)); return true; } else { return false; } }
  /**
   * Can you dock here (this is taken from EDDB and might be redundant).
   */
  public boolean hasDocking() { int o = __offset(28); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean mutateHasDocking(boolean has_docking) { int o = __offset(28); if (o != 0) { bb.put(o + bb_pos, (byte)(has_docking ? 1 : 0)); return true; } else { return false; } }
  /**
   * Does the market have regular trading commodities available.
   */
  public boolean hasCommodities() { int o = __offset(30); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean mutateHasCommodities(boolean has_commodities) { int o = __offset(30); if (o != 0) { bb.put(o + bb_pos, (byte)(has_commodities ? 1 : 0)); return true; } else { return false; } }
  /**
   * Is it on a planet.
   */
  public boolean isPlanetary() { int o = __offset(32); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsPlanetary(boolean is_planetary) { int o = __offset(32); if (o != 0) { bb.put(o + bb_pos, (byte)(is_planetary ? 1 : 0)); return true; } else { return false; } }
  /**
   * Distance from the facility to the entry point in the system.
   */
  public long lsToStar() { int o = __offset(34); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean mutateLsToStar(long ls_to_star) { int o = __offset(34); if (o != 0) { bb.putInt(o + bb_pos, (int)ls_to_star); return true; } else { return false; } }
  /**
   * The governance of this station. If not present, assume system's government.
   */
  public byte government() { int o = __offset(36); return o != 0 ? bb.get(o + bb_pos) : 5; }
  public boolean mutateGovernment(byte government) { int o = __offset(36); if (o != 0) { bb.put(o + bb_pos, government); return true; } else { return false; } }
  /**
   * The allegiance of this station. If not present, assume system's allegiance.
   */
  public byte allegiance() { int o = __offset(38); return o != 0 ? bb.get(o + bb_pos) : 4; }
  public boolean mutateAllegiance(byte allegiance) { int o = __offset(38); if (o != 0) { bb.put(o + bb_pos, allegiance); return true; } else { return false; } }
  /**
   * Presumably the internal ED identifier for the market here.
   */
  public long edMarketId() { int o = __offset(40); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateEdMarketId(long ed_market_id) { int o = __offset(40); if (o != 0) { bb.putLong(o + bb_pos, ed_market_id); return true; } else { return false; } }
  /**
   * Items available for sale/purchase.
   */
  public  @Nullable FacilityListing trades(int j) { return trades(new FacilityListing(), j); }
  public  @Nullable FacilityListing trades(FacilityListing obj, int j) { int o = __offset(42); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int tradesLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }

  public static int createFacility(FlatBufferBuilder builder,
      long facility_id,
      long system_id,
      int nameOffset,
      long timestamp_utc,
      byte facility_type,
      boolean has_market,
      boolean has_black_market,
      boolean has_refuel,
      boolean has_repair,
      boolean has_rearm,
      boolean has_outfitting,
      boolean has_shipyard,
      boolean has_docking,
      boolean has_commodities,
      boolean is_planetary,
      long ls_to_star,
      byte government,
      byte allegiance,
      long ed_market_id,
      int tradesOffset) {
    builder.startObject(20);
    Facility.addEdMarketId(builder, ed_market_id);
    Facility.addTimestampUtc(builder, timestamp_utc);
    Facility.addTrades(builder, tradesOffset);
    Facility.addLsToStar(builder, ls_to_star);
    Facility.addName(builder, nameOffset);
    Facility.addSystemId(builder, system_id);
    Facility.addFacilityId(builder, facility_id);
    Facility.addAllegiance(builder, allegiance);
    Facility.addGovernment(builder, government);
    Facility.addIsPlanetary(builder, is_planetary);
    Facility.addHasCommodities(builder, has_commodities);
    Facility.addHasDocking(builder, has_docking);
    Facility.addHasShipyard(builder, has_shipyard);
    Facility.addHasOutfitting(builder, has_outfitting);
    Facility.addHasRearm(builder, has_rearm);
    Facility.addHasRepair(builder, has_repair);
    Facility.addHasRefuel(builder, has_refuel);
    Facility.addHasBlackMarket(builder, has_black_market);
    Facility.addHasMarket(builder, has_market);
    Facility.addFacilityType(builder, facility_type);
    return Facility.endFacility(builder);
  }

  public static void startFacility(FlatBufferBuilder builder) { builder.startObject(20); }
  public static void addFacilityId(FlatBufferBuilder builder, long facilityId) { builder.addInt(0, (int)facilityId, (int)0L); }
  public static void addSystemId(FlatBufferBuilder builder, long systemId) { builder.addInt(1, (int)systemId, (int)0L); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(2, nameOffset, 0); }
  public static void addTimestampUtc(FlatBufferBuilder builder, long timestampUtc) { builder.addLong(3, timestampUtc, 0L); }
  public static void addFacilityType(FlatBufferBuilder builder, byte facilityType) { builder.addByte(4, facilityType, 0); }
  public static void addHasMarket(FlatBufferBuilder builder, boolean hasMarket) { builder.addBoolean(5, hasMarket, true); }
  public static void addHasBlackMarket(FlatBufferBuilder builder, boolean hasBlackMarket) { builder.addBoolean(6, hasBlackMarket, false); }
  public static void addHasRefuel(FlatBufferBuilder builder, boolean hasRefuel) { builder.addBoolean(7, hasRefuel, true); }
  public static void addHasRepair(FlatBufferBuilder builder, boolean hasRepair) { builder.addBoolean(8, hasRepair, true); }
  public static void addHasRearm(FlatBufferBuilder builder, boolean hasRearm) { builder.addBoolean(9, hasRearm, true); }
  public static void addHasOutfitting(FlatBufferBuilder builder, boolean hasOutfitting) { builder.addBoolean(10, hasOutfitting, true); }
  public static void addHasShipyard(FlatBufferBuilder builder, boolean hasShipyard) { builder.addBoolean(11, hasShipyard, false); }
  public static void addHasDocking(FlatBufferBuilder builder, boolean hasDocking) { builder.addBoolean(12, hasDocking, true); }
  public static void addHasCommodities(FlatBufferBuilder builder, boolean hasCommodities) { builder.addBoolean(13, hasCommodities, true); }
  public static void addIsPlanetary(FlatBufferBuilder builder, boolean isPlanetary) { builder.addBoolean(14, isPlanetary, false); }
  public static void addLsToStar(FlatBufferBuilder builder, long lsToStar) { builder.addInt(15, (int)lsToStar, (int)0L); }
  public static void addGovernment(FlatBufferBuilder builder, byte government) { builder.addByte(16, government, 5); }
  public static void addAllegiance(FlatBufferBuilder builder, byte allegiance) { builder.addByte(17, allegiance, 4); }
  public static void addEdMarketId(FlatBufferBuilder builder, long edMarketId) { builder.addLong(18, edMarketId, 0L); }
  public static void addTrades(FlatBufferBuilder builder, int tradesOffset) { builder.addOffset(19, tradesOffset, 0); }
  public static int createTradesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTradesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFacility(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    long val_1 = (long)_bb.getInt(__offset(4, o1, _bb)) & 0xFFFFFFFFL;
    long val_2 = (long)_bb.getInt(__offset(4, o2, _bb)) & 0xFFFFFFFFL;
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }

  public static Facility __lookup_by_key(Facility obj, int vectorLocation, long key, ByteBuffer bb) {
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      long val = (long)bb.getInt(__offset(4, bb.capacity() - tableOffset, bb)) & 0xFFFFFFFFL;
      int comp = val > key ? 1 : val < key ? -1 : 0;
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return (obj == null ? new Facility() : obj).__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

/**
 * Galactic coordinate for a system.
 */
public final class Coordinate extends Struct {
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Coordinate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double x() { return bb.getDouble(bb_pos + 0); }
  public void mutateX(double x) { bb.putDouble(bb_pos + 0, x); }
  public double y() { return bb.getDouble(bb_pos + 8); }
  public void mutateY(double y) { bb.putDouble(bb_pos + 8, y); }
  public double z() { return bb.getDouble(bb_pos + 16); }
  public void mutateZ(double z) { bb.putDouble(bb_pos + 16, z); }

  public static int createCoordinate(FlatBufferBuilder builder, double x, double y, double z) {
    builder.prep(8, 24);
    builder.putDouble(z);
    builder.putDouble(y);
    builder.putDouble(x);
    return builder.offset();
  }
}

/**
 * System corresponds to an individual Elite-Dangerous star system, akin to a map.
 */
public final class System extends Table {
  public static System getRootAsSystem(ByteBuffer _bb) { return getRootAsSystem(_bb, new System()); }
  public static System getRootAsSystem(ByteBuffer _bb, System obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public System __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * System ID is it's upper-cased name hashed via fnv1a.
   */
  public long systemId() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean mutateSystemId(long system_id) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, (int)system_id); return true; } else { return false; } }
  /**
   * Unique name of the system.
   */
  public  @Nullable String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Position in the galaxy.
   */
  public  @Nullable Coordinate position() { return position(new Coordinate()); }
  public  @Nullable Coordinate position(Coordinate obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  /**
   * Timestamp of the last update to this entry UTC.
   */
  public long timestampUtc() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateTimestampUtc(long timestamp_utc) { int o = __offset(10); if (o != 0) { bb.putLong(o + bb_pos, timestamp_utc); return true; } else { return false; } }
  public  @Nullable String power() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer powerAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer powerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Whether anyone lives here.
   */
  public boolean populated() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : true; }
  public boolean mutatePopulated(boolean populated) { int o = __offset(14); if (o != 0) { bb.put(o + bb_pos, (byte)(populated ? 1 : 0)); return true; } else { return false; } }
  /**
   * Whether a permit is required to enter the systme.
   */
  public boolean needsPermit() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateNeedsPermit(boolean needs_permit) { int o = __offset(16); if (o != 0) { bb.put(o + bb_pos, (byte)(needs_permit ? 1 : 0)); return true; } else { return false; } }
  /**
   * Law-Enforcement level of the system.
   */
  public byte security() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) : 3; }
  public boolean mutateSecurity(byte security) { int o = __offset(18); if (o != 0) { bb.put(o + bb_pos, security); return true; } else { return false; } }
  /**
   * What is the government for the system.
   */
  public byte governmentId() { int o = __offset(20); return o != 0 ? bb.get(o + bb_pos) : 5; }
  public boolean mutateGovernmentId(byte government_id) { int o = __offset(20); if (o != 0) { bb.put(o + bb_pos, government_id); return true; } else { return false; } }
  /**
   * Which faction is the system allied to.
   */
  public byte allegianceId() { int o = __offset(22); return o != 0 ? bb.get(o + bb_pos) : 4; }
  public boolean mutateAllegianceId(byte allegiance_id) { int o = __offset(22); if (o != 0) { bb.put(o + bb_pos, allegiance_id); return true; } else { return false; } }
  /**
   * Guess: Elite Dangerous Internal ID
   */
  public long edAddress() { int o = __offset(24); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateEdAddress(long ed_address) { int o = __offset(24); if (o != 0) { bb.putLong(o + bb_pos, ed_address); return true; } else { return false; } }
  /**
   * Facilities in this system.
   */
  public  @Nullable Facility facilities(int j) { return facilities(new Facility(), j); }
  public  @Nullable Facility facilities(Facility obj, int j) { int o = __offset(26); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int facilitiesLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public Facility facilitiesByKey(long key) { int o = __offset(26); return o != 0 ? Facility.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public Facility facilitiesByKey(Facility obj, long key) { int o = __offset(26); return o != 0 ? Facility.__lookup_by_key(obj, __vector(o), key, bb) : null; }

  public static void startSystem(FlatBufferBuilder builder) { builder.startObject(12); }
  public static void addSystemId(FlatBufferBuilder builder, long systemId) { builder.addInt(0, (int)systemId, (int)0L); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addPosition(FlatBufferBuilder builder, int positionOffset) { builder.addStruct(2, positionOffset, 0); }
  public static void addTimestampUtc(FlatBufferBuilder builder, long timestampUtc) { builder.addLong(3, timestampUtc, 0L); }
  public static void addPower(FlatBufferBuilder builder, int powerOffset) { builder.addOffset(4, powerOffset, 0); }
  public static void addPopulated(FlatBufferBuilder builder, boolean populated) { builder.addBoolean(5, populated, true); }
  public static void addNeedsPermit(FlatBufferBuilder builder, boolean needsPermit) { builder.addBoolean(6, needsPermit, false); }
  public static void addSecurity(FlatBufferBuilder builder, byte security) { builder.addByte(7, security, 3); }
  public static void addGovernmentId(FlatBufferBuilder builder, byte governmentId) { builder.addByte(8, governmentId, 5); }
  public static void addAllegianceId(FlatBufferBuilder builder, byte allegianceId) { builder.addByte(9, allegianceId, 4); }
  public static void addEdAddress(FlatBufferBuilder builder, long edAddress) { builder.addLong(10, edAddress, 0L); }
  public static void addFacilities(FlatBufferBuilder builder, int facilitiesOffset) { builder.addOffset(11, facilitiesOffset, 0); }
  public static int createFacilitiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFacilitiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSystem(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) {
    long val_1 = (long)_bb.getInt(__offset(4, o1, _bb)) & 0xFFFFFFFFL;
    long val_2 = (long)_bb.getInt(__offset(4, o2, _bb)) & 0xFFFFFFFFL;
    return val_1 > val_2 ? 1 : val_1 < val_2 ? -1 : 0;
  }

  public static System __lookup_by_key(System obj, int vectorLocation, long key, ByteBuffer bb) {
    int span = bb.getInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      long val = (long)bb.getInt(__offset(4, bb.capacity() - tableOffset, bb)) & 0xFFFFFFFFL;
      int comp = val > key ? 1 : val < key ? -1 : 0;
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return (obj == null ? new System() : obj).__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

/**
 * Encapsulation of all the data.
 */
public final class Galaxy extends Table {
  public static Galaxy getRootAsGalaxy(ByteBuffer _bb) { return getRootAsGalaxy(_bb, new Galaxy()); }
  public static Galaxy getRootAsGalaxy(ByteBuffer _bb, Galaxy obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean GalaxyBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "gomd"); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Galaxy __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Semantically-versioned schema id.
   */
  public  @Nullable String schemaVersion() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer schemaVersionAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer schemaVersionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Human-friendly description of what is enclosed, e.g "import from source X" or
   * "complete local database". Entirely descriptive.
   */
  public  @Nullable String description() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Human-friendly attributition, if relevant.
   */
  public  @Nullable String attribution() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer attributionAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer attributionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * UTC Unix time of generation.
   */
  public long timestampUtc() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateTimestampUtc(long timestamp_utc) { int o = __offset(10); if (o != 0) { bb.putLong(o + bb_pos, timestamp_utc); return true; } else { return false; } }
  /**
   * Items recognized by this data.
   */
  public  @Nullable Commodity commodities(int j) { return commodities(new Commodity(), j); }
  public  @Nullable Commodity commodities(Commodity obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int commoditiesLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public Commodity commoditiesByKey(long key) { int o = __offset(12); return o != 0 ? Commodity.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public Commodity commoditiesByKey(Commodity obj, long key) { int o = __offset(12); return o != 0 ? Commodity.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  /**
   * Systems recognized by this data (presence of facilities optional).
   */
  public  @Nullable System systems(int j) { return systems(new System(), j); }
  public  @Nullable System systems(System obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int systemsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public System systemsByKey(long key) { int o = __offset(14); return o != 0 ? System.__lookup_by_key(null, __vector(o), key, bb) : null; }
  public System systemsByKey(System obj, long key) { int o = __offset(14); return o != 0 ? System.__lookup_by_key(obj, __vector(o), key, bb) : null; }
  /**
   * Fields reserved for any user-specific notes.
   */
  public  @Nullable String userData() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer userDataAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer userDataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * 3rd-party application values that prefer .ini format.
   */
  public  @Nullable String iniData() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer iniDataAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer iniDataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * 3rd-party application values that prefer .json format.
   */
  public  @Nullable String jsonData() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer jsonDataAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer jsonDataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * 3rd-party application values that prefer .yaml because they hate life.
   */
  public  @Nullable String yamlData() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer yamlDataAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer yamlDataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }

  public static int createGalaxy(FlatBufferBuilder builder,
      int schema_versionOffset,
      int descriptionOffset,
      int attributionOffset,
      long timestamp_utc,
      int commoditiesOffset,
      int systemsOffset,
      int user_dataOffset,
      int ini_dataOffset,
      int json_dataOffset,
      int yaml_dataOffset) {
    builder.startObject(10);
    Galaxy.addTimestampUtc(builder, timestamp_utc);
    Galaxy.addYamlData(builder, yaml_dataOffset);
    Galaxy.addJsonData(builder, json_dataOffset);
    Galaxy.addIniData(builder, ini_dataOffset);
    Galaxy.addUserData(builder, user_dataOffset);
    Galaxy.addSystems(builder, systemsOffset);
    Galaxy.addCommodities(builder, commoditiesOffset);
    Galaxy.addAttribution(builder, attributionOffset);
    Galaxy.addDescription(builder, descriptionOffset);
    Galaxy.addSchemaVersion(builder, schema_versionOffset);
    return Galaxy.endGalaxy(builder);
  }

  public static void startGalaxy(FlatBufferBuilder builder) { builder.startObject(10); }
  public static void addSchemaVersion(FlatBufferBuilder builder, int schemaVersionOffset) { builder.addOffset(0, schemaVersionOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(1, descriptionOffset, 0); }
  public static void addAttribution(FlatBufferBuilder builder, int attributionOffset) { builder.addOffset(2, attributionOffset, 0); }
  public static void addTimestampUtc(FlatBufferBuilder builder, long timestampUtc) { builder.addLong(3, timestampUtc, 0L); }
  public static void addCommodities(FlatBufferBuilder builder, int commoditiesOffset) { builder.addOffset(4, commoditiesOffset, 0); }
  public static int createCommoditiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCommoditiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSystems(FlatBufferBuilder builder, int systemsOffset) { builder.addOffset(5, systemsOffset, 0); }
  public static int createSystemsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSystemsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUserData(FlatBufferBuilder builder, int userDataOffset) { builder.addOffset(6, userDataOffset, 0); }
  public static void addIniData(FlatBufferBuilder builder, int iniDataOffset) { builder.addOffset(7, iniDataOffset, 0); }
  public static void addJsonData(FlatBufferBuilder builder, int jsonDataOffset) { builder.addOffset(8, jsonDataOffset, 0); }
  public static void addYamlData(FlatBufferBuilder builder, int yamlDataOffset) { builder.addOffset(9, yamlDataOffset, 0); }
  public static int endGalaxy(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishGalaxyBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "gomd"); }
  public static void finishSizePrefixedGalaxyBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "gomd"); }
}

