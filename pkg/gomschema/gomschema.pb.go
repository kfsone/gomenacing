// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: gomschema.proto

package gomschema

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

/// GovernmentType enumerates the different governments available in-game.
type GovernmentType int32

const (
	GovernmentType_GovNone         GovernmentType = 0
	GovernmentType_GovAnarchy      GovernmentType = 1
	GovernmentType_GovCommunism    GovernmentType = 2
	GovernmentType_GovConfederacy  GovernmentType = 3
	GovernmentType_GovCooperative  GovernmentType = 4
	GovernmentType_GovCorporate    GovernmentType = 5
	GovernmentType_GovDemocracy    GovernmentType = 6
	GovernmentType_GovDictatorship GovernmentType = 7
	GovernmentType_GovFeudal       GovernmentType = 8
	GovernmentType_GovPatronage    GovernmentType = 9
	GovernmentType_GovPrison       GovernmentType = 10
	GovernmentType_GovPrisonColony GovernmentType = 11
	GovernmentType_GovTheocracy    GovernmentType = 12
)

// Enum value maps for GovernmentType.
var (
	GovernmentType_name = map[int32]string{
		0:  "GovNone",
		1:  "GovAnarchy",
		2:  "GovCommunism",
		3:  "GovConfederacy",
		4:  "GovCooperative",
		5:  "GovCorporate",
		6:  "GovDemocracy",
		7:  "GovDictatorship",
		8:  "GovFeudal",
		9:  "GovPatronage",
		10: "GovPrison",
		11: "GovPrisonColony",
		12: "GovTheocracy",
	}
	GovernmentType_value = map[string]int32{
		"GovNone":         0,
		"GovAnarchy":      1,
		"GovCommunism":    2,
		"GovConfederacy":  3,
		"GovCooperative":  4,
		"GovCorporate":    5,
		"GovDemocracy":    6,
		"GovDictatorship": 7,
		"GovFeudal":       8,
		"GovPatronage":    9,
		"GovPrison":       10,
		"GovPrisonColony": 11,
		"GovTheocracy":    12,
	}
)

func (x GovernmentType) Enum() *GovernmentType {
	p := new(GovernmentType)
	*p = x
	return p
}

func (x GovernmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GovernmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_gomschema_proto_enumTypes[0].Descriptor()
}

func (GovernmentType) Type() protoreflect.EnumType {
	return &file_gomschema_proto_enumTypes[0]
}

func (x GovernmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GovernmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GovernmentType(num)
	return nil
}

// Deprecated: Use GovernmentType.Descriptor instead.
func (GovernmentType) EnumDescriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{0}
}

/// AllegianceType enumerates the allegiances that systems/stations can have.
type AllegianceType int32

const (
	AllegianceType_AllegNone             AllegianceType = 0
	AllegianceType_AllegAlliance         AllegianceType = 1
	AllegianceType_AllegEmpire           AllegianceType = 2
	AllegianceType_AllegFederation       AllegianceType = 3
	AllegianceType_AllegIndependent      AllegianceType = 4
	AllegianceType_AllegPilotsFederation AllegianceType = 5
)

// Enum value maps for AllegianceType.
var (
	AllegianceType_name = map[int32]string{
		0: "AllegNone",
		1: "AllegAlliance",
		2: "AllegEmpire",
		3: "AllegFederation",
		4: "AllegIndependent",
		5: "AllegPilotsFederation",
	}
	AllegianceType_value = map[string]int32{
		"AllegNone":             0,
		"AllegAlliance":         1,
		"AllegEmpire":           2,
		"AllegFederation":       3,
		"AllegIndependent":      4,
		"AllegPilotsFederation": 5,
	}
)

func (x AllegianceType) Enum() *AllegianceType {
	p := new(AllegianceType)
	*p = x
	return p
}

func (x AllegianceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllegianceType) Descriptor() protoreflect.EnumDescriptor {
	return file_gomschema_proto_enumTypes[1].Descriptor()
}

func (AllegianceType) Type() protoreflect.EnumType {
	return &file_gomschema_proto_enumTypes[1]
}

func (x AllegianceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AllegianceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AllegianceType(num)
	return nil
}

// Deprecated: Use AllegianceType.Descriptor instead.
func (AllegianceType) EnumDescriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{1}
}

/// SecurityLevel enumerates the law enforcement strength in a system.
type SecurityLevel int32

const (
	SecurityLevel_SecurityNone    SecurityLevel = 0
	SecurityLevel_SecurityAnarchy SecurityLevel = 1
	SecurityLevel_SecurityLow     SecurityLevel = 2
	SecurityLevel_SecurityMedium  SecurityLevel = 3
	SecurityLevel_SecurityHigh    SecurityLevel = 4
)

// Enum value maps for SecurityLevel.
var (
	SecurityLevel_name = map[int32]string{
		0: "SecurityNone",
		1: "SecurityAnarchy",
		2: "SecurityLow",
		3: "SecurityMedium",
		4: "SecurityHigh",
	}
	SecurityLevel_value = map[string]int32{
		"SecurityNone":    0,
		"SecurityAnarchy": 1,
		"SecurityLow":     2,
		"SecurityMedium":  3,
		"SecurityHigh":    4,
	}
)

func (x SecurityLevel) Enum() *SecurityLevel {
	p := new(SecurityLevel)
	*p = x
	return p
}

func (x SecurityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_gomschema_proto_enumTypes[2].Descriptor()
}

func (SecurityLevel) Type() protoreflect.EnumType {
	return &file_gomschema_proto_enumTypes[2]
}

func (x SecurityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SecurityLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SecurityLevel(num)
	return nil
}

// Deprecated: Use SecurityLevel.Descriptor instead.
func (SecurityLevel) EnumDescriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{2}
}

/// Enumeration of facility kinds.
type FacilityType int32

const (
	FacilityType_FTNone                FacilityType = 0
	FacilityType_FTCivilianOutpost     FacilityType = 1
	FacilityType_FTCommercialOutpost   FacilityType = 2
	FacilityType_FTCoriolisStarport    FacilityType = 3
	FacilityType_FTIndustrialOutpost   FacilityType = 4
	FacilityType_FTMilitaryOutpost     FacilityType = 5
	FacilityType_FTMiningOutpost       FacilityType = 6
	FacilityType_FTOcellusStarport     FacilityType = 7
	FacilityType_FTOrbisStarport       FacilityType = 8
	FacilityType_FTScientificOutpost   FacilityType = 9
	FacilityType_FTPlanetaryOutpost    FacilityType = 10
	FacilityType_FTPlanetaryPort       FacilityType = 11
	FacilityType_FTPlanetarySettlement FacilityType = 12
	FacilityType_FTMegaship            FacilityType = 13
	FacilityType_FTAsteroidBase        FacilityType = 14
	FacilityType_FTFleetCarrier        FacilityType = 15
)

// Enum value maps for FacilityType.
var (
	FacilityType_name = map[int32]string{
		0:  "FTNone",
		1:  "FTCivilianOutpost",
		2:  "FTCommercialOutpost",
		3:  "FTCoriolisStarport",
		4:  "FTIndustrialOutpost",
		5:  "FTMilitaryOutpost",
		6:  "FTMiningOutpost",
		7:  "FTOcellusStarport",
		8:  "FTOrbisStarport",
		9:  "FTScientificOutpost",
		10: "FTPlanetaryOutpost",
		11: "FTPlanetaryPort",
		12: "FTPlanetarySettlement",
		13: "FTMegaship",
		14: "FTAsteroidBase",
		15: "FTFleetCarrier",
	}
	FacilityType_value = map[string]int32{
		"FTNone":                0,
		"FTCivilianOutpost":     1,
		"FTCommercialOutpost":   2,
		"FTCoriolisStarport":    3,
		"FTIndustrialOutpost":   4,
		"FTMilitaryOutpost":     5,
		"FTMiningOutpost":       6,
		"FTOcellusStarport":     7,
		"FTOrbisStarport":       8,
		"FTScientificOutpost":   9,
		"FTPlanetaryOutpost":    10,
		"FTPlanetaryPort":       11,
		"FTPlanetarySettlement": 12,
		"FTMegaship":            13,
		"FTAsteroidBase":        14,
		"FTFleetCarrier":        15,
	}
)

func (x FacilityType) Enum() *FacilityType {
	p := new(FacilityType)
	*p = x
	return p
}

func (x FacilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_gomschema_proto_enumTypes[3].Descriptor()
}

func (FacilityType) Type() protoreflect.EnumType {
	return &file_gomschema_proto_enumTypes[3]
}

func (x FacilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FacilityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FacilityType(num)
	return nil
}

// Deprecated: Use FacilityType.Descriptor instead.
func (FacilityType) EnumDescriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{3}
}

/// Enumeration of pad sizes.
type PadSize int32

const (
	PadSize_PadNone   PadSize = 0
	PadSize_PadSmall  PadSize = 1
	PadSize_PadMedium PadSize = 2
	PadSize_PadLarge  PadSize = 3
)

// Enum value maps for PadSize.
var (
	PadSize_name = map[int32]string{
		0: "PadNone",
		1: "PadSmall",
		2: "PadMedium",
		3: "PadLarge",
	}
	PadSize_value = map[string]int32{
		"PadNone":   0,
		"PadSmall":  1,
		"PadMedium": 2,
		"PadLarge":  3,
	}
)

func (x PadSize) Enum() *PadSize {
	p := new(PadSize)
	*p = x
	return p
}

func (x PadSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PadSize) Descriptor() protoreflect.EnumDescriptor {
	return file_gomschema_proto_enumTypes[4].Descriptor()
}

func (PadSize) Type() protoreflect.EnumType {
	return &file_gomschema_proto_enumTypes[4]
}

func (x PadSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PadSize) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PadSize(num)
	return nil
}

// Deprecated: Use PadSize.Descriptor instead.
func (PadSize) EnumDescriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{4}
}

type Header_Class int32

const (
	Header_CCategory Header_Class = 0
	Header_CSystem   Header_Class = 1
	Header_CFacility Header_Class = 2
	Header_CListing  Header_Class = 3
)

// Enum value maps for Header_Class.
var (
	Header_Class_name = map[int32]string{
		0: "CCategory",
		1: "CSystem",
		2: "CFacility",
		3: "CListing",
	}
	Header_Class_value = map[string]int32{
		"CCategory": 0,
		"CSystem":   1,
		"CFacility": 2,
		"CListing":  3,
	}
)

func (x Header_Class) Enum() *Header_Class {
	p := new(Header_Class)
	*p = x
	return p
}

func (x Header_Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Header_Class) Descriptor() protoreflect.EnumDescriptor {
	return file_gomschema_proto_enumTypes[5].Descriptor()
}

func (Header_Class) Type() protoreflect.EnumType {
	return &file_gomschema_proto_enumTypes[5]
}

func (x Header_Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Header_Class) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Header_Class(num)
	return nil
}

// Deprecated: Use Header_Class.Descriptor instead.
func (Header_Class) EnumDescriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{0, 0}
}

type Commodity_CommodityCategory int32

const (
	Commodity_CatNone                Commodity_CommodityCategory = 0
	Commodity_CatChemicals           Commodity_CommodityCategory = 1
	Commodity_CatConsumerItems       Commodity_CommodityCategory = 2
	Commodity_CatLegalDrugs          Commodity_CommodityCategory = 3
	Commodity_CatFoods               Commodity_CommodityCategory = 4
	Commodity_CatIndustrialMaterials Commodity_CommodityCategory = 5
	Commodity_CatMachinery           Commodity_CommodityCategory = 6
	Commodity_CatMedicines           Commodity_CommodityCategory = 7
	Commodity_CatMetals              Commodity_CommodityCategory = 8
	Commodity_CatMinerals            Commodity_CommodityCategory = 9
	Commodity_CatSlavery             Commodity_CommodityCategory = 10
	Commodity_CatTechnology          Commodity_CommodityCategory = 11
	Commodity_CatTextiles            Commodity_CommodityCategory = 12
	Commodity_CatWaste               Commodity_CommodityCategory = 13
	Commodity_CatWeapons             Commodity_CommodityCategory = 14
	Commodity_CatUnknown             Commodity_CommodityCategory = 15
	Commodity_CatSalvage             Commodity_CommodityCategory = 16
)

// Enum value maps for Commodity_CommodityCategory.
var (
	Commodity_CommodityCategory_name = map[int32]string{
		0:  "CatNone",
		1:  "CatChemicals",
		2:  "CatConsumerItems",
		3:  "CatLegalDrugs",
		4:  "CatFoods",
		5:  "CatIndustrialMaterials",
		6:  "CatMachinery",
		7:  "CatMedicines",
		8:  "CatMetals",
		9:  "CatMinerals",
		10: "CatSlavery",
		11: "CatTechnology",
		12: "CatTextiles",
		13: "CatWaste",
		14: "CatWeapons",
		15: "CatUnknown",
		16: "CatSalvage",
	}
	Commodity_CommodityCategory_value = map[string]int32{
		"CatNone":                0,
		"CatChemicals":           1,
		"CatConsumerItems":       2,
		"CatLegalDrugs":          3,
		"CatFoods":               4,
		"CatIndustrialMaterials": 5,
		"CatMachinery":           6,
		"CatMedicines":           7,
		"CatMetals":              8,
		"CatMinerals":            9,
		"CatSlavery":             10,
		"CatTechnology":          11,
		"CatTextiles":            12,
		"CatWaste":               13,
		"CatWeapons":             14,
		"CatUnknown":             15,
		"CatSalvage":             16,
	}
)

func (x Commodity_CommodityCategory) Enum() *Commodity_CommodityCategory {
	p := new(Commodity_CommodityCategory)
	*p = x
	return p
}

func (x Commodity_CommodityCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Commodity_CommodityCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_gomschema_proto_enumTypes[6].Descriptor()
}

func (Commodity_CommodityCategory) Type() protoreflect.EnumType {
	return &file_gomschema_proto_enumTypes[6]
}

func (x Commodity_CommodityCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Commodity_CommodityCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Commodity_CommodityCategory(num)
	return nil
}

// Deprecated: Use Commodity_CommodityCategory.Descriptor instead.
func (Commodity_CommodityCategory) EnumDescriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{1, 0}
}

/// Header tracks the size of a following protobuf message, or 0 for the end of a sequence.
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Identify the type of objects that follow.
	Class *Header_Class `protobuf:"varint,1,req,name=class,enum=gomschema.Header_Class" json:"class,omitempty"`
	/// Enumerates the number and size of messages to follow.
	Sizes []uint32 `protobuf:"varint,2,rep,packed,name=sizes" json:"sizes,omitempty"`
	/// Any application-specific, user-purposed data. Key identifies the purpose, value is the data.
	Userdata map[string][]byte `protobuf:"bytes,3,rep,name=userdata" json:"userdata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gomschema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_gomschema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetClass() Header_Class {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return Header_CCategory
}

func (x *Header) GetSizes() []uint32 {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *Header) GetUserdata() map[string][]byte {
	if x != nil {
		return x.Userdata
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
/// Commodity is a type of item that can be traded within the game. At the moment,
/// the categories are small enough I decided to just enumerate them right here.
type Commodity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Elite Dangerous' internal ID for the commodity acts as the key.
	CommodityId *uint64 `protobuf:"varint,1,req,name=commodity_id,json=commodityId" json:"commodity_id,omitempty"`
	/// Name can be localized as long as the English name is preserved for hashing.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	/// Timestamp of when this was captured.
	TimestampUtc *uint64 `protobuf:"varint,3,opt,name=timestamp_utc,json=timestampUtc,def=0" json:"timestamp_utc,omitempty"`
	/// What type of item is this.
	CategoryId *Commodity_CommodityCategory `protobuf:"varint,4,req,name=category_id,json=categoryId,enum=gomschema.Commodity_CommodityCategory" json:"category_id,omitempty"`
	/// Whether the item is known to be rare.
	IsRare *bool `protobuf:"varint,5,opt,name=is_rare,json=isRare,def=0" json:"is_rare,omitempty"`
	/// Whether the item is known to be marketable.
	IsNonMarketable *bool `protobuf:"varint,6,opt,name=is_non_marketable,json=isNonMarketable,def=0" json:"is_non_marketable,omitempty"`
	/// The average galactic market price in credits.
	AverageCr *uint32 `protobuf:"varint,7,opt,name=average_cr,json=averageCr" json:"average_cr,omitempty"`
	/// Any app/user-purposed data. Key is app/meaning, value is data.
	Userdata map[string][]byte `protobuf:"bytes,8,rep,name=userdata" json:"userdata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

// Default values for Commodity fields.
const (
	Default_Commodity_TimestampUtc    = uint64(0)
	Default_Commodity_IsRare          = bool(false)
	Default_Commodity_IsNonMarketable = bool(false)
)

func (x *Commodity) Reset() {
	*x = Commodity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gomschema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commodity) ProtoMessage() {}

func (x *Commodity) ProtoReflect() protoreflect.Message {
	mi := &file_gomschema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commodity.ProtoReflect.Descriptor instead.
func (*Commodity) Descriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{1}
}

func (x *Commodity) GetCommodityId() uint64 {
	if x != nil && x.CommodityId != nil {
		return *x.CommodityId
	}
	return 0
}

func (x *Commodity) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Commodity) GetTimestampUtc() uint64 {
	if x != nil && x.TimestampUtc != nil {
		return *x.TimestampUtc
	}
	return Default_Commodity_TimestampUtc
}

func (x *Commodity) GetCategoryId() Commodity_CommodityCategory {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return Commodity_CatNone
}

func (x *Commodity) GetIsRare() bool {
	if x != nil && x.IsRare != nil {
		return *x.IsRare
	}
	return Default_Commodity_IsRare
}

func (x *Commodity) GetIsNonMarketable() bool {
	if x != nil && x.IsNonMarketable != nil {
		return *x.IsNonMarketable
	}
	return Default_Commodity_IsNonMarketable
}

func (x *Commodity) GetAverageCr() uint32 {
	if x != nil && x.AverageCr != nil {
		return *x.AverageCr
	}
	return 0
}

func (x *Commodity) GetUserdata() map[string][]byte {
	if x != nil {
		return x.Userdata
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
/// Galactic coordinate for a system.
type Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float64 `protobuf:"fixed64,1,req,name=x" json:"x,omitempty"`
	Y *float64 `protobuf:"fixed64,2,req,name=y" json:"y,omitempty"`
	Z *float64 `protobuf:"fixed64,3,req,name=z" json:"z,omitempty"`
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gomschema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_gomschema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{2}
}

func (x *Coordinate) GetX() float64 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Coordinate) GetY() float64 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Coordinate) GetZ() float64 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

/// System corresponds to an individual Elite-Dangerous star system, akin to a map.
type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// System ID is it's upper-cased name hashed via fnv1a/32.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	/// Unique name of the system.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	/// Timestamp of the last update to this entry UTC.
	TimestampUtc *uint64 `protobuf:"varint,3,opt,name=timestamp_utc,json=timestampUtc,def=0" json:"timestamp_utc,omitempty"`
	/// Position in the galaxy.
	Position *Coordinate `protobuf:"bytes,4,req,name=position" json:"position,omitempty"`
	/// If we know whether or not the system is populated.
	Populated *bool `protobuf:"varint,5,opt,name=populated,def=1" json:"populated,omitempty"`
	/// If we know whether or not the system needs a permit for entry.
	NeedsPermit *bool `protobuf:"varint,6,opt,name=needs_permit,json=needsPermit,def=0" json:"needs_permit,omitempty"`
	/// Law-Enforcement level of the system.
	SecurityLevel *SecurityLevel `protobuf:"varint,7,opt,name=security_level,json=securityLevel,enum=gomschema.SecurityLevel,def=3" json:"security_level,omitempty"`
	/// Current governance of the system.
	Government *GovernmentType `protobuf:"varint,8,opt,name=government,enum=gomschema.GovernmentType,def=5" json:"government,omitempty"`
	/// Which faction is the system allied to.
	Allegiance *AllegianceType `protobuf:"varint,9,opt,name=allegiance,enum=gomschema.AllegianceType,def=4" json:"allegiance,omitempty"`
	/// Guess: Elite Dangerous Internal ID
	EdAddress *uint64 `protobuf:"varint,10,opt,name=ed_address,json=edAddress,def=0" json:"ed_address,omitempty"`
	/// User/app purposed data. Key=app/purpose, value=data.
	Userdata map[string][]byte `protobuf:"bytes,11,rep,name=userdata" json:"userdata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

// Default values for System fields.
const (
	Default_System_TimestampUtc  = uint64(0)
	Default_System_Populated     = bool(true)
	Default_System_NeedsPermit   = bool(false)
	Default_System_SecurityLevel = SecurityLevel_SecurityMedium
	Default_System_Government    = GovernmentType_GovCorporate
	Default_System_Allegiance    = AllegianceType_AllegIndependent
	Default_System_EdAddress     = uint64(0)
)

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gomschema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_gomschema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{3}
}

func (x *System) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *System) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *System) GetTimestampUtc() uint64 {
	if x != nil && x.TimestampUtc != nil {
		return *x.TimestampUtc
	}
	return Default_System_TimestampUtc
}

func (x *System) GetPosition() *Coordinate {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *System) GetPopulated() bool {
	if x != nil && x.Populated != nil {
		return *x.Populated
	}
	return Default_System_Populated
}

func (x *System) GetNeedsPermit() bool {
	if x != nil && x.NeedsPermit != nil {
		return *x.NeedsPermit
	}
	return Default_System_NeedsPermit
}

func (x *System) GetSecurityLevel() SecurityLevel {
	if x != nil && x.SecurityLevel != nil {
		return *x.SecurityLevel
	}
	return Default_System_SecurityLevel
}

func (x *System) GetGovernment() GovernmentType {
	if x != nil && x.Government != nil {
		return *x.Government
	}
	return Default_System_Government
}

func (x *System) GetAllegiance() AllegianceType {
	if x != nil && x.Allegiance != nil {
		return *x.Allegiance
	}
	return Default_System_Allegiance
}

func (x *System) GetEdAddress() uint64 {
	if x != nil && x.EdAddress != nil {
		return *x.EdAddress
	}
	return Default_System_EdAddress
}

func (x *System) GetUserdata() map[string][]byte {
	if x != nil {
		return x.Userdata
	}
	return nil
}

/// List of the services present at a facility, encapsulated to reduce field count.
type Services struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Does it have an accessible trade market.
	HasMarket *bool `protobuf:"varint,1,opt,name=has_market,json=hasMarket,def=1" json:"has_market,omitempty"`
	/// Does it have a black market.
	HasBlackMarket *bool `protobuf:"varint,2,req,name=has_black_market,json=hasBlackMarket" json:"has_black_market,omitempty"`
	/// Can it refuel.
	HasRefuel *bool `protobuf:"varint,3,opt,name=has_refuel,json=hasRefuel,def=1" json:"has_refuel,omitempty"`
	/// Can it repair.
	HasRepair *bool `protobuf:"varint,4,opt,name=has_repair,json=hasRepair,def=1" json:"has_repair,omitempty"`
	/// Can it re-arm.
	HasRearm *bool `protobuf:"varint,5,opt,name=has_rearm,json=hasRearm,def=1" json:"has_rearm,omitempty"`
	/// Does it sell/upgrade ship components.
	HasOutfitting *bool `protobuf:"varint,6,req,name=has_outfitting,json=hasOutfitting" json:"has_outfitting,omitempty"`
	/// Can you buy ships here.
	HasShipyard *bool `protobuf:"varint,7,req,name=has_shipyard,json=hasShipyard" json:"has_shipyard,omitempty"`
	/// Can you dock here (this is taken from EDDB and might be redundant).
	HasDocking *bool `protobuf:"varint,8,opt,name=has_docking,json=hasDocking,def=1" json:"has_docking,omitempty"`
	/// Does the market have regular trading commodities available.
	HasCommodities *bool `protobuf:"varint,9,opt,name=has_commodities,json=hasCommodities,def=1" json:"has_commodities,omitempty"`
	/// True if the facility is associated with a planet.
	IsPlanetary *bool `protobuf:"varint,10,req,name=is_planetary,json=isPlanetary,def=1" json:"is_planetary,omitempty"`
}

// Default values for Services fields.
const (
	Default_Services_HasMarket      = bool(true)
	Default_Services_HasRefuel      = bool(true)
	Default_Services_HasRepair      = bool(true)
	Default_Services_HasRearm       = bool(true)
	Default_Services_HasDocking     = bool(true)
	Default_Services_HasCommodities = bool(true)
	Default_Services_IsPlanetary    = bool(true)
)

func (x *Services) Reset() {
	*x = Services{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gomschema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Services) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Services) ProtoMessage() {}

func (x *Services) ProtoReflect() protoreflect.Message {
	mi := &file_gomschema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Services.ProtoReflect.Descriptor instead.
func (*Services) Descriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{4}
}

func (x *Services) GetHasMarket() bool {
	if x != nil && x.HasMarket != nil {
		return *x.HasMarket
	}
	return Default_Services_HasMarket
}

func (x *Services) GetHasBlackMarket() bool {
	if x != nil && x.HasBlackMarket != nil {
		return *x.HasBlackMarket
	}
	return false
}

func (x *Services) GetHasRefuel() bool {
	if x != nil && x.HasRefuel != nil {
		return *x.HasRefuel
	}
	return Default_Services_HasRefuel
}

func (x *Services) GetHasRepair() bool {
	if x != nil && x.HasRepair != nil {
		return *x.HasRepair
	}
	return Default_Services_HasRepair
}

func (x *Services) GetHasRearm() bool {
	if x != nil && x.HasRearm != nil {
		return *x.HasRearm
	}
	return Default_Services_HasRearm
}

func (x *Services) GetHasOutfitting() bool {
	if x != nil && x.HasOutfitting != nil {
		return *x.HasOutfitting
	}
	return false
}

func (x *Services) GetHasShipyard() bool {
	if x != nil && x.HasShipyard != nil {
		return *x.HasShipyard
	}
	return false
}

func (x *Services) GetHasDocking() bool {
	if x != nil && x.HasDocking != nil {
		return *x.HasDocking
	}
	return Default_Services_HasDocking
}

func (x *Services) GetHasCommodities() bool {
	if x != nil && x.HasCommodities != nil {
		return *x.HasCommodities
	}
	return Default_Services_HasCommodities
}

func (x *Services) GetIsPlanetary() bool {
	if x != nil && x.IsPlanetary != nil {
		return *x.IsPlanetary
	}
	return Default_Services_IsPlanetary
}

/// Facility describes a station/planetary base, anything you can dock/trade with in-game.
type Facility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Facility ID is the fnv1a/32 hash of upper "{facility name}@{system name}"
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	/// fnv1a/32 hash of the uppercase system name.
	SystemId *uint32 `protobuf:"varint,2,req,name=system_id,json=systemId" json:"system_id,omitempty"`
	/// Name of the facility (minus system name)
	Name *string `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	/// Timestamp of the last update to this entry UTC.
	TimestampUtc *uint64       `protobuf:"varint,4,opt,name=timestamp_utc,json=timestampUtc,def=0" json:"timestamp_utc,omitempty"`
	FacilityType *FacilityType `protobuf:"varint,5,opt,name=facility_type,json=facilityType,enum=gomschema.FacilityType,def=10" json:"facility_type,omitempty"`
	/// Identify which services are available at this facility.
	Services *Services `protobuf:"bytes,6,req,name=services" json:"services,omitempty"`
	/// Maximum ship size the landing pad supports.
	PadSize *PadSize `protobuf:"varint,7,opt,name=pad_size,json=padSize,enum=gomschema.PadSize,def=2" json:"pad_size,omitempty"`
	/// Distance in light seconds from system entry point.
	LsFromStar *uint32 `protobuf:"varint,8,opt,name=ls_from_star,json=lsFromStar" json:"ls_from_star,omitempty"`
	/// Type of government running this station.
	Government *GovernmentType `protobuf:"varint,9,opt,name=government,enum=gomschema.GovernmentType,def=5" json:"government,omitempty"`
	/// Type of allegiance this station holds.
	Allegiance *AllegianceType `protobuf:"varint,10,opt,name=allegiance,enum=gomschema.AllegianceType,def=4" json:"allegiance,omitempty"`
	/// Guess: the internal Elite Dangerous id for the market here.
	EdMarketId *uint64 `protobuf:"varint,11,opt,name=ed_market_id,json=edMarketId,def=0" json:"ed_market_id,omitempty"`
	/// App/user-purposed custom data. Key is app/purpose, value is data.
	Userdata map[string][]byte `protobuf:"bytes,12,rep,name=userdata" json:"userdata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

// Default values for Facility fields.
const (
	Default_Facility_TimestampUtc = uint64(0)
	Default_Facility_FacilityType = FacilityType_FTPlanetaryOutpost
	Default_Facility_PadSize      = PadSize_PadMedium
	Default_Facility_Government   = GovernmentType_GovCorporate
	Default_Facility_Allegiance   = AllegianceType_AllegIndependent
	Default_Facility_EdMarketId   = uint64(0)
)

func (x *Facility) Reset() {
	*x = Facility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gomschema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facility) ProtoMessage() {}

func (x *Facility) ProtoReflect() protoreflect.Message {
	mi := &file_gomschema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facility.ProtoReflect.Descriptor instead.
func (*Facility) Descriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{5}
}

func (x *Facility) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Facility) GetSystemId() uint32 {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return 0
}

func (x *Facility) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Facility) GetTimestampUtc() uint64 {
	if x != nil && x.TimestampUtc != nil {
		return *x.TimestampUtc
	}
	return Default_Facility_TimestampUtc
}

func (x *Facility) GetFacilityType() FacilityType {
	if x != nil && x.FacilityType != nil {
		return *x.FacilityType
	}
	return Default_Facility_FacilityType
}

func (x *Facility) GetServices() *Services {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Facility) GetPadSize() PadSize {
	if x != nil && x.PadSize != nil {
		return *x.PadSize
	}
	return Default_Facility_PadSize
}

func (x *Facility) GetLsFromStar() uint32 {
	if x != nil && x.LsFromStar != nil {
		return *x.LsFromStar
	}
	return 0
}

func (x *Facility) GetGovernment() GovernmentType {
	if x != nil && x.Government != nil {
		return *x.Government
	}
	return Default_Facility_Government
}

func (x *Facility) GetAllegiance() AllegianceType {
	if x != nil && x.Allegiance != nil {
		return *x.Allegiance
	}
	return Default_Facility_Allegiance
}

func (x *Facility) GetEdMarketId() uint64 {
	if x != nil && x.EdMarketId != nil {
		return *x.EdMarketId
	}
	return Default_Facility_EdMarketId
}

func (x *Facility) GetUserdata() map[string][]byte {
	if x != nil {
		return x.Userdata
	}
	return nil
}

/// A docket describing a quantity of units and a price for a given commodity.
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// What product is represented.
	CommodityId *uint32 `protobuf:"varint,1,req,name=commodity_id,json=commodityId" json:"commodity_id,omitempty"`
	/// How much of this product is involved.
	Units *uint32 `protobuf:"varint,2,req,name=units" json:"units,omitempty"`
	/// The credit value associated.
	Credits *int32 `protobuf:"varint,3,req,name=credits" json:"credits,omitempty"`
	/// Optional time recorded.
	TimestampUtc *uint64 `protobuf:"varint,4,opt,name=timestamp_utc,json=timestampUtc,def=0" json:"timestamp_utc,omitempty"`
}

// Default values for Trade fields.
const (
	Default_Trade_TimestampUtc = uint64(0)
)

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gomschema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_gomschema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{6}
}

func (x *Trade) GetCommodityId() uint32 {
	if x != nil && x.CommodityId != nil {
		return *x.CommodityId
	}
	return 0
}

func (x *Trade) GetUnits() uint32 {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return 0
}

func (x *Trade) GetCredits() int32 {
	if x != nil && x.Credits != nil {
		return *x.Credits
	}
	return 0
}

func (x *Trade) GetTimestampUtc() uint64 {
	if x != nil && x.TimestampUtc != nil {
		return *x.TimestampUtc
	}
	return Default_Trade_TimestampUtc
}

/// All of the available supply and demand for a designated facility.
type FacilityListing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// fnv1a/32 hash of upper{facility name "@" system name}
	FacilityId *uint32 `protobuf:"varint,1,req,name=facility_id,json=facilityId" json:"facility_id,omitempty"`
	/// Items the station is selling.
	Supply []*Trade `protobuf:"bytes,2,rep,name=supply" json:"supply,omitempty"`
	/// Items the station is looking to buy.
	Demand []*Trade `protobuf:"bytes,3,rep,name=demand" json:"demand,omitempty"`
}

func (x *FacilityListing) Reset() {
	*x = FacilityListing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gomschema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacilityListing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacilityListing) ProtoMessage() {}

func (x *FacilityListing) ProtoReflect() protoreflect.Message {
	mi := &file_gomschema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacilityListing.ProtoReflect.Descriptor instead.
func (*FacilityListing) Descriptor() ([]byte, []int) {
	return file_gomschema_proto_rawDescGZIP(), []int{7}
}

func (x *FacilityListing) GetFacilityId() uint32 {
	if x != nil && x.FacilityId != nil {
		return *x.FacilityId
	}
	return 0
}

func (x *FacilityListing) GetSupply() []*Trade {
	if x != nil {
		return x.Supply
	}
	return nil
}

func (x *FacilityListing) GetDemand() []*Trade {
	if x != nil {
		return x.Demand
	}
	return nil
}

var File_gomschema_proto protoreflect.FileDescriptor

var file_gomschema_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x8d, 0x02, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x05, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x22, 0xe0, 0x05, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75,
	0x74, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x74, 0x63, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x69, 0x73, 0x52, 0x61,
	0x72, 0x65, 0x12, 0x31, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xbb, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x61, 0x74, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x43, 0x68, 0x65, 0x6d, 0x69,
	0x63, 0x61, 0x6c, 0x73, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x61, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x44, 0x72, 0x75, 0x67, 0x73, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x73, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x61, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x73, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x61, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x10, 0x09, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x61, 0x74, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x72, 0x79, 0x10, 0x0a, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x61, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x10, 0x0b,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x54, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x57, 0x61, 0x73, 0x74, 0x65, 0x10, 0x0d, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x10, 0x0e, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x0f, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x53, 0x61, 0x6c, 0x76, 0x61, 0x67, 0x65, 0x10, 0x10, 0x22,
	0x36, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0xd8, 0x04, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x74, 0x63, 0x12, 0x31,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x09, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x12,
	0x4f, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x3a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x47, 0x0a, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x0c, 0x47, 0x6f, 0x76, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x6c, 0x6c,
	0x65, 0x67, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x67, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x41, 0x6c, 0x6c, 0x65, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x65,
	0x67, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6d,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8f, 0x03, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e,
	0x68, 0x61, 0x73, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x23,
	0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x68, 0x61, 0x73, 0x52, 0x65, 0x66,
	0x75, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x68,
	0x61, 0x73, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x12, 0x21, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x52, 0x65, 0x61, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x68,
	0x61, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x4f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x53, 0x68, 0x69,
	0x70, 0x79, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x0a, 0x68, 0x61, 0x73, 0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x0f,
	0x68, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x68, 0x61, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x02, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x61, 0x72, 0x79, 0x22, 0x89, 0x05, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x75, 0x74, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x74, 0x63, 0x12, 0x50, 0x0a, 0x0d, 0x66, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x46, 0x54, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x0c,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x08, 0x70, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x61, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x3a, 0x09, 0x50, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x07,
	0x70, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x47, 0x6f, 0x76, 0x43, 0x6f, 0x72,
	0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x10, 0x41, 0x6c, 0x6c, 0x65, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x82, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x55, 0x74, 0x63, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6d,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x2a, 0xf7,
	0x01, 0x0a, 0x0e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x6f, 0x76, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x6f, 0x76, 0x41, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x79, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x6f, 0x76, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x73, 0x6d, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x47, 0x6f, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x63, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x6f, 0x76, 0x43, 0x6f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x6f, 0x76, 0x43,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x6f,
	0x76, 0x44, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x6f, 0x76, 0x44, 0x69, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x6f, 0x76, 0x46, 0x65, 0x75, 0x64, 0x61, 0x6c, 0x10, 0x08,
	0x12, 0x10, 0x0a, 0x0c, 0x47, 0x6f, 0x76, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x61, 0x67, 0x65,
	0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x6f, 0x76, 0x50, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x10,
	0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x6f, 0x76, 0x50, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x6e, 0x79, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x6f, 0x76, 0x54, 0x68, 0x65,
	0x6f, 0x63, 0x72, 0x61, 0x63, 0x79, 0x10, 0x0c, 0x2a, 0x89, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x6c,
	0x65, 0x67, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x6c, 0x6c, 0x65, 0x67, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6c,
	0x6c, 0x65, 0x67, 0x41, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x6c, 0x6c, 0x65, 0x67, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x65, 0x67, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x65, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x6c, 0x6c,
	0x65, 0x67, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x73, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x05, 0x2a, 0x6d, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x41, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x79, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x48, 0x69, 0x67,
	0x68, 0x10, 0x04, 0x2a, 0xec, 0x02, 0x0a, 0x0c, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x54, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x54, 0x43, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x61, 0x6e, 0x4f, 0x75,
	0x74, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x54, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x54, 0x43, 0x6f, 0x72, 0x69, 0x6f, 0x6c, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x54, 0x49, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x54, 0x4d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x4f,
	0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x54, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x06, 0x12, 0x15, 0x0a,
	0x11, 0x46, 0x54, 0x4f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x73, 0x53, 0x74, 0x61, 0x72, 0x70, 0x6f,
	0x72, 0x74, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x54, 0x4f, 0x72, 0x62, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x54, 0x53,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74,
	0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x54, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x73, 0x74, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x54,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x10, 0x0b, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x54, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x54,
	0x4d, 0x65, 0x67, 0x61, 0x73, 0x68, 0x69, 0x70, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x54,
	0x41, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x61, 0x73, 0x65, 0x10, 0x0e, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x54, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x10, 0x0f, 0x2a, 0x41, 0x0a, 0x07, 0x50, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x61, 0x64, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x61,
	0x64, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x61, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x61, 0x64, 0x4c, 0x61,
	0x72, 0x67, 0x65, 0x10, 0x03, 0x42, 0x10, 0x0a, 0x01, 0x2e, 0x5a, 0x0b, 0x2e, 0x3b, 0x67, 0x6f,
	0x6d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
}

var (
	file_gomschema_proto_rawDescOnce sync.Once
	file_gomschema_proto_rawDescData = file_gomschema_proto_rawDesc
)

func file_gomschema_proto_rawDescGZIP() []byte {
	file_gomschema_proto_rawDescOnce.Do(func() {
		file_gomschema_proto_rawDescData = protoimpl.X.CompressGZIP(file_gomschema_proto_rawDescData)
	})
	return file_gomschema_proto_rawDescData
}

var file_gomschema_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_gomschema_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_gomschema_proto_goTypes = []interface{}{
	(GovernmentType)(0),              // 0: gomschema.GovernmentType
	(AllegianceType)(0),              // 1: gomschema.AllegianceType
	(SecurityLevel)(0),               // 2: gomschema.SecurityLevel
	(FacilityType)(0),                // 3: gomschema.FacilityType
	(PadSize)(0),                     // 4: gomschema.PadSize
	(Header_Class)(0),                // 5: gomschema.Header.Class
	(Commodity_CommodityCategory)(0), // 6: gomschema.Commodity.CommodityCategory
	(*Header)(nil),                   // 7: gomschema.Header
	(*Commodity)(nil),                // 8: gomschema.Commodity
	(*Coordinate)(nil),               // 9: gomschema.Coordinate
	(*System)(nil),                   // 10: gomschema.System
	(*Services)(nil),                 // 11: gomschema.Services
	(*Facility)(nil),                 // 12: gomschema.Facility
	(*Trade)(nil),                    // 13: gomschema.Trade
	(*FacilityListing)(nil),          // 14: gomschema.FacilityListing
	nil,                              // 15: gomschema.Header.UserdataEntry
	nil,                              // 16: gomschema.Commodity.UserdataEntry
	nil,                              // 17: gomschema.System.UserdataEntry
	nil,                              // 18: gomschema.Facility.UserdataEntry
}
var file_gomschema_proto_depIdxs = []int32{
	5,  // 0: gomschema.Header.class:type_name -> gomschema.Header.Class
	15, // 1: gomschema.Header.userdata:type_name -> gomschema.Header.UserdataEntry
	6,  // 2: gomschema.Commodity.category_id:type_name -> gomschema.Commodity.CommodityCategory
	16, // 3: gomschema.Commodity.userdata:type_name -> gomschema.Commodity.UserdataEntry
	9,  // 4: gomschema.System.position:type_name -> gomschema.Coordinate
	2,  // 5: gomschema.System.security_level:type_name -> gomschema.SecurityLevel
	0,  // 6: gomschema.System.government:type_name -> gomschema.GovernmentType
	1,  // 7: gomschema.System.allegiance:type_name -> gomschema.AllegianceType
	17, // 8: gomschema.System.userdata:type_name -> gomschema.System.UserdataEntry
	3,  // 9: gomschema.Facility.facility_type:type_name -> gomschema.FacilityType
	11, // 10: gomschema.Facility.services:type_name -> gomschema.Services
	4,  // 11: gomschema.Facility.pad_size:type_name -> gomschema.PadSize
	0,  // 12: gomschema.Facility.government:type_name -> gomschema.GovernmentType
	1,  // 13: gomschema.Facility.allegiance:type_name -> gomschema.AllegianceType
	18, // 14: gomschema.Facility.userdata:type_name -> gomschema.Facility.UserdataEntry
	13, // 15: gomschema.FacilityListing.supply:type_name -> gomschema.Trade
	13, // 16: gomschema.FacilityListing.demand:type_name -> gomschema.Trade
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_gomschema_proto_init() }
func file_gomschema_proto_init() {
	if File_gomschema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gomschema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gomschema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commodity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gomschema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gomschema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gomschema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Services); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gomschema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gomschema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gomschema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacilityListing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gomschema_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gomschema_proto_goTypes,
		DependencyIndexes: file_gomschema_proto_depIdxs,
		EnumInfos:         file_gomschema_proto_enumTypes,
		MessageInfos:      file_gomschema_proto_msgTypes,
	}.Build()
	File_gomschema_proto = out.File
	file_gomschema_proto_rawDesc = nil
	file_gomschema_proto_goTypes = nil
	file_gomschema_proto_depIdxs = nil
}
