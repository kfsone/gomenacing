// automatically generated by the FlatBuffers compiler, do not modify

import { flatbuffers } from "./flatbuffers"
/**
 * Government is an enumeration of government types reduced to a single field.
 *
 * @enum {number}
 */
export namespace gomschema{
export enum Government{
  None= 0,
  Anarchy= 1,
  Communism= 2,
  Confederacy= 3,
  ooperative= 4,
  Corporate= 5,
  emocracy= 6,
  Dictatorship= 7,
  Feudal= 8,
  Patronage= 9,
  Prison= 10,
  PrisonColony= 11,
  Theocracy= 12
}};

/**
 * Allegiance is an enumeration of allegiance types reduced to a single field.
 *
 * @enum {number}
 */
export namespace gomschema{
export enum Allegiance{
  None= 0,
  Alliance= 1,
  Empire= 2,
  Federation= 3,
  Independent= 4,
  PilotsFederation= 5
}};

/**
 * Security level is system-specific and determines how aggressive law enforcement is.
 *
 * @enum {number}
 */
export namespace gomschema{
export enum SecurityLevel{
  None= 0,
  Anarchy= 1,
  Low= 2,
  Medium= 3,
  High= 4
}};

/**
 * @enum {number}
 */
export namespace gomschema{
export enum FacilityType{
  None= 0,
  CivilianOutpost= 1,
  CommercialOutpost= 2,
  CoriolisStarport= 3,
  IndustrialOutpost= 4,
  MilitaryOutpost= 5,
  MiningOutpost= 6,
  OcellusStarport= 7,
  OrbisStarport= 8,
  ScientificOutpost= 9,
  PlanetaryOutpost= 10,
  PlanetaryPort= 11,
  PlanetarySettlement= 12,
  Megaship= 13,
  AsteroidBase= 14,
  FleetCarrier= 15
}};

/**
 * @enum {number}
 */
export namespace gomschema{
export enum LandingPad{
  None= 0,
  Small= 1,
  Medium= 2,
  Large= 3
}};

/**
 * @enum {number}
 */
export namespace gomschema{
export enum CommodityType{
  None= 0,
  Chemicals= 1,
  ConsumerItems= 2,
  LegalDrugs= 3,
  Foods= 4,
  IndustrialMaterials= 5,
  Machinery= 6,
  Medicines= 7,
  Metals= 8,
  Minerals= 9,
  Slavery= 10,
  Technology= 11,
  Textiles= 12,
  Waste= 13,
  Weapons= 14,
  Unknown= 15,
  Salvage= 16
}};

/**
 * Commodity is a type of item that can be traded within the game. At the moment,
 * the categories are small enough I decided to just enumerate them right here.
 *
 * @constructor
 */
export namespace gomschema{
export class Commodity {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Commodity
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Commodity {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Commodity= obj
 * @returns Commodity
 */
static getRootAsCommodity(bb:flatbuffers.ByteBuffer, obj?:Commodity):Commodity {
  return (obj || new Commodity).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * Elite Dangerous' internal ID for the commodity acts as the key.
 *
 * @returns flatbuffers.Long
 */
commodityId():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * @param flatbuffers.Long value
 * @returns boolean
 */
mutate_commodity_id(value:flatbuffers.Long):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
};

/**
 * Name can be localized as long as the English name is preserved for hashing.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * What type of item is this.
 *
 * @returns gomschema.CommodityType
 */
categoryId():gomschema.CommodityType {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : gomschema.CommodityType.None;
};

/**
 * @param gomschema.CommodityType value
 * @returns boolean
 */
mutate_category_id(value:gomschema.CommodityType):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * Whether the item is known to be rare.
 *
 * @returns boolean
 */
isRare():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_is_rare(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Whether the item is known to be marketable.
 *
 * @returns boolean
 */
isNonMarketable():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_is_non_marketable(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * The average galactic market price in credits.
 *
 * @returns number
 */
averageCr():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param number value
 * @returns boolean
 */
mutate_average_cr(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * @param flatbuffers.Builder builder
 */
static startCommodity(builder:flatbuffers.Builder) {
  builder.startObject(6);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Long commodityId
 */
static addCommodityId(builder:flatbuffers.Builder, commodityId:flatbuffers.Long) {
  builder.addFieldInt64(0, commodityId, builder.createLong(0, 0));
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param gomschema.CommodityType categoryId
 */
static addCategoryId(builder:flatbuffers.Builder, categoryId:gomschema.CommodityType) {
  builder.addFieldInt8(2, categoryId, gomschema.CommodityType.None);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isRare
 */
static addIsRare(builder:flatbuffers.Builder, isRare:boolean) {
  builder.addFieldInt8(3, +isRare, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isNonMarketable
 */
static addIsNonMarketable(builder:flatbuffers.Builder, isNonMarketable:boolean) {
  builder.addFieldInt8(4, +isNonMarketable, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param number averageCr
 */
static addAverageCr(builder:flatbuffers.Builder, averageCr:number) {
  builder.addFieldInt32(5, averageCr, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endCommodity(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createCommodity(builder:flatbuffers.Builder, commodityId:flatbuffers.Long, nameOffset:flatbuffers.Offset, categoryId:gomschema.CommodityType, isRare:boolean, isNonMarketable:boolean, averageCr:number):flatbuffers.Offset {
  Commodity.startCommodity(builder);
  Commodity.addCommodityId(builder, commodityId);
  Commodity.addName(builder, nameOffset);
  Commodity.addCategoryId(builder, categoryId);
  Commodity.addIsRare(builder, isRare);
  Commodity.addIsNonMarketable(builder, isNonMarketable);
  Commodity.addAverageCr(builder, averageCr);
  return Commodity.endCommodity(builder);
}
}
}
/**
 * Trade is a discrete entry for a Commodity that is or can be traded at with
 * a number of units and a value.
 *
 * @constructor
 */
export namespace gomschema{
export class Trade {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Trade
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Trade {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * Which commodity this descrbes.
 *
 * @returns flatbuffers.Long
 */
commodityId():flatbuffers.Long {
  return this.bb!.readUint64(this.bb_pos);
};

/**
 * @param flatbuffers.Long value
 * @returns boolean
 */
mutate_commodity_id(value:flatbuffers.Long):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 0);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
};

/**
 * How many units
 *
 * @returns number
 */
units():number {
  return this.bb!.readUint32(this.bb_pos + 8);
};

/**
 * @param number value
 * @returns boolean
 */
mutate_units(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * How many credits
 *
 * @returns number
 */
credits():number {
  return this.bb!.readUint16(this.bb_pos + 12);
};

/**
 * @param number value
 * @returns boolean
 */
mutate_credits(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint16(this.bb_pos + offset, value);
  return true;
};

/**
 * Unix timestamp UTC.
 *
 * @returns flatbuffers.Long
 */
timestampUtc():flatbuffers.Long {
  return this.bb!.readUint64(this.bb_pos + 16);
};

/**
 * @param flatbuffers.Long value
 * @returns boolean
 */
mutate_timestamp_utc(value:flatbuffers.Long):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 16);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Long commodity_id
 * @param number units
 * @param number credits
 * @param flatbuffers.Long timestamp_utc
 * @returns flatbuffers.Offset
 */
static createTrade(builder:flatbuffers.Builder, commodity_id: flatbuffers.Long, units: number, credits: number, timestamp_utc: flatbuffers.Long):flatbuffers.Offset {
  builder.prep(8, 24);
  builder.writeInt64(timestamp_utc);
  builder.pad(2);
  builder.writeInt16(credits);
  builder.writeInt32(units);
  builder.writeInt64(commodity_id);
  return builder.offset();
};

}
}
/**
 * @constructor
 */
export namespace gomschema{
export class FacilityListing {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns FacilityListing
 */
__init(i:number, bb:flatbuffers.ByteBuffer):FacilityListing {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param FacilityListing= obj
 * @returns FacilityListing
 */
static getRootAsFacilityListing(bb:flatbuffers.ByteBuffer, obj?:FacilityListing):FacilityListing {
  return (obj || new FacilityListing).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * Identifies the facility presenting these trades.
 *
 * @returns number
 */
facilityId():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param number value
 * @returns boolean
 */
mutate_facility_id(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * Commodities this facility sells.
 *
 * @param number index
 * @param gomschema.Trade= obj
 * @returns gomschema.Trade
 */
supply(index: number, obj?:gomschema.Trade):gomschema.Trade|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new gomschema.Trade).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;
};

/**
 * @returns number
 */
supplyLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * Commodities this facility buys.
 *
 * @param number index
 * @param gomschema.Trade= obj
 * @returns gomschema.Trade
 */
demand(index: number, obj?:gomschema.Trade):gomschema.Trade|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new gomschema.Trade).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;
};

/**
 * @returns number
 */
demandLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startFacilityListing(builder:flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param number facilityId
 */
static addFacilityId(builder:flatbuffers.Builder, facilityId:number) {
  builder.addFieldInt32(0, facilityId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset supplyOffset
 */
static addSupply(builder:flatbuffers.Builder, supplyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, supplyOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startSupplyVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(24, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset demandOffset
 */
static addDemand(builder:flatbuffers.Builder, demandOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, demandOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDemandVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(24, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endFacilityListing(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createFacilityListing(builder:flatbuffers.Builder, facilityId:number, supplyOffset:flatbuffers.Offset, demandOffset:flatbuffers.Offset):flatbuffers.Offset {
  FacilityListing.startFacilityListing(builder);
  FacilityListing.addFacilityId(builder, facilityId);
  FacilityListing.addSupply(builder, supplyOffset);
  FacilityListing.addDemand(builder, demandOffset);
  return FacilityListing.endFacilityListing(builder);
}
}
}
/**
 * Facility represents a static, dockable entity within the game such as a station or planetary base.
 * Instead of assigning stations their own unique IDs, we produce an fnv1a_32 hash of the system name
 * and the station name.
 *
 * @constructor
 */
export namespace gomschema{
export class Facility {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Facility
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Facility {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Facility= obj
 * @returns Facility
 */
static getRootAsFacility(bb:flatbuffers.ByteBuffer, obj?:Facility):Facility {
  return (obj || new Facility).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * "{upper system name}@{facility name upper}"
 *
 * @returns number
 */
facilityId():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param number value
 * @returns boolean
 */
mutate_facility_id(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * Hash of the all-upper name of the system.
 *
 * @returns number
 */
systemId():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param number value
 * @returns boolean
 */
mutate_system_id(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * Name of the facility itself.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Unix timestamp UTC of last update.
 *
 * @returns flatbuffers.Long
 */
timestampUtc():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * @param flatbuffers.Long value
 * @returns boolean
 */
mutate_timestamp_utc(value:flatbuffers.Long):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
};

/**
 * Optional facility type.
 *
 * @returns gomschema.FacilityType
 */
facilityType():gomschema.FacilityType {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : gomschema.FacilityType.None;
};

/**
 * @param gomschema.FacilityType value
 * @returns boolean
 */
mutate_facility_type(value:gomschema.FacilityType):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * Does it have an accessible trade market.
 *
 * @returns boolean
 */
hasMarket():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_has_market(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Does it have a black market.
 *
 * @returns boolean
 */
hasBlackMarket():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_has_black_market(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 16);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Can it refuel.
 *
 * @returns boolean
 */
hasRefuel():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_has_refuel(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 18);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Can it repair.
 *
 * @returns boolean
 */
hasRepair():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_has_repair(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 20);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Can it re-arm.
 *
 * @returns boolean
 */
hasRearm():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_has_rearm(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 22);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Does it sell/upgrade ship components.
 *
 * @returns boolean
 */
hasOutfitting():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_has_outfitting(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 24);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Can you buy ships here.
 *
 * @returns boolean
 */
hasShipyard():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_has_shipyard(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 26);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Can you dock here (this is taken from EDDB and might be redundant).
 *
 * @returns boolean
 */
hasDocking():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_has_docking(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 28);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Does the market have regular trading commodities available.
 *
 * @returns boolean
 */
hasCommodities():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_has_commodities(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 30);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Is it on a planet.
 *
 * @returns boolean
 */
isPlanetary():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_is_planetary(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 32);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Distance from the facility to the entry point in the system.
 *
 * @returns number
 */
lsToStar():number {
  var offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param number value
 * @returns boolean
 */
mutate_ls_to_star(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 34);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * The governance of this station. If not present, assume system's government.
 *
 * @returns gomschema.Government
 */
government():gomschema.Government {
  var offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : gomschema.Government.Corporate;
};

/**
 * @param gomschema.Government value
 * @returns boolean
 */
mutate_government(value:gomschema.Government):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 36);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * The allegiance of this station. If not present, assume system's allegiance.
 *
 * @returns gomschema.Allegiance
 */
allegiance():gomschema.Allegiance {
  var offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : gomschema.Allegiance.Independent;
};

/**
 * @param gomschema.Allegiance value
 * @returns boolean
 */
mutate_allegiance(value:gomschema.Allegiance):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 38);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * Presumably the internal ED identifier for the market here.
 *
 * @returns flatbuffers.Long
 */
edMarketId():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * @param flatbuffers.Long value
 * @returns boolean
 */
mutate_ed_market_id(value:flatbuffers.Long):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 40);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
};

/**
 * @param flatbuffers.Builder builder
 */
static startFacility(builder:flatbuffers.Builder) {
  builder.startObject(19);
};

/**
 * @param flatbuffers.Builder builder
 * @param number facilityId
 */
static addFacilityId(builder:flatbuffers.Builder, facilityId:number) {
  builder.addFieldInt32(0, facilityId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number systemId
 */
static addSystemId(builder:flatbuffers.Builder, systemId:number) {
  builder.addFieldInt32(1, systemId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Long timestampUtc
 */
static addTimestampUtc(builder:flatbuffers.Builder, timestampUtc:flatbuffers.Long) {
  builder.addFieldInt64(3, timestampUtc, builder.createLong(0, 0));
};

/**
 * @param flatbuffers.Builder builder
 * @param gomschema.FacilityType facilityType
 */
static addFacilityType(builder:flatbuffers.Builder, facilityType:gomschema.FacilityType) {
  builder.addFieldInt8(4, facilityType, gomschema.FacilityType.None);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasMarket
 */
static addHasMarket(builder:flatbuffers.Builder, hasMarket:boolean) {
  builder.addFieldInt8(5, +hasMarket, +true);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasBlackMarket
 */
static addHasBlackMarket(builder:flatbuffers.Builder, hasBlackMarket:boolean) {
  builder.addFieldInt8(6, +hasBlackMarket, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasRefuel
 */
static addHasRefuel(builder:flatbuffers.Builder, hasRefuel:boolean) {
  builder.addFieldInt8(7, +hasRefuel, +true);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasRepair
 */
static addHasRepair(builder:flatbuffers.Builder, hasRepair:boolean) {
  builder.addFieldInt8(8, +hasRepair, +true);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasRearm
 */
static addHasRearm(builder:flatbuffers.Builder, hasRearm:boolean) {
  builder.addFieldInt8(9, +hasRearm, +true);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasOutfitting
 */
static addHasOutfitting(builder:flatbuffers.Builder, hasOutfitting:boolean) {
  builder.addFieldInt8(10, +hasOutfitting, +true);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasShipyard
 */
static addHasShipyard(builder:flatbuffers.Builder, hasShipyard:boolean) {
  builder.addFieldInt8(11, +hasShipyard, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasDocking
 */
static addHasDocking(builder:flatbuffers.Builder, hasDocking:boolean) {
  builder.addFieldInt8(12, +hasDocking, +true);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasCommodities
 */
static addHasCommodities(builder:flatbuffers.Builder, hasCommodities:boolean) {
  builder.addFieldInt8(13, +hasCommodities, +true);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean isPlanetary
 */
static addIsPlanetary(builder:flatbuffers.Builder, isPlanetary:boolean) {
  builder.addFieldInt8(14, +isPlanetary, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param number lsToStar
 */
static addLsToStar(builder:flatbuffers.Builder, lsToStar:number) {
  builder.addFieldInt32(15, lsToStar, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param gomschema.Government government
 */
static addGovernment(builder:flatbuffers.Builder, government:gomschema.Government) {
  builder.addFieldInt8(16, government, gomschema.Government.Corporate);
};

/**
 * @param flatbuffers.Builder builder
 * @param gomschema.Allegiance allegiance
 */
static addAllegiance(builder:flatbuffers.Builder, allegiance:gomschema.Allegiance) {
  builder.addFieldInt8(17, allegiance, gomschema.Allegiance.Independent);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Long edMarketId
 */
static addEdMarketId(builder:flatbuffers.Builder, edMarketId:flatbuffers.Long) {
  builder.addFieldInt64(18, edMarketId, builder.createLong(0, 0));
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endFacility(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createFacility(builder:flatbuffers.Builder, facilityId:number, systemId:number, nameOffset:flatbuffers.Offset, timestampUtc:flatbuffers.Long, facilityType:gomschema.FacilityType, hasMarket:boolean, hasBlackMarket:boolean, hasRefuel:boolean, hasRepair:boolean, hasRearm:boolean, hasOutfitting:boolean, hasShipyard:boolean, hasDocking:boolean, hasCommodities:boolean, isPlanetary:boolean, lsToStar:number, government:gomschema.Government, allegiance:gomschema.Allegiance, edMarketId:flatbuffers.Long):flatbuffers.Offset {
  Facility.startFacility(builder);
  Facility.addFacilityId(builder, facilityId);
  Facility.addSystemId(builder, systemId);
  Facility.addName(builder, nameOffset);
  Facility.addTimestampUtc(builder, timestampUtc);
  Facility.addFacilityType(builder, facilityType);
  Facility.addHasMarket(builder, hasMarket);
  Facility.addHasBlackMarket(builder, hasBlackMarket);
  Facility.addHasRefuel(builder, hasRefuel);
  Facility.addHasRepair(builder, hasRepair);
  Facility.addHasRearm(builder, hasRearm);
  Facility.addHasOutfitting(builder, hasOutfitting);
  Facility.addHasShipyard(builder, hasShipyard);
  Facility.addHasDocking(builder, hasDocking);
  Facility.addHasCommodities(builder, hasCommodities);
  Facility.addIsPlanetary(builder, isPlanetary);
  Facility.addLsToStar(builder, lsToStar);
  Facility.addGovernment(builder, government);
  Facility.addAllegiance(builder, allegiance);
  Facility.addEdMarketId(builder, edMarketId);
  return Facility.endFacility(builder);
}
}
}
/**
 * Galactic coordinate for a system.
 *
 * @constructor
 */
export namespace gomschema{
export class Coordinate {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Coordinate
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Coordinate {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x():number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @param number value
 * @returns boolean
 */
mutate_x(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 0);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeFloat64(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns number
 */
y():number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @param number value
 * @returns boolean
 */
mutate_y(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeFloat64(this.bb_pos + offset, value);
  return true;
};

/**
 * @returns number
 */
z():number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @param number value
 * @returns boolean
 */
mutate_z(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 16);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeFloat64(this.bb_pos + offset, value);
  return true;
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @param number z
 * @returns flatbuffers.Offset
 */
static createCoordinate(builder:flatbuffers.Builder, x: number, y: number, z: number):flatbuffers.Offset {
  builder.prep(8, 24);
  builder.writeFloat64(z);
  builder.writeFloat64(y);
  builder.writeFloat64(x);
  return builder.offset();
};

}
}
/**
 * System corresponds to an individual Elite-Dangerous star system, akin to a map.
 *
 * @constructor
 */
export namespace gomschema{
export class System {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns System
 */
__init(i:number, bb:flatbuffers.ByteBuffer):System {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param System= obj
 * @returns System
 */
static getRootAsSystem(bb:flatbuffers.ByteBuffer, obj?:System):System {
  return (obj || new System).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * System ID is it's upper-cased name hashed via fnv1a.
 *
 * @returns number
 */
systemId():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param number value
 * @returns boolean
 */
mutate_system_id(value:number):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
};

/**
 * Unique name of the system.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Position in the galaxy.
 *
 * @param gomschema.Coordinate= obj
 * @returns gomschema.Coordinate|null
 */
position(obj?:gomschema.Coordinate):gomschema.Coordinate|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new gomschema.Coordinate).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * Timestamp of the last update to this entry UTC.
 *
 * @returns flatbuffers.Long
 */
timestampUtc():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * @param flatbuffers.Long value
 * @returns boolean
 */
mutate_timestamp_utc(value:flatbuffers.Long):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
power():string|null
power(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
power(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Whether anyone lives here.
 *
 * @returns boolean
 */
populated():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_populated(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Whether a permit is required to enter the systme.
 *
 * @returns boolean
 */
needsPermit():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param boolean value
 * @returns boolean
 */
mutate_needs_permit(value:boolean):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 16);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
};

/**
 * Law-Enforcement level of the system.
 *
 * @returns gomschema.SecurityLevel
 */
security():gomschema.SecurityLevel {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : gomschema.SecurityLevel.Medium;
};

/**
 * @param gomschema.SecurityLevel value
 * @returns boolean
 */
mutate_security(value:gomschema.SecurityLevel):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 18);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * What is the government for the system.
 *
 * @returns gomschema.Government
 */
governmentId():gomschema.Government {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : gomschema.Government.Corporate;
};

/**
 * @param gomschema.Government value
 * @returns boolean
 */
mutate_government_id(value:gomschema.Government):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 20);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * Which faction is the system allied to.
 *
 * @returns gomschema.Allegiance
 */
allegianceId():gomschema.Allegiance {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : gomschema.Allegiance.Independent;
};

/**
 * @param gomschema.Allegiance value
 * @returns boolean
 */
mutate_allegiance_id(value:gomschema.Allegiance):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 22);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, value);
  return true;
};

/**
 * Guess: Elite Dangerous Internal ID
 *
 * @returns flatbuffers.Long
 */
edAddress():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * @param flatbuffers.Long value
 * @returns boolean
 */
mutate_ed_address(value:flatbuffers.Long):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 24);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
};

/**
 * Facilities in this system.
 *
 * @param number index
 * @param gomschema.Facility= obj
 * @returns gomschema.Facility
 */
facilities(index: number, obj?:gomschema.Facility):gomschema.Facility|null {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new gomschema.Facility).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
facilitiesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startSystem(builder:flatbuffers.Builder) {
  builder.startObject(12);
};

/**
 * @param flatbuffers.Builder builder
 * @param number systemId
 */
static addSystemId(builder:flatbuffers.Builder, systemId:number) {
  builder.addFieldInt32(0, systemId, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset positionOffset
 */
static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, positionOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Long timestampUtc
 */
static addTimestampUtc(builder:flatbuffers.Builder, timestampUtc:flatbuffers.Long) {
  builder.addFieldInt64(3, timestampUtc, builder.createLong(0, 0));
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset powerOffset
 */
static addPower(builder:flatbuffers.Builder, powerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, powerOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean populated
 */
static addPopulated(builder:flatbuffers.Builder, populated:boolean) {
  builder.addFieldInt8(5, +populated, +true);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean needsPermit
 */
static addNeedsPermit(builder:flatbuffers.Builder, needsPermit:boolean) {
  builder.addFieldInt8(6, +needsPermit, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param gomschema.SecurityLevel security
 */
static addSecurity(builder:flatbuffers.Builder, security:gomschema.SecurityLevel) {
  builder.addFieldInt8(7, security, gomschema.SecurityLevel.Medium);
};

/**
 * @param flatbuffers.Builder builder
 * @param gomschema.Government governmentId
 */
static addGovernmentId(builder:flatbuffers.Builder, governmentId:gomschema.Government) {
  builder.addFieldInt8(8, governmentId, gomschema.Government.Corporate);
};

/**
 * @param flatbuffers.Builder builder
 * @param gomschema.Allegiance allegianceId
 */
static addAllegianceId(builder:flatbuffers.Builder, allegianceId:gomschema.Allegiance) {
  builder.addFieldInt8(9, allegianceId, gomschema.Allegiance.Independent);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Long edAddress
 */
static addEdAddress(builder:flatbuffers.Builder, edAddress:flatbuffers.Long) {
  builder.addFieldInt64(10, edAddress, builder.createLong(0, 0));
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset facilitiesOffset
 */
static addFacilities(builder:flatbuffers.Builder, facilitiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, facilitiesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createFacilitiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startFacilitiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endSystem(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createSystem(builder:flatbuffers.Builder, systemId:number, nameOffset:flatbuffers.Offset, positionOffset:flatbuffers.Offset, timestampUtc:flatbuffers.Long, powerOffset:flatbuffers.Offset, populated:boolean, needsPermit:boolean, security:gomschema.SecurityLevel, governmentId:gomschema.Government, allegianceId:gomschema.Allegiance, edAddress:flatbuffers.Long, facilitiesOffset:flatbuffers.Offset):flatbuffers.Offset {
  System.startSystem(builder);
  System.addSystemId(builder, systemId);
  System.addName(builder, nameOffset);
  System.addPosition(builder, positionOffset);
  System.addTimestampUtc(builder, timestampUtc);
  System.addPower(builder, powerOffset);
  System.addPopulated(builder, populated);
  System.addNeedsPermit(builder, needsPermit);
  System.addSecurity(builder, security);
  System.addGovernmentId(builder, governmentId);
  System.addAllegianceId(builder, allegianceId);
  System.addEdAddress(builder, edAddress);
  System.addFacilities(builder, facilitiesOffset);
  return System.endSystem(builder);
}
}
}
/**
 * Encapsulation of all the data.
 *
 * @constructor
 */
export namespace gomschema{
export class Galaxy {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Galaxy
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Galaxy {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Galaxy= obj
 * @returns Galaxy
 */
static getRootAsGalaxy(bb:flatbuffers.ByteBuffer, obj?:Galaxy):Galaxy {
  return (obj || new Galaxy).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @returns boolean
 */
static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('gomd');
};

/**
 * Semantically-versioned schema id.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
schemaVersion():string|null
schemaVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
schemaVersion(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Human-friendly description of what is enclosed, e.g "import from source X" or
 * "complete local database". Entirely descriptive.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * Human-friendly attributition, if relevant.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
attribution():string|null
attribution(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
attribution(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * UTC Unix time of generation.
 *
 * @returns flatbuffers.Long
 */
timestampUtc():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * @param flatbuffers.Long value
 * @returns boolean
 */
mutate_timestamp_utc(value:flatbuffers.Long):boolean {
  var offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
};

/**
 * Items recognized by this data.
 *
 * @param number index
 * @param gomschema.Commodity= obj
 * @returns gomschema.Commodity
 */
commodities(index: number, obj?:gomschema.Commodity):gomschema.Commodity|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new gomschema.Commodity).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
commoditiesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * Systems recognized by this data (presence of facilities optional).
 *
 * @param number index
 * @param gomschema.System= obj
 * @returns gomschema.System
 */
systems(index: number, obj?:gomschema.System):gomschema.System|null {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new gomschema.System).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
systemsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * Fields reserved for any user-specific notes.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
userData():string|null
userData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userData(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * 3rd-party application values that prefer .ini format.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
iniData():string|null
iniData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
iniData(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * 3rd-party application values that prefer .json format.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
jsonData():string|null
jsonData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
jsonData(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * 3rd-party application values that prefer .yaml because they hate life.
 *
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
yamlData():string|null
yamlData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
yamlData(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startGalaxy(builder:flatbuffers.Builder) {
  builder.startObject(10);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset schemaVersionOffset
 */
static addSchemaVersion(builder:flatbuffers.Builder, schemaVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, schemaVersionOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset descriptionOffset
 */
static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, descriptionOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset attributionOffset
 */
static addAttribution(builder:flatbuffers.Builder, attributionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, attributionOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Long timestampUtc
 */
static addTimestampUtc(builder:flatbuffers.Builder, timestampUtc:flatbuffers.Long) {
  builder.addFieldInt64(3, timestampUtc, builder.createLong(0, 0));
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset commoditiesOffset
 */
static addCommodities(builder:flatbuffers.Builder, commoditiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, commoditiesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createCommoditiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startCommoditiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset systemsOffset
 */
static addSystems(builder:flatbuffers.Builder, systemsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, systemsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createSystemsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startSystemsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset userDataOffset
 */
static addUserData(builder:flatbuffers.Builder, userDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, userDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset iniDataOffset
 */
static addIniData(builder:flatbuffers.Builder, iniDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, iniDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset jsonDataOffset
 */
static addJsonData(builder:flatbuffers.Builder, jsonDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, jsonDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset yamlDataOffset
 */
static addYamlData(builder:flatbuffers.Builder, yamlDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, yamlDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endGalaxy(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishGalaxyBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'gomd');
};

static createGalaxy(builder:flatbuffers.Builder, schemaVersionOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, attributionOffset:flatbuffers.Offset, timestampUtc:flatbuffers.Long, commoditiesOffset:flatbuffers.Offset, systemsOffset:flatbuffers.Offset, userDataOffset:flatbuffers.Offset, iniDataOffset:flatbuffers.Offset, jsonDataOffset:flatbuffers.Offset, yamlDataOffset:flatbuffers.Offset):flatbuffers.Offset {
  Galaxy.startGalaxy(builder);
  Galaxy.addSchemaVersion(builder, schemaVersionOffset);
  Galaxy.addDescription(builder, descriptionOffset);
  Galaxy.addAttribution(builder, attributionOffset);
  Galaxy.addTimestampUtc(builder, timestampUtc);
  Galaxy.addCommodities(builder, commoditiesOffset);
  Galaxy.addSystems(builder, systemsOffset);
  Galaxy.addUserData(builder, userDataOffset);
  Galaxy.addIniData(builder, iniDataOffset);
  Galaxy.addJsonData(builder, jsonDataOffset);
  Galaxy.addYamlData(builder, yamlDataOffset);
  return Galaxy.endGalaxy(builder);
}
}
}
