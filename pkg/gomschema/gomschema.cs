// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace gomschema
{

using global::System;
using global::FlatBuffers;


import javax.annotation.Nullable;
/// Government is an enumeration of government types reduced to a single field.
public enum Government : sbyte
{
 None = 0,
 Anarchy = 1,
 Communism = 2,
 Confederacy = 3,
 ooperative = 4,
 Corporate = 5,
 emocracy = 6,
 Dictatorship = 7,
 Feudal = 8,
 Patronage = 9,
 Prison = 10,
 PrisonColony = 11,
 Theocracy = 12,
};

/// Allegiance is an enumeration of allegiance types reduced to a single field.
public enum Allegiance : sbyte
{
 None = 0,
 Alliance = 1,
 Empire = 2,
 Federation = 3,
 Independent = 4,
 PilotsFederation = 5,
};

/// Security level is system-specific and determines how aggressive law enforcement is.
public enum SecurityLevel : sbyte
{
 None = 0,
 Anarchy = 1,
 Low = 2,
 Medium = 3,
 High = 4,
};

public enum FacilityType : sbyte
{
 None = 0,
 CivilianOutpost = 1,
 CommercialOutpost = 2,
 CoriolisStarport = 3,
 IndustrialOutpost = 4,
 MilitaryOutpost = 5,
 MiningOutpost = 6,
 OcellusStarport = 7,
 OrbisStarport = 8,
 ScientificOutpost = 9,
 PlanetaryOutpost = 10,
 PlanetaryPort = 11,
 PlanetarySettlement = 12,
 Megaship = 13,
 AsteroidBase = 14,
 FleetCarrier = 15,
};

public enum LandingPad : sbyte
{
 None = 0,
 Small = 1,
 Medium = 2,
 Large = 3,
};

public enum CommodityType : sbyte
{
 None = 0,
 Chemicals = 1,
 ConsumerItems = 2,
 LegalDrugs = 3,
 Foods = 4,
 IndustrialMaterials = 5,
 Machinery = 6,
 Medicines = 7,
 Metals = 8,
 Minerals = 9,
 Slavery = 10,
 Technology = 11,
 Textiles = 12,
 Waste = 13,
 Weapons = 14,
 Unknown = 15,
 Salvage = 16,
};

/// Commodity is a type of item that can be traded within the game. At the moment,
/// the categories are small enough I decided to just enumerate them right here.
public struct Commodity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Commodity GetRootAsCommodity(ByteBuffer _bb) { return GetRootAsCommodity(_bb, new Commodity()); }
  public static Commodity GetRootAsCommodity(ByteBuffer _bb, Commodity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Commodity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Elite Dangerous' internal ID for the commodity acts as the key.
  public ulong CommodityId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MutateCommodityId(ulong commodity_id) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutUlong(o + __p.bb_pos, commodity_id); return true; } else { return false; } }
  /// Name can be localized as long as the English name is preserved for hashing.
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  /// What type of item is this.
  public CommodityType CategoryId { get { int o = __p.__offset(8); return o != 0 ? (CommodityType)__p.bb.GetSbyte(o + __p.bb_pos) : CommodityType.None; } }
  public bool MutateCategoryId(CommodityType category_id) { int o = __p.__offset(8); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, (sbyte)category_id); return true; } else { return false; } }
  /// Whether the item is known to be rare.
  public bool IsRare { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateIsRare(bool is_rare) { int o = __p.__offset(10); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(is_rare ? 1 : 0)); return true; } else { return false; } }
  /// Whether the item is known to be marketable.
  public bool IsNonMarketable { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateIsNonMarketable(bool is_non_marketable) { int o = __p.__offset(12); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(is_non_marketable ? 1 : 0)); return true; } else { return false; } }
  /// The average galactic market price in credits.
  public uint AverageCr { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool MutateAverageCr(uint average_cr) { int o = __p.__offset(14); if (o != 0) { __p.bb.PutUint(o + __p.bb_pos, average_cr); return true; } else { return false; } }

  public static Offset<Commodity> CreateCommodity(FlatBufferBuilder builder,
      ulong commodity_id = 0,
      StringOffset nameOffset = default(StringOffset),
      CommodityType category_id = CommodityType.None,
      bool is_rare = false,
      bool is_non_marketable = false,
      uint average_cr = 0) {
    builder.StartObject(6);
    Commodity.AddCommodityId(builder, commodity_id);
    Commodity.AddAverageCr(builder, average_cr);
    Commodity.AddName(builder, nameOffset);
    Commodity.AddIsNonMarketable(builder, is_non_marketable);
    Commodity.AddIsRare(builder, is_rare);
    Commodity.AddCategoryId(builder, category_id);
    return Commodity.EndCommodity(builder);
  }

  public static void StartCommodity(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddCommodityId(FlatBufferBuilder builder, ulong commodityId) { builder.AddUlong(0, commodityId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddCategoryId(FlatBufferBuilder builder, CommodityType categoryId) { builder.AddSbyte(2, (sbyte)categoryId, 0); }
  public static void AddIsRare(FlatBufferBuilder builder, bool isRare) { builder.AddBool(3, isRare, false); }
  public static void AddIsNonMarketable(FlatBufferBuilder builder, bool isNonMarketable) { builder.AddBool(4, isNonMarketable, false); }
  public static void AddAverageCr(FlatBufferBuilder builder, uint averageCr) { builder.AddUint(5, averageCr, 0); }
  public static Offset<Commodity> EndCommodity(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Commodity>(o);
  }

  public static VectorOffset CreateSortedVectorOfCommodity(FlatBufferBuilder builder, Offset<Commodity>[] offsets) {
    Array.Sort(offsets, (Offset<Commodity> o1, Offset<Commodity> o2) => builder.DataBuffer.GetUlong(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBuffer.GetUlong(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Commodity? __lookup_by_key(int vectorLocation, ulong key, ByteBuffer bb) {
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = bb.GetUlong(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Commodity().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

/// Trade is a discrete entry for a Commodity that is or can be traded at with
/// a number of units and a value.
public struct Trade : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Trade __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Which commodity this describes.
  public ulong CommodityId { get { return __p.bb.GetUlong(__p.bb_pos + 0); } }
  public void MutateCommodityId(ulong commodity_id) { __p.bb.PutUlong(__p.bb_pos + 0, commodity_id); }
  /// How many units
  public uint Units { get { return __p.bb.GetUint(__p.bb_pos + 8); } }
  public void MutateUnits(uint units) { __p.bb.PutUint(__p.bb_pos + 8, units); }
  /// How many credits
  public ushort Credits { get { return __p.bb.GetUshort(__p.bb_pos + 12); } }
  public void MutateCredits(ushort credits) { __p.bb.PutUshort(__p.bb_pos + 12, credits); }
  /// Unix timestamp UTC.
  public ulong TimestampUtc { get { return __p.bb.GetUlong(__p.bb_pos + 16); } }
  public void MutateTimestampUtc(ulong timestamp_utc) { __p.bb.PutUlong(__p.bb_pos + 16, timestamp_utc); }

  public static Offset<Trade> CreateTrade(FlatBufferBuilder builder, ulong CommodityId, uint Units, ushort Credits, ulong TimestampUtc) {
    builder.Prep(8, 24);
    builder.PutUlong(TimestampUtc);
    builder.Pad(2);
    builder.PutUshort(Credits);
    builder.PutUint(Units);
    builder.PutUlong(CommodityId);
    return new Offset<Trade>(builder.Offset);
  }
};

public struct FacilityListing : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FacilityListing GetRootAsFacilityListing(ByteBuffer _bb) { return GetRootAsFacilityListing(_bb, new FacilityListing()); }
  public static FacilityListing GetRootAsFacilityListing(ByteBuffer _bb, FacilityListing obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FacilityListing __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Commodities this facility sells.
  public Trade? Supply(int j) { int o = __p.__offset(4); return o != 0 ? (Trade?)(new Trade()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int SupplyLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Commodities this facility buys.
  public Trade? Demand(int j) { int o = __p.__offset(6); return o != 0 ? (Trade?)(new Trade()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int DemandLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FacilityListing> CreateFacilityListing(FlatBufferBuilder builder,
      VectorOffset supplyOffset = default(VectorOffset),
      VectorOffset demandOffset = default(VectorOffset)) {
    builder.StartObject(2);
    FacilityListing.AddDemand(builder, demandOffset);
    FacilityListing.AddSupply(builder, supplyOffset);
    return FacilityListing.EndFacilityListing(builder);
  }

  public static void StartFacilityListing(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddSupply(FlatBufferBuilder builder, VectorOffset supplyOffset) { builder.AddOffset(0, supplyOffset.Value, 0); }
  public static void StartSupplyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 8); }
  public static void AddDemand(FlatBufferBuilder builder, VectorOffset demandOffset) { builder.AddOffset(1, demandOffset.Value, 0); }
  public static void StartDemandVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 8); }
  public static Offset<FacilityListing> EndFacilityListing(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FacilityListing>(o);
  }
};

/// Facility represents a static, dockable entity within the game such as a station or planetary base.
/// Instead of assigning stations their own unique IDs, we produce an fnv1a_32 hash of the system name
/// and the station name.
public struct Facility : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Facility GetRootAsFacility(ByteBuffer _bb) { return GetRootAsFacility(_bb, new Facility()); }
  public static Facility GetRootAsFacility(ByteBuffer _bb, Facility obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Facility __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// "{upper system name}@{facility name upper}"
  public uint FacilityId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool MutateFacilityId(uint facility_id) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutUint(o + __p.bb_pos, facility_id); return true; } else { return false; } }
  /// Hash of the all-upper name of the system.
  public uint SystemId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool MutateSystemId(uint system_id) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutUint(o + __p.bb_pos, system_id); return true; } else { return false; } }
  /// Name of the facility itself.
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  /// Unix timestamp UTC of last update.
  public ulong TimestampUtc { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MutateTimestampUtc(ulong timestamp_utc) { int o = __p.__offset(10); if (o != 0) { __p.bb.PutUlong(o + __p.bb_pos, timestamp_utc); return true; } else { return false; } }
  /// Optional facility type.
  public FacilityType FacilityType { get { int o = __p.__offset(12); return o != 0 ? (FacilityType)__p.bb.GetSbyte(o + __p.bb_pos) : FacilityType.None; } }
  public bool MutateFacilityType(FacilityType facility_type) { int o = __p.__offset(12); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, (sbyte)facility_type); return true; } else { return false; } }
  /// Does it have an accessible trade market.
  public bool HasMarket { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutateHasMarket(bool has_market) { int o = __p.__offset(14); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(has_market ? 1 : 0)); return true; } else { return false; } }
  /// Does it have a black market.
  public bool HasBlackMarket { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateHasBlackMarket(bool has_black_market) { int o = __p.__offset(16); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(has_black_market ? 1 : 0)); return true; } else { return false; } }
  /// Can it refuel.
  public bool HasRefuel { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutateHasRefuel(bool has_refuel) { int o = __p.__offset(18); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(has_refuel ? 1 : 0)); return true; } else { return false; } }
  /// Can it repair.
  public bool HasRepair { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutateHasRepair(bool has_repair) { int o = __p.__offset(20); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(has_repair ? 1 : 0)); return true; } else { return false; } }
  /// Can it re-arm.
  public bool HasRearm { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutateHasRearm(bool has_rearm) { int o = __p.__offset(22); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(has_rearm ? 1 : 0)); return true; } else { return false; } }
  /// Does it sell/upgrade ship components.
  public bool HasOutfitting { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutateHasOutfitting(bool has_outfitting) { int o = __p.__offset(24); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(has_outfitting ? 1 : 0)); return true; } else { return false; } }
  /// Can you buy ships here.
  public bool HasShipyard { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateHasShipyard(bool has_shipyard) { int o = __p.__offset(26); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(has_shipyard ? 1 : 0)); return true; } else { return false; } }
  /// Can you dock here (this is taken from EDDB and might be redundant).
  public bool HasDocking { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutateHasDocking(bool has_docking) { int o = __p.__offset(28); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(has_docking ? 1 : 0)); return true; } else { return false; } }
  /// Does the market have regular trading commodities available.
  public bool HasCommodities { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutateHasCommodities(bool has_commodities) { int o = __p.__offset(30); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(has_commodities ? 1 : 0)); return true; } else { return false; } }
  /// Is it on a planet.
  public bool IsPlanetary { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateIsPlanetary(bool is_planetary) { int o = __p.__offset(32); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(is_planetary ? 1 : 0)); return true; } else { return false; } }
  /// Distance from the facility to the entry point in the system.
  public uint LsToStar { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool MutateLsToStar(uint ls_to_star) { int o = __p.__offset(34); if (o != 0) { __p.bb.PutUint(o + __p.bb_pos, ls_to_star); return true; } else { return false; } }
  /// The governance of this station. If not present, assume system's government.
  public Government Government { get { int o = __p.__offset(36); return o != 0 ? (Government)__p.bb.GetSbyte(o + __p.bb_pos) : Government.Corporate; } }
  public bool MutateGovernment(Government government) { int o = __p.__offset(36); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, (sbyte)government); return true; } else { return false; } }
  /// The allegiance of this station. If not present, assume system's allegiance.
  public Allegiance Allegiance { get { int o = __p.__offset(38); return o != 0 ? (Allegiance)__p.bb.GetSbyte(o + __p.bb_pos) : Allegiance.Independent; } }
  public bool MutateAllegiance(Allegiance allegiance) { int o = __p.__offset(38); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, (sbyte)allegiance); return true; } else { return false; } }
  /// Presumably the internal ED identifier for the market here.
  public ulong EdMarketId { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MutateEdMarketId(ulong ed_market_id) { int o = __p.__offset(40); if (o != 0) { __p.bb.PutUlong(o + __p.bb_pos, ed_market_id); return true; } else { return false; } }
  /// Items available for sale/purchase.
  public FacilityListing? Trades(int j) { int o = __p.__offset(42); return o != 0 ? (FacilityListing?)(new FacilityListing()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TradesLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Facility> CreateFacility(FlatBufferBuilder builder,
      uint facility_id = 0,
      uint system_id = 0,
      StringOffset nameOffset = default(StringOffset),
      ulong timestamp_utc = 0,
      FacilityType facility_type = FacilityType.None,
      bool has_market = true,
      bool has_black_market = false,
      bool has_refuel = true,
      bool has_repair = true,
      bool has_rearm = true,
      bool has_outfitting = true,
      bool has_shipyard = false,
      bool has_docking = true,
      bool has_commodities = true,
      bool is_planetary = false,
      uint ls_to_star = 0,
      Government government = Government.Corporate,
      Allegiance allegiance = Allegiance.Independent,
      ulong ed_market_id = 0,
      VectorOffset tradesOffset = default(VectorOffset)) {
    builder.StartObject(20);
    Facility.AddEdMarketId(builder, ed_market_id);
    Facility.AddTimestampUtc(builder, timestamp_utc);
    Facility.AddTrades(builder, tradesOffset);
    Facility.AddLsToStar(builder, ls_to_star);
    Facility.AddName(builder, nameOffset);
    Facility.AddSystemId(builder, system_id);
    Facility.AddFacilityId(builder, facility_id);
    Facility.AddAllegiance(builder, allegiance);
    Facility.AddGovernment(builder, government);
    Facility.AddIsPlanetary(builder, is_planetary);
    Facility.AddHasCommodities(builder, has_commodities);
    Facility.AddHasDocking(builder, has_docking);
    Facility.AddHasShipyard(builder, has_shipyard);
    Facility.AddHasOutfitting(builder, has_outfitting);
    Facility.AddHasRearm(builder, has_rearm);
    Facility.AddHasRepair(builder, has_repair);
    Facility.AddHasRefuel(builder, has_refuel);
    Facility.AddHasBlackMarket(builder, has_black_market);
    Facility.AddHasMarket(builder, has_market);
    Facility.AddFacilityType(builder, facility_type);
    return Facility.EndFacility(builder);
  }

  public static void StartFacility(FlatBufferBuilder builder) { builder.StartObject(20); }
  public static void AddFacilityId(FlatBufferBuilder builder, uint facilityId) { builder.AddUint(0, facilityId, 0); }
  public static void AddSystemId(FlatBufferBuilder builder, uint systemId) { builder.AddUint(1, systemId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddTimestampUtc(FlatBufferBuilder builder, ulong timestampUtc) { builder.AddUlong(3, timestampUtc, 0); }
  public static void AddFacilityType(FlatBufferBuilder builder, FacilityType facilityType) { builder.AddSbyte(4, (sbyte)facilityType, 0); }
  public static void AddHasMarket(FlatBufferBuilder builder, bool hasMarket) { builder.AddBool(5, hasMarket, true); }
  public static void AddHasBlackMarket(FlatBufferBuilder builder, bool hasBlackMarket) { builder.AddBool(6, hasBlackMarket, false); }
  public static void AddHasRefuel(FlatBufferBuilder builder, bool hasRefuel) { builder.AddBool(7, hasRefuel, true); }
  public static void AddHasRepair(FlatBufferBuilder builder, bool hasRepair) { builder.AddBool(8, hasRepair, true); }
  public static void AddHasRearm(FlatBufferBuilder builder, bool hasRearm) { builder.AddBool(9, hasRearm, true); }
  public static void AddHasOutfitting(FlatBufferBuilder builder, bool hasOutfitting) { builder.AddBool(10, hasOutfitting, true); }
  public static void AddHasShipyard(FlatBufferBuilder builder, bool hasShipyard) { builder.AddBool(11, hasShipyard, false); }
  public static void AddHasDocking(FlatBufferBuilder builder, bool hasDocking) { builder.AddBool(12, hasDocking, true); }
  public static void AddHasCommodities(FlatBufferBuilder builder, bool hasCommodities) { builder.AddBool(13, hasCommodities, true); }
  public static void AddIsPlanetary(FlatBufferBuilder builder, bool isPlanetary) { builder.AddBool(14, isPlanetary, false); }
  public static void AddLsToStar(FlatBufferBuilder builder, uint lsToStar) { builder.AddUint(15, lsToStar, 0); }
  public static void AddGovernment(FlatBufferBuilder builder, Government government) { builder.AddSbyte(16, (sbyte)government, 5); }
  public static void AddAllegiance(FlatBufferBuilder builder, Allegiance allegiance) { builder.AddSbyte(17, (sbyte)allegiance, 4); }
  public static void AddEdMarketId(FlatBufferBuilder builder, ulong edMarketId) { builder.AddUlong(18, edMarketId, 0); }
  public static void AddTrades(FlatBufferBuilder builder, VectorOffset tradesOffset) { builder.AddOffset(19, tradesOffset.Value, 0); }
  public static VectorOffset CreateTradesVector(FlatBufferBuilder builder, Offset<FacilityListing>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTradesVectorBlock(FlatBufferBuilder builder, Offset<FacilityListing>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTradesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Facility> EndFacility(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Facility>(o);
  }

  public static VectorOffset CreateSortedVectorOfFacility(FlatBufferBuilder builder, Offset<Facility>[] offsets) {
    Array.Sort(offsets, (Offset<Facility> o1, Offset<Facility> o2) => builder.DataBuffer.GetUint(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBuffer.GetUint(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Facility? __lookup_by_key(int vectorLocation, uint key, ByteBuffer bb) {
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = bb.GetUint(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Facility().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

/// Galactic coordinate for a system.
public struct Coordinate : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Coordinate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double X { get { return __p.bb.GetDouble(__p.bb_pos + 0); } }
  public void MutateX(double x) { __p.bb.PutDouble(__p.bb_pos + 0, x); }
  public double Y { get { return __p.bb.GetDouble(__p.bb_pos + 8); } }
  public void MutateY(double y) { __p.bb.PutDouble(__p.bb_pos + 8, y); }
  public double Z { get { return __p.bb.GetDouble(__p.bb_pos + 16); } }
  public void MutateZ(double z) { __p.bb.PutDouble(__p.bb_pos + 16, z); }

  public static Offset<Coordinate> CreateCoordinate(FlatBufferBuilder builder, double X, double Y, double Z) {
    builder.Prep(8, 24);
    builder.PutDouble(Z);
    builder.PutDouble(Y);
    builder.PutDouble(X);
    return new Offset<Coordinate>(builder.Offset);
  }
};

/// System corresponds to an individual Elite-Dangerous star system, akin to a map.
public struct System : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static System GetRootAsSystem(ByteBuffer _bb) { return GetRootAsSystem(_bb, new System()); }
  public static System GetRootAsSystem(ByteBuffer _bb, System obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public System __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// System ID is it's upper-cased name hashed via fnv1a.
  public uint SystemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool MutateSystemId(uint system_id) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutUint(o + __p.bb_pos, system_id); return true; } else { return false; } }
  /// Unique name of the system.
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  /// Position in the galaxy.
  public Coordinate? Position { get { int o = __p.__offset(8); return o != 0 ? (Coordinate?)(new Coordinate()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// Timestamp of the last update to this entry UTC.
  public ulong TimestampUtc { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MutateTimestampUtc(ulong timestamp_utc) { int o = __p.__offset(10); if (o != 0) { __p.bb.PutUlong(o + __p.bb_pos, timestamp_utc); return true; } else { return false; } }
  public string Power { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPowerBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetPowerBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPowerArray() { return __p.__vector_as_array<byte>(12); }
  /// Whether anyone lives here.
  public bool Populated { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutatePopulated(bool populated) { int o = __p.__offset(14); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(populated ? 1 : 0)); return true; } else { return false; } }
  /// Whether a permit is required to enter the systme.
  public bool NeedsPermit { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateNeedsPermit(bool needs_permit) { int o = __p.__offset(16); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(needs_permit ? 1 : 0)); return true; } else { return false; } }
  /// Law-Enforcement level of the system.
  public SecurityLevel Security { get { int o = __p.__offset(18); return o != 0 ? (SecurityLevel)__p.bb.GetSbyte(o + __p.bb_pos) : SecurityLevel.Medium; } }
  public bool MutateSecurity(SecurityLevel security) { int o = __p.__offset(18); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, (sbyte)security); return true; } else { return false; } }
  /// What is the government for the system.
  public Government GovernmentId { get { int o = __p.__offset(20); return o != 0 ? (Government)__p.bb.GetSbyte(o + __p.bb_pos) : Government.Corporate; } }
  public bool MutateGovernmentId(Government government_id) { int o = __p.__offset(20); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, (sbyte)government_id); return true; } else { return false; } }
  /// Which faction is the system allied to.
  public Allegiance AllegianceId { get { int o = __p.__offset(22); return o != 0 ? (Allegiance)__p.bb.GetSbyte(o + __p.bb_pos) : Allegiance.Independent; } }
  public bool MutateAllegianceId(Allegiance allegiance_id) { int o = __p.__offset(22); if (o != 0) { __p.bb.PutSbyte(o + __p.bb_pos, (sbyte)allegiance_id); return true; } else { return false; } }
  /// Guess: Elite Dangerous Internal ID
  public ulong EdAddress { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MutateEdAddress(ulong ed_address) { int o = __p.__offset(24); if (o != 0) { __p.bb.PutUlong(o + __p.bb_pos, ed_address); return true; } else { return false; } }
  /// Facilities in this system.
  public Facility? Facilities(int j) { int o = __p.__offset(26); return o != 0 ? (Facility?)(new Facility()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FacilitiesLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Facility? FacilitiesByKey(uint key) { int o = __p.__offset(26); return o != 0 ? Facility.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static void StartSystem(FlatBufferBuilder builder) { builder.StartObject(12); }
  public static void AddSystemId(FlatBufferBuilder builder, uint systemId) { builder.AddUint(0, systemId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Coordinate> positionOffset) { builder.AddStruct(2, positionOffset.Value, 0); }
  public static void AddTimestampUtc(FlatBufferBuilder builder, ulong timestampUtc) { builder.AddUlong(3, timestampUtc, 0); }
  public static void AddPower(FlatBufferBuilder builder, StringOffset powerOffset) { builder.AddOffset(4, powerOffset.Value, 0); }
  public static void AddPopulated(FlatBufferBuilder builder, bool populated) { builder.AddBool(5, populated, true); }
  public static void AddNeedsPermit(FlatBufferBuilder builder, bool needsPermit) { builder.AddBool(6, needsPermit, false); }
  public static void AddSecurity(FlatBufferBuilder builder, SecurityLevel security) { builder.AddSbyte(7, (sbyte)security, 3); }
  public static void AddGovernmentId(FlatBufferBuilder builder, Government governmentId) { builder.AddSbyte(8, (sbyte)governmentId, 5); }
  public static void AddAllegianceId(FlatBufferBuilder builder, Allegiance allegianceId) { builder.AddSbyte(9, (sbyte)allegianceId, 4); }
  public static void AddEdAddress(FlatBufferBuilder builder, ulong edAddress) { builder.AddUlong(10, edAddress, 0); }
  public static void AddFacilities(FlatBufferBuilder builder, VectorOffset facilitiesOffset) { builder.AddOffset(11, facilitiesOffset.Value, 0); }
  public static VectorOffset CreateFacilitiesVector(FlatBufferBuilder builder, Offset<Facility>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFacilitiesVectorBlock(FlatBufferBuilder builder, Offset<Facility>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFacilitiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<System> EndSystem(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<System>(o);
  }

  public static VectorOffset CreateSortedVectorOfSystem(FlatBufferBuilder builder, Offset<System>[] offsets) {
    Array.Sort(offsets, (Offset<System> o1, Offset<System> o2) => builder.DataBuffer.GetUint(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBuffer.GetUint(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static System? __lookup_by_key(int vectorLocation, uint key, ByteBuffer bb) {
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = bb.GetUint(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new System().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};

/// Encapsulation of all the data.
public struct Galaxy : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Galaxy GetRootAsGalaxy(ByteBuffer _bb) { return GetRootAsGalaxy(_bb, new Galaxy()); }
  public static Galaxy GetRootAsGalaxy(ByteBuffer _bb, Galaxy obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool GalaxyBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "gomd"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Galaxy __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Semantically-versioned schema id.
  public string SchemaVersion { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSchemaVersionBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetSchemaVersionBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSchemaVersionArray() { return __p.__vector_as_array<byte>(4); }
  /// Human-friendly description of what is enclosed, e.g "import from source X" or
  /// "complete local database". Entirely descriptive.
  public string Description { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(6); }
  /// Human-friendly attributition, if relevant.
  public string Attribution { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAttributionBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetAttributionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAttributionArray() { return __p.__vector_as_array<byte>(8); }
  /// UTC Unix time of generation.
  public ulong TimestampUtc { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public bool MutateTimestampUtc(ulong timestamp_utc) { int o = __p.__offset(10); if (o != 0) { __p.bb.PutUlong(o + __p.bb_pos, timestamp_utc); return true; } else { return false; } }
  /// Items recognized by this data.
  public Commodity? Commodities(int j) { int o = __p.__offset(12); return o != 0 ? (Commodity?)(new Commodity()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CommoditiesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Commodity? CommoditiesByKey(ulong key) { int o = __p.__offset(12); return o != 0 ? Commodity.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  /// Systems recognized by this data (presence of facilities optional).
  public System? Systems(int j) { int o = __p.__offset(14); return o != 0 ? (System?)(new System()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SystemsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public System? SystemsByKey(uint key) { int o = __p.__offset(14); return o != 0 ? System.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  /// Fields reserved for any user-specific notes.
  public string UserData { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUserDataBytes() { return __p.__vector_as_span(16); }
#else
  public ArraySegment<byte>? GetUserDataBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetUserDataArray() { return __p.__vector_as_array<byte>(16); }
  /// 3rd-party application values that prefer .ini format.
  public string IniData { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIniDataBytes() { return __p.__vector_as_span(18); }
#else
  public ArraySegment<byte>? GetIniDataBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIniDataArray() { return __p.__vector_as_array<byte>(18); }
  /// 3rd-party application values that prefer .json format.
  public string JsonData { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJsonDataBytes() { return __p.__vector_as_span(20); }
#else
  public ArraySegment<byte>? GetJsonDataBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetJsonDataArray() { return __p.__vector_as_array<byte>(20); }
  /// 3rd-party application values that prefer .yaml because they hate life.
  public string YamlData { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetYamlDataBytes() { return __p.__vector_as_span(22); }
#else
  public ArraySegment<byte>? GetYamlDataBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetYamlDataArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<Galaxy> CreateGalaxy(FlatBufferBuilder builder,
      StringOffset schema_versionOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset attributionOffset = default(StringOffset),
      ulong timestamp_utc = 0,
      VectorOffset commoditiesOffset = default(VectorOffset),
      VectorOffset systemsOffset = default(VectorOffset),
      StringOffset user_dataOffset = default(StringOffset),
      StringOffset ini_dataOffset = default(StringOffset),
      StringOffset json_dataOffset = default(StringOffset),
      StringOffset yaml_dataOffset = default(StringOffset)) {
    builder.StartObject(10);
    Galaxy.AddTimestampUtc(builder, timestamp_utc);
    Galaxy.AddYamlData(builder, yaml_dataOffset);
    Galaxy.AddJsonData(builder, json_dataOffset);
    Galaxy.AddIniData(builder, ini_dataOffset);
    Galaxy.AddUserData(builder, user_dataOffset);
    Galaxy.AddSystems(builder, systemsOffset);
    Galaxy.AddCommodities(builder, commoditiesOffset);
    Galaxy.AddAttribution(builder, attributionOffset);
    Galaxy.AddDescription(builder, descriptionOffset);
    Galaxy.AddSchemaVersion(builder, schema_versionOffset);
    return Galaxy.EndGalaxy(builder);
  }

  public static void StartGalaxy(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddSchemaVersion(FlatBufferBuilder builder, StringOffset schemaVersionOffset) { builder.AddOffset(0, schemaVersionOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(1, descriptionOffset.Value, 0); }
  public static void AddAttribution(FlatBufferBuilder builder, StringOffset attributionOffset) { builder.AddOffset(2, attributionOffset.Value, 0); }
  public static void AddTimestampUtc(FlatBufferBuilder builder, ulong timestampUtc) { builder.AddUlong(3, timestampUtc, 0); }
  public static void AddCommodities(FlatBufferBuilder builder, VectorOffset commoditiesOffset) { builder.AddOffset(4, commoditiesOffset.Value, 0); }
  public static VectorOffset CreateCommoditiesVector(FlatBufferBuilder builder, Offset<Commodity>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCommoditiesVectorBlock(FlatBufferBuilder builder, Offset<Commodity>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCommoditiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSystems(FlatBufferBuilder builder, VectorOffset systemsOffset) { builder.AddOffset(5, systemsOffset.Value, 0); }
  public static VectorOffset CreateSystemsVector(FlatBufferBuilder builder, Offset<System>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSystemsVectorBlock(FlatBufferBuilder builder, Offset<System>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSystemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUserData(FlatBufferBuilder builder, StringOffset userDataOffset) { builder.AddOffset(6, userDataOffset.Value, 0); }
  public static void AddIniData(FlatBufferBuilder builder, StringOffset iniDataOffset) { builder.AddOffset(7, iniDataOffset.Value, 0); }
  public static void AddJsonData(FlatBufferBuilder builder, StringOffset jsonDataOffset) { builder.AddOffset(8, jsonDataOffset.Value, 0); }
  public static void AddYamlData(FlatBufferBuilder builder, StringOffset yamlDataOffset) { builder.AddOffset(9, yamlDataOffset.Value, 0); }
  public static Offset<Galaxy> EndGalaxy(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Galaxy>(o);
  }
  public static void FinishGalaxyBuffer(FlatBufferBuilder builder, Offset<Galaxy> offset) { builder.Finish(offset.Value, "gomd"); }
  public static void FinishSizePrefixedGalaxyBuffer(FlatBufferBuilder builder, Offset<Galaxy> offset) { builder.FinishSizePrefixed(offset.Value, "gomd"); }
};


}
