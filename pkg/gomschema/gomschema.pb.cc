// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gomschema.proto

#include "gomschema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gomschema_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gomschema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Commodity_UserdataEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gomschema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Coordinate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gomschema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Facility_UserdataEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gomschema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Header_UserdataEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gomschema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Services;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gomschema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_System_UserdataEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gomschema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Trade;
}  // namespace protobuf_gomschema_2eproto
namespace gomschema {
class Header_UserdataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header_UserdataEntry_DoNotUse>
      _instance;
} _Header_UserdataEntry_DoNotUse_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class Commodity_UserdataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Commodity_UserdataEntry_DoNotUse>
      _instance;
} _Commodity_UserdataEntry_DoNotUse_default_instance_;
class CommodityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Commodity>
      _instance;
} _Commodity_default_instance_;
class CoordinateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Coordinate>
      _instance;
} _Coordinate_default_instance_;
class System_UserdataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<System_UserdataEntry_DoNotUse>
      _instance;
} _System_UserdataEntry_DoNotUse_default_instance_;
class SystemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<System>
      _instance;
} _System_default_instance_;
class ServicesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Services>
      _instance;
} _Services_default_instance_;
class Facility_UserdataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Facility_UserdataEntry_DoNotUse>
      _instance;
} _Facility_UserdataEntry_DoNotUse_default_instance_;
class FacilityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Facility>
      _instance;
} _Facility_default_instance_;
class TradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trade>
      _instance;
} _Trade_default_instance_;
class FacilityListingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FacilityListing>
      _instance;
} _FacilityListing_default_instance_;
}  // namespace gomschema
namespace protobuf_gomschema_2eproto {
static void InitDefaultsHeader_UserdataEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_Header_UserdataEntry_DoNotUse_default_instance_;
    new (ptr) ::gomschema::Header_UserdataEntry_DoNotUse();
  }
  ::gomschema::Header_UserdataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Header_UserdataEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeader_UserdataEntry_DoNotUse}, {}};

static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_Header_default_instance_;
    new (ptr) ::gomschema::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomschema::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeader}, {
      &protobuf_gomschema_2eproto::scc_info_Header_UserdataEntry_DoNotUse.base,}};

static void InitDefaultsCommodity_UserdataEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_Commodity_UserdataEntry_DoNotUse_default_instance_;
    new (ptr) ::gomschema::Commodity_UserdataEntry_DoNotUse();
  }
  ::gomschema::Commodity_UserdataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Commodity_UserdataEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommodity_UserdataEntry_DoNotUse}, {}};

static void InitDefaultsCommodity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_Commodity_default_instance_;
    new (ptr) ::gomschema::Commodity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomschema::Commodity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Commodity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCommodity}, {
      &protobuf_gomschema_2eproto::scc_info_Commodity_UserdataEntry_DoNotUse.base,}};

static void InitDefaultsCoordinate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_Coordinate_default_instance_;
    new (ptr) ::gomschema::Coordinate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomschema::Coordinate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Coordinate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCoordinate}, {}};

static void InitDefaultsSystem_UserdataEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_System_UserdataEntry_DoNotUse_default_instance_;
    new (ptr) ::gomschema::System_UserdataEntry_DoNotUse();
  }
  ::gomschema::System_UserdataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_System_UserdataEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSystem_UserdataEntry_DoNotUse}, {}};

static void InitDefaultsSystem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_System_default_instance_;
    new (ptr) ::gomschema::System();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomschema::System::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_System =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSystem}, {
      &protobuf_gomschema_2eproto::scc_info_Coordinate.base,
      &protobuf_gomschema_2eproto::scc_info_System_UserdataEntry_DoNotUse.base,}};

static void InitDefaultsServices() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_Services_default_instance_;
    new (ptr) ::gomschema::Services();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomschema::Services::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Services =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServices}, {}};

static void InitDefaultsFacility_UserdataEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_Facility_UserdataEntry_DoNotUse_default_instance_;
    new (ptr) ::gomschema::Facility_UserdataEntry_DoNotUse();
  }
  ::gomschema::Facility_UserdataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Facility_UserdataEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFacility_UserdataEntry_DoNotUse}, {}};

static void InitDefaultsFacility() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_Facility_default_instance_;
    new (ptr) ::gomschema::Facility();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomschema::Facility::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Facility =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFacility}, {
      &protobuf_gomschema_2eproto::scc_info_Services.base,
      &protobuf_gomschema_2eproto::scc_info_Facility_UserdataEntry_DoNotUse.base,}};

static void InitDefaultsTrade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_Trade_default_instance_;
    new (ptr) ::gomschema::Trade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomschema::Trade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Trade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrade}, {}};

static void InitDefaultsFacilityListing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomschema::_FacilityListing_default_instance_;
    new (ptr) ::gomschema::FacilityListing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomschema::FacilityListing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FacilityListing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFacilityListing}, {
      &protobuf_gomschema_2eproto::scc_info_Trade.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Header_UserdataEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Commodity_UserdataEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Commodity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Coordinate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_System_UserdataEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_System.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Services.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Facility_UserdataEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Facility.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FacilityListing.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Header_UserdataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Header_UserdataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Header_UserdataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Header_UserdataEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Header, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Header, sizes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Header, userdata_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity_UserdataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity_UserdataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity_UserdataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity_UserdataEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity, commodity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity, timestamp_utc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity, is_rare_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity, is_non_marketable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity, average_cr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Commodity, userdata_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Coordinate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Coordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Coordinate, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Coordinate, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Coordinate, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System_UserdataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System_UserdataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System_UserdataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System_UserdataEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, timestamp_utc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, populated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, needs_permit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, security_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, government_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, allegiance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, ed_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::System, userdata_),
  3,
  0,
  2,
  1,
  6,
  4,
  7,
  8,
  9,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, has_market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, has_black_market_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, has_refuel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, has_repair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, has_rearm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, has_outfitting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, has_shipyard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, has_docking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, has_commodities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Services, is_planetary_),
  3,
  0,
  4,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility_UserdataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility_UserdataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility_UserdataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility_UserdataEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, system_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, timestamp_utc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, facility_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, services_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, pad_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, ls_from_star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, government_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, allegiance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, ed_market_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Facility, userdata_),
  2,
  3,
  0,
  4,
  7,
  1,
  8,
  6,
  9,
  10,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Trade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Trade, commodity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Trade, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Trade, credits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::Trade, timestamp_utc_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::FacilityListing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::FacilityListing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::FacilityListing, facility_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::FacilityListing, supply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gomschema::FacilityListing, demand_),
  0,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::gomschema::Header_UserdataEntry_DoNotUse)},
  { 9, 17, sizeof(::gomschema::Header)},
  { 20, 27, sizeof(::gomschema::Commodity_UserdataEntry_DoNotUse)},
  { 29, 42, sizeof(::gomschema::Commodity)},
  { 50, 58, sizeof(::gomschema::Coordinate)},
  { 61, 68, sizeof(::gomschema::System_UserdataEntry_DoNotUse)},
  { 70, 86, sizeof(::gomschema::System)},
  { 97, 112, sizeof(::gomschema::Services)},
  { 122, 129, sizeof(::gomschema::Facility_UserdataEntry_DoNotUse)},
  { 131, 148, sizeof(::gomschema::Facility)},
  { 160, 169, sizeof(::gomschema::Trade)},
  { 173, 181, sizeof(::gomschema::FacilityListing)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_Header_UserdataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_Commodity_UserdataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_Commodity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_Coordinate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_System_UserdataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_System_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_Services_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_Facility_UserdataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_Facility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_Trade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gomschema::_FacilityListing_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gomschema.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017gomschema.proto\022\tgomschema\"\351\001\n\006Header\022"
      "&\n\005class\030\001 \002(\0162\027.gomschema.Header.Class\022"
      "\021\n\005sizes\030\002 \003(\rB\002\020\001\0221\n\010userdata\030\003 \003(\0132\037.g"
      "omschema.Header.UserdataEntry\032/\n\rUserdat"
      "aEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"@"
      "\n\005Class\022\r\n\tCCategory\020\000\022\013\n\007CSystem\020\001\022\r\n\tC"
      "Facility\020\002\022\014\n\010CListing\020\003\"\371\004\n\tCommodity\022\024"
      "\n\014commodity_id\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\030\n\rti"
      "mestamp_utc\030\003 \001(\004:\0010\022;\n\013category_id\030\004 \002("
      "\0162&.gomschema.Commodity.CommodityCategor"
      "y\022\026\n\007is_rare\030\005 \001(\010:\005false\022 \n\021is_non_mark"
      "etable\030\006 \001(\010:\005false\022\022\n\naverage_cr\030\007 \001(\r\022"
      "4\n\010userdata\030\010 \003(\0132\".gomschema.Commodity."
      "UserdataEntry\032/\n\rUserdataEntry\022\013\n\003key\030\001 "
      "\001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\273\002\n\021CommodityCate"
      "gory\022\013\n\007CatNone\020\000\022\020\n\014CatChemicals\020\001\022\024\n\020C"
      "atConsumerItems\020\002\022\021\n\rCatLegalDrugs\020\003\022\014\n\010"
      "CatFoods\020\004\022\032\n\026CatIndustrialMaterials\020\005\022\020"
      "\n\014CatMachinery\020\006\022\020\n\014CatMedicines\020\007\022\r\n\tCa"
      "tMetals\020\010\022\017\n\013CatMinerals\020\t\022\016\n\nCatSlavery"
      "\020\n\022\021\n\rCatTechnology\020\013\022\017\n\013CatTextiles\020\014\022\014"
      "\n\010CatWaste\020\r\022\016\n\nCatWeapons\020\016\022\016\n\nCatUnkno"
      "wn\020\017\022\016\n\nCatSalvage\020\020\"-\n\nCoordinate\022\t\n\001x\030"
      "\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"\326\003\n\006System\022\n"
      "\n\002id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\030\n\rtimestamp_ut"
      "c\030\003 \001(\004:\0010\022\'\n\010position\030\004 \002(\0132\025.gomschema"
      ".Coordinate\022\027\n\tpopulated\030\005 \001(\010:\004true\022\033\n\014"
      "needs_permit\030\006 \001(\010:\005false\022@\n\016security_le"
      "vel\030\007 \001(\0162\030.gomschema.SecurityLevel:\016Sec"
      "urityMedium\022;\n\ngovernment\030\010 \001(\0162\031.gomsch"
      "ema.GovernmentType:\014GovCorporate\022\?\n\nalle"
      "giance\030\t \001(\0162\031.gomschema.AllegianceType:"
      "\020AllegIndependent\022\025\n\ned_address\030\n \001(\004:\0010"
      "\0221\n\010userdata\030\013 \003(\0132\037.gomschema.System.Us"
      "erdataEntry\032/\n\rUserdataEntry\022\013\n\003key\030\001 \001("
      "\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\217\002\n\010Services\022\030\n\nhas"
      "_market\030\001 \001(\010:\004true\022\030\n\020has_black_market\030"
      "\002 \002(\010\022\030\n\nhas_refuel\030\003 \001(\010:\004true\022\030\n\nhas_r"
      "epair\030\004 \001(\010:\004true\022\027\n\thas_rearm\030\005 \001(\010:\004tr"
      "ue\022\026\n\016has_outfitting\030\006 \002(\010\022\024\n\014has_shipya"
      "rd\030\007 \002(\010\022\031\n\013has_docking\030\010 \001(\010:\004true\022\035\n\017h"
      "as_commodities\030\t \001(\010:\004true\022\032\n\014is_planeta"
      "ry\030\n \002(\010:\004true\"\200\004\n\010Facility\022\n\n\002id\030\001 \002(\r\022"
      "\021\n\tsystem_id\030\002 \002(\r\022\014\n\004name\030\003 \002(\t\022\030\n\rtime"
      "stamp_utc\030\004 \001(\004:\0010\022B\n\rfacility_type\030\005 \001("
      "\0162\027.gomschema.FacilityType:\022FTPlanetaryO"
      "utpost\022%\n\010services\030\006 \002(\0132\023.gomschema.Ser"
      "vices\022/\n\010pad_size\030\007 \001(\0162\022.gomschema.PadS"
      "ize:\tPadMedium\022\024\n\014ls_from_star\030\010 \001(\r\022;\n\n"
      "government\030\t \001(\0162\031.gomschema.GovernmentT"
      "ype:\014GovCorporate\022\?\n\nallegiance\030\n \001(\0162\031."
      "gomschema.AllegianceType:\020AllegIndepende"
      "nt\022\027\n\014ed_market_id\030\013 \001(\004:\0010\0223\n\010userdata\030"
      "\014 \003(\0132!.gomschema.Facility.UserdataEntry"
      "\032/\n\rUserdataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
      "\002 \001(\014:\0028\001\"W\n\005Trade\022\024\n\014commodity_id\030\001 \002(\r"
      "\022\r\n\005units\030\002 \002(\r\022\017\n\007credits\030\003 \002(\005\022\030\n\rtime"
      "stamp_utc\030\004 \001(\004:\0010\"j\n\017FacilityListing\022\023\n"
      "\013facility_id\030\001 \002(\r\022 \n\006supply\030\002 \003(\0132\020.gom"
      "schema.Trade\022 \n\006demand\030\003 \003(\0132\020.gomschema"
      ".Trade*\367\001\n\016GovernmentType\022\013\n\007GovNone\020\000\022\016"
      "\n\nGovAnarchy\020\001\022\020\n\014GovCommunism\020\002\022\022\n\016GovC"
      "onfederacy\020\003\022\022\n\016GovCooperative\020\004\022\020\n\014GovC"
      "orporate\020\005\022\020\n\014GovDemocracy\020\006\022\023\n\017GovDicta"
      "torship\020\007\022\r\n\tGovFeudal\020\010\022\020\n\014GovPatronage"
      "\020\t\022\r\n\tGovPrison\020\n\022\023\n\017GovPrisonColony\020\013\022\020"
      "\n\014GovTheocracy\020\014*\211\001\n\016AllegianceType\022\r\n\tA"
      "llegNone\020\000\022\021\n\rAllegAlliance\020\001\022\017\n\013AllegEm"
      "pire\020\002\022\023\n\017AllegFederation\020\003\022\024\n\020AllegInde"
      "pendent\020\004\022\031\n\025AllegPilotsFederation\020\005*m\n\r"
      "SecurityLevel\022\020\n\014SecurityNone\020\000\022\023\n\017Secur"
      "ityAnarchy\020\001\022\017\n\013SecurityLow\020\002\022\022\n\016Securit"
      "yMedium\020\003\022\020\n\014SecurityHigh\020\004*\354\002\n\014Facility"
      "Type\022\n\n\006FTNone\020\000\022\025\n\021FTCivilianOutpost\020\001\022"
      "\027\n\023FTCommercialOutpost\020\002\022\026\n\022FTCoriolisSt"
      "arport\020\003\022\027\n\023FTIndustrialOutpost\020\004\022\025\n\021FTM"
      "ilitaryOutpost\020\005\022\023\n\017FTMiningOutpost\020\006\022\025\n"
      "\021FTOcellusStarport\020\007\022\023\n\017FTOrbisStarport\020"
      "\010\022\027\n\023FTScientificOutpost\020\t\022\026\n\022FTPlanetar"
      "yOutpost\020\n\022\023\n\017FTPlanetaryPort\020\013\022\031\n\025FTPla"
      "netarySettlement\020\014\022\016\n\nFTMegaship\020\r\022\022\n\016FT"
      "AsteroidBase\020\016\022\022\n\016FTFleetCarrier\020\017*A\n\007Pa"
      "dSize\022\013\n\007PadNone\020\000\022\014\n\010PadSmall\020\001\022\r\n\tPadM"
      "edium\020\002\022\014\n\010PadLarge\020\003B\020\n\001.Z\013.;gomschema"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gomschema.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gomschema_2eproto
namespace gomschema {
const ::google::protobuf::EnumDescriptor* Header_Class_descriptor() {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gomschema_2eproto::file_level_enum_descriptors[0];
}
bool Header_Class_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_Class Header::CCategory;
const Header_Class Header::CSystem;
const Header_Class Header::CFacility;
const Header_Class Header::CListing;
const Header_Class Header::Class_MIN;
const Header_Class Header::Class_MAX;
const int Header::Class_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Commodity_CommodityCategory_descriptor() {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gomschema_2eproto::file_level_enum_descriptors[1];
}
bool Commodity_CommodityCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Commodity_CommodityCategory Commodity::CatNone;
const Commodity_CommodityCategory Commodity::CatChemicals;
const Commodity_CommodityCategory Commodity::CatConsumerItems;
const Commodity_CommodityCategory Commodity::CatLegalDrugs;
const Commodity_CommodityCategory Commodity::CatFoods;
const Commodity_CommodityCategory Commodity::CatIndustrialMaterials;
const Commodity_CommodityCategory Commodity::CatMachinery;
const Commodity_CommodityCategory Commodity::CatMedicines;
const Commodity_CommodityCategory Commodity::CatMetals;
const Commodity_CommodityCategory Commodity::CatMinerals;
const Commodity_CommodityCategory Commodity::CatSlavery;
const Commodity_CommodityCategory Commodity::CatTechnology;
const Commodity_CommodityCategory Commodity::CatTextiles;
const Commodity_CommodityCategory Commodity::CatWaste;
const Commodity_CommodityCategory Commodity::CatWeapons;
const Commodity_CommodityCategory Commodity::CatUnknown;
const Commodity_CommodityCategory Commodity::CatSalvage;
const Commodity_CommodityCategory Commodity::CommodityCategory_MIN;
const Commodity_CommodityCategory Commodity::CommodityCategory_MAX;
const int Commodity::CommodityCategory_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GovernmentType_descriptor() {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gomschema_2eproto::file_level_enum_descriptors[2];
}
bool GovernmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AllegianceType_descriptor() {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gomschema_2eproto::file_level_enum_descriptors[3];
}
bool AllegianceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityLevel_descriptor() {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gomschema_2eproto::file_level_enum_descriptors[4];
}
bool SecurityLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FacilityType_descriptor() {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gomschema_2eproto::file_level_enum_descriptors[5];
}
bool FacilityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PadSize_descriptor() {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gomschema_2eproto::file_level_enum_descriptors[6];
}
bool PadSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Header_UserdataEntry_DoNotUse::Header_UserdataEntry_DoNotUse() {}
Header_UserdataEntry_DoNotUse::Header_UserdataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Header_UserdataEntry_DoNotUse::MergeFrom(const Header_UserdataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Header_UserdataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[0];
}
void Header_UserdataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kClassFieldNumber;
const int Header::kSizesFieldNumber;
const int Header::kUserdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gomschema_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gomschema.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sizes_(from.sizes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userdata_.MergeFrom(from.userdata_);
  class__ = from.class__;
  // @@protoc_insertion_point(copy_constructor:gomschema.Header)
}

void Header::SharedCtor() {
  class__ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:gomschema.Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gomschema_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:gomschema.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  userdata_.Clear();
  class__ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gomschema.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gomschema.Header.Class class = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gomschema::Header_Class_IsValid(value)) {
            set_class_(static_cast< ::gomschema::Header_Class >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sizes = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sizes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> userdata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          Header_UserdataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Header_UserdataEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&userdata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gomschema.Header.UserdataEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gomschema.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gomschema.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gomschema.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gomschema.Header.Class class = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->class_(), output);
  }

  // repeated uint32 sizes = 2 [packed = true];
  if (this->sizes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sizes_cached_byte_size_));
  }
  for (int i = 0, n = this->sizes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->sizes(i), output);
  }

  // map<string, bytes> userdata = 3;
  if (!this->userdata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "gomschema.Header.UserdataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->userdata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->userdata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Header_UserdataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(userdata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Header_UserdataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it) {
        entry.reset(userdata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gomschema.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gomschema.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gomschema.Header.Class class = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->class_(), target);
  }

  // repeated uint32 sizes = 2 [packed = true];
  if (this->sizes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _sizes_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->sizes_, target);
  }

  // map<string, bytes> userdata = 3;
  if (!this->userdata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "gomschema.Header.UserdataEntry.key");
      }
    };

    if (deterministic &&
        this->userdata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->userdata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Header_UserdataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(userdata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Header_UserdataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it) {
        entry.reset(userdata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomschema.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomschema.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .gomschema.Header.Class class = 1;
  if (has_class_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->class_());
  }
  // repeated uint32 sizes = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sizes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sizes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<string, bytes> userdata = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->userdata_size());
  {
    ::std::unique_ptr<Header_UserdataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->userdata().begin();
        it != this->userdata().end(); ++it) {
      entry.reset(userdata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomschema.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomschema.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomschema.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomschema.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  userdata_.MergeFrom(from.userdata_);
  if (from.has_class_()) {
    set_class_(from.class_());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomschema.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomschema.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  sizes_.InternalSwap(&other->sizes_);
  userdata_.Swap(&other->userdata_);
  swap(class__, other->class__);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Commodity_UserdataEntry_DoNotUse::Commodity_UserdataEntry_DoNotUse() {}
Commodity_UserdataEntry_DoNotUse::Commodity_UserdataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Commodity_UserdataEntry_DoNotUse::MergeFrom(const Commodity_UserdataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Commodity_UserdataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[2];
}
void Commodity_UserdataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Commodity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Commodity::kCommodityIdFieldNumber;
const int Commodity::kNameFieldNumber;
const int Commodity::kTimestampUtcFieldNumber;
const int Commodity::kCategoryIdFieldNumber;
const int Commodity::kIsRareFieldNumber;
const int Commodity::kIsNonMarketableFieldNumber;
const int Commodity::kAverageCrFieldNumber;
const int Commodity::kUserdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Commodity::Commodity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gomschema_2eproto::scc_info_Commodity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gomschema.Commodity)
}
Commodity::Commodity(const Commodity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userdata_.MergeFrom(from.userdata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&commodity_id_, &from.commodity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&average_cr_) -
    reinterpret_cast<char*>(&commodity_id_)) + sizeof(average_cr_));
  // @@protoc_insertion_point(copy_constructor:gomschema.Commodity)
}

void Commodity::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&commodity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_cr_) -
      reinterpret_cast<char*>(&commodity_id_)) + sizeof(average_cr_));
}

Commodity::~Commodity() {
  // @@protoc_insertion_point(destructor:gomschema.Commodity)
  SharedDtor();
}

void Commodity::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Commodity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Commodity::descriptor() {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Commodity& Commodity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gomschema_2eproto::scc_info_Commodity.base);
  return *internal_default_instance();
}


void Commodity::Clear() {
// @@protoc_insertion_point(message_clear_start:gomschema.Commodity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userdata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&commodity_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&average_cr_) -
        reinterpret_cast<char*>(&commodity_id_)) + sizeof(average_cr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Commodity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gomschema.Commodity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 commodity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_commodity_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commodity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gomschema.Commodity.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_utc = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp_utc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_utc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gomschema.Commodity.CommodityCategory category_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gomschema::Commodity_CommodityCategory_IsValid(value)) {
            set_category_id(static_cast< ::gomschema::Commodity_CommodityCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rare = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_rare();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_non_marketable = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_non_marketable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_non_marketable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 average_cr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_average_cr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_cr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> userdata = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          Commodity_UserdataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Commodity_UserdataEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&userdata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gomschema.Commodity.UserdataEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gomschema.Commodity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gomschema.Commodity)
  return false;
#undef DO_
}

void Commodity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gomschema.Commodity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 commodity_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->commodity_id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gomschema.Commodity.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint64 timestamp_utc = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_utc(), output);
  }

  // required .gomschema.Commodity.CommodityCategory category_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->category_id(), output);
  }

  // optional bool is_rare = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_rare(), output);
  }

  // optional bool is_non_marketable = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_non_marketable(), output);
  }

  // optional uint32 average_cr = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->average_cr(), output);
  }

  // map<string, bytes> userdata = 8;
  if (!this->userdata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "gomschema.Commodity.UserdataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->userdata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->userdata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Commodity_UserdataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(userdata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Commodity_UserdataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it) {
        entry.reset(userdata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gomschema.Commodity)
}

::google::protobuf::uint8* Commodity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gomschema.Commodity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 commodity_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->commodity_id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gomschema.Commodity.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 timestamp_utc = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp_utc(), target);
  }

  // required .gomschema.Commodity.CommodityCategory category_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->category_id(), target);
  }

  // optional bool is_rare = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_rare(), target);
  }

  // optional bool is_non_marketable = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_non_marketable(), target);
  }

  // optional uint32 average_cr = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->average_cr(), target);
  }

  // map<string, bytes> userdata = 8;
  if (!this->userdata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "gomschema.Commodity.UserdataEntry.key");
      }
    };

    if (deterministic &&
        this->userdata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->userdata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Commodity_UserdataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(userdata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Commodity_UserdataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it) {
        entry.reset(userdata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomschema.Commodity)
  return target;
}

size_t Commodity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gomschema.Commodity)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_commodity_id()) {
    // required uint64 commodity_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commodity_id());
  }

  if (has_category_id()) {
    // required .gomschema.Commodity.CommodityCategory category_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->category_id());
  }

  return total_size;
}
size_t Commodity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomschema.Commodity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 commodity_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commodity_id());

    // required .gomschema.Commodity.CommodityCategory category_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->category_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // map<string, bytes> userdata = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->userdata_size());
  {
    ::std::unique_ptr<Commodity_UserdataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->userdata().begin();
        it != this->userdata().end(); ++it) {
      entry.reset(userdata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // optional uint64 timestamp_utc = 3 [default = 0];
  if (has_timestamp_utc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_utc());
  }

  if (_has_bits_[0 / 32] & 112u) {
    // optional bool is_rare = 5 [default = false];
    if (has_is_rare()) {
      total_size += 1 + 1;
    }

    // optional bool is_non_marketable = 6 [default = false];
    if (has_is_non_marketable()) {
      total_size += 1 + 1;
    }

    // optional uint32 average_cr = 7;
    if (has_average_cr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_cr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Commodity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomschema.Commodity)
  GOOGLE_DCHECK_NE(&from, this);
  const Commodity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Commodity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomschema.Commodity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomschema.Commodity)
    MergeFrom(*source);
  }
}

void Commodity::MergeFrom(const Commodity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomschema.Commodity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  userdata_.MergeFrom(from.userdata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      commodity_id_ = from.commodity_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_utc_ = from.timestamp_utc_;
    }
    if (cached_has_bits & 0x00000008u) {
      category_id_ = from.category_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_rare_ = from.is_rare_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_non_marketable_ = from.is_non_marketable_;
    }
    if (cached_has_bits & 0x00000040u) {
      average_cr_ = from.average_cr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Commodity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomschema.Commodity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Commodity::CopyFrom(const Commodity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomschema.Commodity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commodity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void Commodity::Swap(Commodity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Commodity::InternalSwap(Commodity* other) {
  using std::swap;
  userdata_.Swap(&other->userdata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(commodity_id_, other->commodity_id_);
  swap(timestamp_utc_, other->timestamp_utc_);
  swap(category_id_, other->category_id_);
  swap(is_rare_, other->is_rare_);
  swap(is_non_marketable_, other->is_non_marketable_);
  swap(average_cr_, other->average_cr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Commodity::GetMetadata() const {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Coordinate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Coordinate::kXFieldNumber;
const int Coordinate::kYFieldNumber;
const int Coordinate::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Coordinate::Coordinate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gomschema_2eproto::scc_info_Coordinate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gomschema.Coordinate)
}
Coordinate::Coordinate(const Coordinate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:gomschema.Coordinate)
}

void Coordinate::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Coordinate::~Coordinate() {
  // @@protoc_insertion_point(destructor:gomschema.Coordinate)
  SharedDtor();
}

void Coordinate::SharedDtor() {
}

void Coordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Coordinate::descriptor() {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Coordinate& Coordinate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gomschema_2eproto::scc_info_Coordinate.base);
  return *internal_default_instance();
}


void Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:gomschema.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gomschema.Coordinate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gomschema.Coordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gomschema.Coordinate)
  return false;
#undef DO_
}

void Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gomschema.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gomschema.Coordinate)
}

::google::protobuf::uint8* Coordinate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gomschema.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomschema.Coordinate)
  return target;
}

size_t Coordinate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gomschema.Coordinate)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomschema.Coordinate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomschema.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const Coordinate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Coordinate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomschema.Coordinate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomschema.Coordinate)
    MergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomschema.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomschema.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomschema.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Coordinate::Swap(Coordinate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Coordinate::InternalSwap(Coordinate* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Coordinate::GetMetadata() const {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

System_UserdataEntry_DoNotUse::System_UserdataEntry_DoNotUse() {}
System_UserdataEntry_DoNotUse::System_UserdataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void System_UserdataEntry_DoNotUse::MergeFrom(const System_UserdataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata System_UserdataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[5];
}
void System_UserdataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void System::InitAsDefaultInstance() {
  ::gomschema::_System_default_instance_._instance.get_mutable()->position_ = const_cast< ::gomschema::Coordinate*>(
      ::gomschema::Coordinate::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int System::kIdFieldNumber;
const int System::kNameFieldNumber;
const int System::kTimestampUtcFieldNumber;
const int System::kPositionFieldNumber;
const int System::kPopulatedFieldNumber;
const int System::kNeedsPermitFieldNumber;
const int System::kSecurityLevelFieldNumber;
const int System::kGovernmentFieldNumber;
const int System::kAllegianceFieldNumber;
const int System::kEdAddressFieldNumber;
const int System::kUserdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

System::System()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gomschema_2eproto::scc_info_System.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gomschema.System)
}
System::System(const System& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userdata_.MergeFrom(from.userdata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    position_ = new ::gomschema::Coordinate(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&timestamp_utc_, &from.timestamp_utc_,
    static_cast<size_t>(reinterpret_cast<char*>(&allegiance_) -
    reinterpret_cast<char*>(&timestamp_utc_)) + sizeof(allegiance_));
  // @@protoc_insertion_point(copy_constructor:gomschema.System)
}

void System::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ed_address_) -
      reinterpret_cast<char*>(&position_)) + sizeof(ed_address_));
  populated_ = true;
  security_level_ = 3;
  government_ = 5;
  allegiance_ = 4;
}

System::~System() {
  // @@protoc_insertion_point(destructor:gomschema.System)
  SharedDtor();
}

void System::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void System::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* System::descriptor() {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const System& System::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gomschema_2eproto::scc_info_System.base);
  return *internal_default_instance();
}


void System::Clear() {
// @@protoc_insertion_point(message_clear_start:gomschema.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userdata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&timestamp_utc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ed_address_) -
        reinterpret_cast<char*>(&timestamp_utc_)) + sizeof(ed_address_));
    populated_ = true;
    security_level_ = 3;
  }
  if (cached_has_bits & 768u) {
    government_ = 5;
    allegiance_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool System::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gomschema.System)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gomschema.System.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_utc = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_timestamp_utc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_utc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gomschema.Coordinate position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool populated = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_populated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &populated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_permit = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_needs_permit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_permit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gomschema.SecurityLevel security_level = 7 [default = SecurityMedium];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gomschema::SecurityLevel_IsValid(value)) {
            set_security_level(static_cast< ::gomschema::SecurityLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gomschema.GovernmentType government = 8 [default = GovCorporate];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gomschema::GovernmentType_IsValid(value)) {
            set_government(static_cast< ::gomschema::GovernmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gomschema.AllegianceType allegiance = 9 [default = AllegIndependent];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gomschema::AllegianceType_IsValid(value)) {
            set_allegiance(static_cast< ::gomschema::AllegianceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ed_address = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ed_address();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ed_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> userdata = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          System_UserdataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              System_UserdataEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&userdata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gomschema.System.UserdataEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gomschema.System)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gomschema.System)
  return false;
#undef DO_
}

void System::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gomschema.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gomschema.System.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint64 timestamp_utc = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp_utc(), output);
  }

  // required .gomschema.Coordinate position = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_position(), output);
  }

  // optional bool populated = 5 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->populated(), output);
  }

  // optional bool needs_permit = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->needs_permit(), output);
  }

  // optional .gomschema.SecurityLevel security_level = 7 [default = SecurityMedium];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->security_level(), output);
  }

  // optional .gomschema.GovernmentType government = 8 [default = GovCorporate];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->government(), output);
  }

  // optional .gomschema.AllegianceType allegiance = 9 [default = AllegIndependent];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->allegiance(), output);
  }

  // optional uint64 ed_address = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ed_address(), output);
  }

  // map<string, bytes> userdata = 11;
  if (!this->userdata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "gomschema.System.UserdataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->userdata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->userdata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<System_UserdataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(userdata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<System_UserdataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it) {
        entry.reset(userdata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gomschema.System)
}

::google::protobuf::uint8* System::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gomschema.System)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gomschema.System.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 timestamp_utc = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp_utc(), target);
  }

  // required .gomschema.Coordinate position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_position(), deterministic, target);
  }

  // optional bool populated = 5 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->populated(), target);
  }

  // optional bool needs_permit = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->needs_permit(), target);
  }

  // optional .gomschema.SecurityLevel security_level = 7 [default = SecurityMedium];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->security_level(), target);
  }

  // optional .gomschema.GovernmentType government = 8 [default = GovCorporate];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->government(), target);
  }

  // optional .gomschema.AllegianceType allegiance = 9 [default = AllegIndependent];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->allegiance(), target);
  }

  // optional uint64 ed_address = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ed_address(), target);
  }

  // map<string, bytes> userdata = 11;
  if (!this->userdata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "gomschema.System.UserdataEntry.key");
      }
    };

    if (deterministic &&
        this->userdata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->userdata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<System_UserdataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(userdata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<System_UserdataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it) {
        entry.reset(userdata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomschema.System)
  return target;
}

size_t System::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gomschema.System)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_position()) {
    // required .gomschema.Coordinate position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t System::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomschema.System)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .gomschema.Coordinate position = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // map<string, bytes> userdata = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->userdata_size());
  {
    ::std::unique_ptr<System_UserdataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->userdata().begin();
        it != this->userdata().end(); ++it) {
      entry.reset(userdata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // optional uint64 timestamp_utc = 3 [default = 0];
  if (has_timestamp_utc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_utc());
  }

  if (_has_bits_[0 / 32] & 240u) {
    // optional bool needs_permit = 6 [default = false];
    if (has_needs_permit()) {
      total_size += 1 + 1;
    }

    // optional uint64 ed_address = 10 [default = 0];
    if (has_ed_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ed_address());
    }

    // optional bool populated = 5 [default = true];
    if (has_populated()) {
      total_size += 1 + 1;
    }

    // optional .gomschema.SecurityLevel security_level = 7 [default = SecurityMedium];
    if (has_security_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_level());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .gomschema.GovernmentType government = 8 [default = GovCorporate];
    if (has_government()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->government());
    }

    // optional .gomschema.AllegianceType allegiance = 9 [default = AllegIndependent];
    if (has_allegiance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->allegiance());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void System::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomschema.System)
  GOOGLE_DCHECK_NE(&from, this);
  const System* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const System>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomschema.System)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomschema.System)
    MergeFrom(*source);
  }
}

void System::MergeFrom(const System& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomschema.System)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  userdata_.MergeFrom(from.userdata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::gomschema::Coordinate::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_utc_ = from.timestamp_utc_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      needs_permit_ = from.needs_permit_;
    }
    if (cached_has_bits & 0x00000020u) {
      ed_address_ = from.ed_address_;
    }
    if (cached_has_bits & 0x00000040u) {
      populated_ = from.populated_;
    }
    if (cached_has_bits & 0x00000080u) {
      security_level_ = from.security_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      government_ = from.government_;
    }
    if (cached_has_bits & 0x00000200u) {
      allegiance_ = from.allegiance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void System::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomschema.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void System::CopyFrom(const System& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomschema.System)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool System::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  return true;
}

void System::Swap(System* other) {
  if (other == this) return;
  InternalSwap(other);
}
void System::InternalSwap(System* other) {
  using std::swap;
  userdata_.Swap(&other->userdata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(timestamp_utc_, other->timestamp_utc_);
  swap(id_, other->id_);
  swap(needs_permit_, other->needs_permit_);
  swap(ed_address_, other->ed_address_);
  swap(populated_, other->populated_);
  swap(security_level_, other->security_level_);
  swap(government_, other->government_);
  swap(allegiance_, other->allegiance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata System::GetMetadata() const {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Services::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Services::kHasMarketFieldNumber;
const int Services::kHasBlackMarketFieldNumber;
const int Services::kHasRefuelFieldNumber;
const int Services::kHasRepairFieldNumber;
const int Services::kHasRearmFieldNumber;
const int Services::kHasOutfittingFieldNumber;
const int Services::kHasShipyardFieldNumber;
const int Services::kHasDockingFieldNumber;
const int Services::kHasCommoditiesFieldNumber;
const int Services::kIsPlanetaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Services::Services()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gomschema_2eproto::scc_info_Services.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gomschema.Services)
}
Services::Services(const Services& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&has_black_market_, &from.has_black_market_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_planetary_) -
    reinterpret_cast<char*>(&has_black_market_)) + sizeof(is_planetary_));
  // @@protoc_insertion_point(copy_constructor:gomschema.Services)
}

void Services::SharedCtor() {
  ::memset(&has_black_market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_shipyard_) -
      reinterpret_cast<char*>(&has_black_market_)) + sizeof(has_shipyard_));
  has_market_ = true;
  has_refuel_ = true;
  has_repair_ = true;
  has_rearm_ = true;
  has_docking_ = true;
  has_commodities_ = true;
  is_planetary_ = true;
}

Services::~Services() {
  // @@protoc_insertion_point(destructor:gomschema.Services)
  SharedDtor();
}

void Services::SharedDtor() {
}

void Services::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Services::descriptor() {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Services& Services::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gomschema_2eproto::scc_info_Services.base);
  return *internal_default_instance();
}


void Services::Clear() {
// @@protoc_insertion_point(message_clear_start:gomschema.Services)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&has_black_market_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_shipyard_) -
      reinterpret_cast<char*>(&has_black_market_)) + sizeof(has_shipyard_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 248u) {
    has_market_ = true;
    has_refuel_ = true;
    has_repair_ = true;
    has_rearm_ = true;
    has_docking_ = true;
  }
  if (cached_has_bits & 768u) {
    has_commodities_ = true;
    is_planetary_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Services::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gomschema.Services)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_market = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_has_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool has_black_market = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_has_black_market();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_black_market_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_refuel = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_has_refuel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_refuel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_repair = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_has_repair();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_repair_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_rearm = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_has_rearm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_rearm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool has_outfitting = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_has_outfitting();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_outfitting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool has_shipyard = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_has_shipyard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_shipyard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_docking = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_has_docking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_docking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_commodities = 9 [default = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_has_commodities();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_commodities_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_planetary = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_planetary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_planetary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gomschema.Services)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gomschema.Services)
  return false;
#undef DO_
}

void Services::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gomschema.Services)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_market = 1 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_market(), output);
  }

  // required bool has_black_market = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_black_market(), output);
  }

  // optional bool has_refuel = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_refuel(), output);
  }

  // optional bool has_repair = 4 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_repair(), output);
  }

  // optional bool has_rearm = 5 [default = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_rearm(), output);
  }

  // required bool has_outfitting = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_outfitting(), output);
  }

  // required bool has_shipyard = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_shipyard(), output);
  }

  // optional bool has_docking = 8 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->has_docking(), output);
  }

  // optional bool has_commodities = 9 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_commodities(), output);
  }

  // required bool is_planetary = 10 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_planetary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gomschema.Services)
}

::google::protobuf::uint8* Services::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gomschema.Services)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_market = 1 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_market(), target);
  }

  // required bool has_black_market = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_black_market(), target);
  }

  // optional bool has_refuel = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_refuel(), target);
  }

  // optional bool has_repair = 4 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_repair(), target);
  }

  // optional bool has_rearm = 5 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_rearm(), target);
  }

  // required bool has_outfitting = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_outfitting(), target);
  }

  // required bool has_shipyard = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_shipyard(), target);
  }

  // optional bool has_docking = 8 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->has_docking(), target);
  }

  // optional bool has_commodities = 9 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_commodities(), target);
  }

  // required bool is_planetary = 10 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_planetary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomschema.Services)
  return target;
}

size_t Services::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gomschema.Services)
  size_t total_size = 0;

  if (has_has_black_market()) {
    // required bool has_black_market = 2;
    total_size += 1 + 1;
  }

  if (has_has_outfitting()) {
    // required bool has_outfitting = 6;
    total_size += 1 + 1;
  }

  if (has_has_shipyard()) {
    // required bool has_shipyard = 7;
    total_size += 1 + 1;
  }

  if (has_is_planetary()) {
    // required bool is_planetary = 10 [default = true];
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Services::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomschema.Services)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000207) ^ 0x00000207) == 0) {  // All required fields are present.
    // required bool has_black_market = 2;
    total_size += 1 + 1;

    // required bool has_outfitting = 6;
    total_size += 1 + 1;

    // required bool has_shipyard = 7;
    total_size += 1 + 1;

    // required bool is_planetary = 10 [default = true];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional bool has_market = 1 [default = true];
    if (has_has_market()) {
      total_size += 1 + 1;
    }

    // optional bool has_refuel = 3 [default = true];
    if (has_has_refuel()) {
      total_size += 1 + 1;
    }

    // optional bool has_repair = 4 [default = true];
    if (has_has_repair()) {
      total_size += 1 + 1;
    }

    // optional bool has_rearm = 5 [default = true];
    if (has_has_rearm()) {
      total_size += 1 + 1;
    }

    // optional bool has_docking = 8 [default = true];
    if (has_has_docking()) {
      total_size += 1 + 1;
    }

  }
  // optional bool has_commodities = 9 [default = true];
  if (has_has_commodities()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Services::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomschema.Services)
  GOOGLE_DCHECK_NE(&from, this);
  const Services* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Services>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomschema.Services)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomschema.Services)
    MergeFrom(*source);
  }
}

void Services::MergeFrom(const Services& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomschema.Services)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      has_black_market_ = from.has_black_market_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_outfitting_ = from.has_outfitting_;
    }
    if (cached_has_bits & 0x00000004u) {
      has_shipyard_ = from.has_shipyard_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_market_ = from.has_market_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_refuel_ = from.has_refuel_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_repair_ = from.has_repair_;
    }
    if (cached_has_bits & 0x00000040u) {
      has_rearm_ = from.has_rearm_;
    }
    if (cached_has_bits & 0x00000080u) {
      has_docking_ = from.has_docking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      has_commodities_ = from.has_commodities_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_planetary_ = from.is_planetary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Services::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomschema.Services)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Services::CopyFrom(const Services& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomschema.Services)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Services::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000207) != 0x00000207) return false;
  return true;
}

void Services::Swap(Services* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Services::InternalSwap(Services* other) {
  using std::swap;
  swap(has_black_market_, other->has_black_market_);
  swap(has_outfitting_, other->has_outfitting_);
  swap(has_shipyard_, other->has_shipyard_);
  swap(has_market_, other->has_market_);
  swap(has_refuel_, other->has_refuel_);
  swap(has_repair_, other->has_repair_);
  swap(has_rearm_, other->has_rearm_);
  swap(has_docking_, other->has_docking_);
  swap(has_commodities_, other->has_commodities_);
  swap(is_planetary_, other->is_planetary_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Services::GetMetadata() const {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Facility_UserdataEntry_DoNotUse::Facility_UserdataEntry_DoNotUse() {}
Facility_UserdataEntry_DoNotUse::Facility_UserdataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Facility_UserdataEntry_DoNotUse::MergeFrom(const Facility_UserdataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Facility_UserdataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[8];
}
void Facility_UserdataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Facility::InitAsDefaultInstance() {
  ::gomschema::_Facility_default_instance_._instance.get_mutable()->services_ = const_cast< ::gomschema::Services*>(
      ::gomschema::Services::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Facility::kIdFieldNumber;
const int Facility::kSystemIdFieldNumber;
const int Facility::kNameFieldNumber;
const int Facility::kTimestampUtcFieldNumber;
const int Facility::kFacilityTypeFieldNumber;
const int Facility::kServicesFieldNumber;
const int Facility::kPadSizeFieldNumber;
const int Facility::kLsFromStarFieldNumber;
const int Facility::kGovernmentFieldNumber;
const int Facility::kAllegianceFieldNumber;
const int Facility::kEdMarketIdFieldNumber;
const int Facility::kUserdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Facility::Facility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gomschema_2eproto::scc_info_Facility.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gomschema.Facility)
}
Facility::Facility(const Facility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userdata_.MergeFrom(from.userdata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_services()) {
    services_ = new ::gomschema::Services(*from.services_);
  } else {
    services_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allegiance_) -
    reinterpret_cast<char*>(&id_)) + sizeof(allegiance_));
  // @@protoc_insertion_point(copy_constructor:gomschema.Facility)
}

void Facility::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&services_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ls_from_star_) -
      reinterpret_cast<char*>(&services_)) + sizeof(ls_from_star_));
  facility_type_ = 10;
  pad_size_ = 2;
  government_ = 5;
  allegiance_ = 4;
}

Facility::~Facility() {
  // @@protoc_insertion_point(destructor:gomschema.Facility)
  SharedDtor();
}

void Facility::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete services_;
}

void Facility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Facility::descriptor() {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Facility& Facility::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gomschema_2eproto::scc_info_Facility.base);
  return *internal_default_instance();
}


void Facility::Clear() {
// @@protoc_insertion_point(message_clear_start:gomschema.Facility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userdata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(services_ != NULL);
      services_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ls_from_star_) -
        reinterpret_cast<char*>(&id_)) + sizeof(ls_from_star_));
    facility_type_ = 10;
  }
  if (cached_has_bits & 1792u) {
    pad_size_ = 2;
    government_ = 5;
    allegiance_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Facility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gomschema.Facility)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 system_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_system_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gomschema.Facility.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_utc = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp_utc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_utc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gomschema.FacilityType facility_type = 5 [default = FTPlanetaryOutpost];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gomschema::FacilityType_IsValid(value)) {
            set_facility_type(static_cast< ::gomschema::FacilityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gomschema.Services services = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gomschema.PadSize pad_size = 7 [default = PadMedium];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gomschema::PadSize_IsValid(value)) {
            set_pad_size(static_cast< ::gomschema::PadSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ls_from_star = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_ls_from_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ls_from_star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gomschema.GovernmentType government = 9 [default = GovCorporate];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gomschema::GovernmentType_IsValid(value)) {
            set_government(static_cast< ::gomschema::GovernmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gomschema.AllegianceType allegiance = 10 [default = AllegIndependent];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gomschema::AllegianceType_IsValid(value)) {
            set_allegiance(static_cast< ::gomschema::AllegianceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ed_market_id = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_ed_market_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ed_market_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> userdata = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          Facility_UserdataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Facility_UserdataEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&userdata_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gomschema.Facility.UserdataEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gomschema.Facility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gomschema.Facility)
  return false;
#undef DO_
}

void Facility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gomschema.Facility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 system_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->system_id(), output);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gomschema.Facility.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint64 timestamp_utc = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp_utc(), output);
  }

  // optional .gomschema.FacilityType facility_type = 5 [default = FTPlanetaryOutpost];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->facility_type(), output);
  }

  // required .gomschema.Services services = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_services(), output);
  }

  // optional .gomschema.PadSize pad_size = 7 [default = PadMedium];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pad_size(), output);
  }

  // optional uint32 ls_from_star = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ls_from_star(), output);
  }

  // optional .gomschema.GovernmentType government = 9 [default = GovCorporate];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->government(), output);
  }

  // optional .gomschema.AllegianceType allegiance = 10 [default = AllegIndependent];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->allegiance(), output);
  }

  // optional uint64 ed_market_id = 11 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->ed_market_id(), output);
  }

  // map<string, bytes> userdata = 12;
  if (!this->userdata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "gomschema.Facility.UserdataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->userdata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->userdata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Facility_UserdataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(userdata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Facility_UserdataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it) {
        entry.reset(userdata_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gomschema.Facility)
}

::google::protobuf::uint8* Facility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gomschema.Facility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 system_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->system_id(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gomschema.Facility.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint64 timestamp_utc = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp_utc(), target);
  }

  // optional .gomschema.FacilityType facility_type = 5 [default = FTPlanetaryOutpost];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->facility_type(), target);
  }

  // required .gomschema.Services services = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_services(), deterministic, target);
  }

  // optional .gomschema.PadSize pad_size = 7 [default = PadMedium];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pad_size(), target);
  }

  // optional uint32 ls_from_star = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ls_from_star(), target);
  }

  // optional .gomschema.GovernmentType government = 9 [default = GovCorporate];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->government(), target);
  }

  // optional .gomschema.AllegianceType allegiance = 10 [default = AllegIndependent];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->allegiance(), target);
  }

  // optional uint64 ed_market_id = 11 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->ed_market_id(), target);
  }

  // map<string, bytes> userdata = 12;
  if (!this->userdata().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "gomschema.Facility.UserdataEntry.key");
      }
    };

    if (deterministic &&
        this->userdata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->userdata().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Facility_UserdataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(userdata_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Facility_UserdataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->userdata().begin();
          it != this->userdata().end(); ++it) {
        entry.reset(userdata_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomschema.Facility)
  return target;
}

size_t Facility::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gomschema.Facility)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_services()) {
    // required .gomschema.Services services = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *services_);
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_system_id()) {
    // required uint32 system_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->system_id());
  }

  return total_size;
}
size_t Facility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomschema.Facility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .gomschema.Services services = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *services_);

    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 system_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->system_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // map<string, bytes> userdata = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->userdata_size());
  {
    ::std::unique_ptr<Facility_UserdataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->userdata().begin();
        it != this->userdata().end(); ++it) {
      entry.reset(userdata_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 240u) {
    // optional uint64 timestamp_utc = 4 [default = 0];
    if (has_timestamp_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp_utc());
    }

    // optional uint64 ed_market_id = 11 [default = 0];
    if (has_ed_market_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ed_market_id());
    }

    // optional uint32 ls_from_star = 8;
    if (has_ls_from_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ls_from_star());
    }

    // optional .gomschema.FacilityType facility_type = 5 [default = FTPlanetaryOutpost];
    if (has_facility_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->facility_type());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .gomschema.PadSize pad_size = 7 [default = PadMedium];
    if (has_pad_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pad_size());
    }

    // optional .gomschema.GovernmentType government = 9 [default = GovCorporate];
    if (has_government()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->government());
    }

    // optional .gomschema.AllegianceType allegiance = 10 [default = AllegIndependent];
    if (has_allegiance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->allegiance());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Facility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomschema.Facility)
  GOOGLE_DCHECK_NE(&from, this);
  const Facility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Facility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomschema.Facility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomschema.Facility)
    MergeFrom(*source);
  }
}

void Facility::MergeFrom(const Facility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomschema.Facility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  userdata_.MergeFrom(from.userdata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_services()->::gomschema::Services::MergeFrom(from.services());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      system_id_ = from.system_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_utc_ = from.timestamp_utc_;
    }
    if (cached_has_bits & 0x00000020u) {
      ed_market_id_ = from.ed_market_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      ls_from_star_ = from.ls_from_star_;
    }
    if (cached_has_bits & 0x00000080u) {
      facility_type_ = from.facility_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      pad_size_ = from.pad_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      government_ = from.government_;
    }
    if (cached_has_bits & 0x00000400u) {
      allegiance_ = from.allegiance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Facility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomschema.Facility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Facility::CopyFrom(const Facility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomschema.Facility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Facility::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_services()) {
    if (!this->services_->IsInitialized()) return false;
  }
  return true;
}

void Facility::Swap(Facility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Facility::InternalSwap(Facility* other) {
  using std::swap;
  userdata_.Swap(&other->userdata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(services_, other->services_);
  swap(id_, other->id_);
  swap(system_id_, other->system_id_);
  swap(timestamp_utc_, other->timestamp_utc_);
  swap(ed_market_id_, other->ed_market_id_);
  swap(ls_from_star_, other->ls_from_star_);
  swap(facility_type_, other->facility_type_);
  swap(pad_size_, other->pad_size_);
  swap(government_, other->government_);
  swap(allegiance_, other->allegiance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Facility::GetMetadata() const {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Trade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trade::kCommodityIdFieldNumber;
const int Trade::kUnitsFieldNumber;
const int Trade::kCreditsFieldNumber;
const int Trade::kTimestampUtcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trade::Trade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gomschema_2eproto::scc_info_Trade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gomschema.Trade)
}
Trade::Trade(const Trade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&commodity_id_, &from.commodity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&credits_) -
    reinterpret_cast<char*>(&commodity_id_)) + sizeof(credits_));
  // @@protoc_insertion_point(copy_constructor:gomschema.Trade)
}

void Trade::SharedCtor() {
  ::memset(&commodity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&credits_) -
      reinterpret_cast<char*>(&commodity_id_)) + sizeof(credits_));
}

Trade::~Trade() {
  // @@protoc_insertion_point(destructor:gomschema.Trade)
  SharedDtor();
}

void Trade::SharedDtor() {
}

void Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Trade::descriptor() {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trade& Trade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gomschema_2eproto::scc_info_Trade.base);
  return *internal_default_instance();
}


void Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:gomschema.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&commodity_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&credits_) -
        reinterpret_cast<char*>(&commodity_id_)) + sizeof(credits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gomschema.Trade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 commodity_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_commodity_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commodity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 units = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_units();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &units_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 credits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_credits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp_utc = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timestamp_utc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_utc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gomschema.Trade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gomschema.Trade)
  return false;
#undef DO_
}

void Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gomschema.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 commodity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->commodity_id(), output);
  }

  // required uint32 units = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->units(), output);
  }

  // required int32 credits = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->credits(), output);
  }

  // optional uint64 timestamp_utc = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp_utc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gomschema.Trade)
}

::google::protobuf::uint8* Trade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gomschema.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 commodity_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->commodity_id(), target);
  }

  // required uint32 units = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->units(), target);
  }

  // required int32 credits = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->credits(), target);
  }

  // optional uint64 timestamp_utc = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp_utc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomschema.Trade)
  return target;
}

size_t Trade::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gomschema.Trade)
  size_t total_size = 0;

  if (has_commodity_id()) {
    // required uint32 commodity_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commodity_id());
  }

  if (has_units()) {
    // required uint32 units = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->units());
  }

  if (has_credits()) {
    // required int32 credits = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->credits());
  }

  return total_size;
}
size_t Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomschema.Trade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required uint32 commodity_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->commodity_id());

    // required uint32 units = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->units());

    // required int32 credits = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->credits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint64 timestamp_utc = 4 [default = 0];
  if (has_timestamp_utc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp_utc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomschema.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const Trade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomschema.Trade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomschema.Trade)
    MergeFrom(*source);
  }
}

void Trade::MergeFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomschema.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      commodity_id_ = from.commodity_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      units_ = from.units_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_utc_ = from.timestamp_utc_;
    }
    if (cached_has_bits & 0x00000008u) {
      credits_ = from.credits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Trade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomschema.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trade::CopyFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomschema.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void Trade::Swap(Trade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trade::InternalSwap(Trade* other) {
  using std::swap;
  swap(commodity_id_, other->commodity_id_);
  swap(units_, other->units_);
  swap(timestamp_utc_, other->timestamp_utc_);
  swap(credits_, other->credits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Trade::GetMetadata() const {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FacilityListing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacilityListing::kFacilityIdFieldNumber;
const int FacilityListing::kSupplyFieldNumber;
const int FacilityListing::kDemandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacilityListing::FacilityListing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gomschema_2eproto::scc_info_FacilityListing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gomschema.FacilityListing)
}
FacilityListing::FacilityListing(const FacilityListing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      supply_(from.supply_),
      demand_(from.demand_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  facility_id_ = from.facility_id_;
  // @@protoc_insertion_point(copy_constructor:gomschema.FacilityListing)
}

void FacilityListing::SharedCtor() {
  facility_id_ = 0u;
}

FacilityListing::~FacilityListing() {
  // @@protoc_insertion_point(destructor:gomschema.FacilityListing)
  SharedDtor();
}

void FacilityListing::SharedDtor() {
}

void FacilityListing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FacilityListing::descriptor() {
  ::protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FacilityListing& FacilityListing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gomschema_2eproto::scc_info_FacilityListing.base);
  return *internal_default_instance();
}


void FacilityListing::Clear() {
// @@protoc_insertion_point(message_clear_start:gomschema.FacilityListing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supply_.Clear();
  demand_.Clear();
  facility_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FacilityListing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gomschema.FacilityListing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 facility_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_facility_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facility_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gomschema.Trade supply = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_supply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gomschema.Trade demand = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_demand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gomschema.FacilityListing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gomschema.FacilityListing)
  return false;
#undef DO_
}

void FacilityListing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gomschema.FacilityListing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 facility_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facility_id(), output);
  }

  // repeated .gomschema.Trade supply = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->supply_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->supply(static_cast<int>(i)),
      output);
  }

  // repeated .gomschema.Trade demand = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->demand_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->demand(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gomschema.FacilityListing)
}

::google::protobuf::uint8* FacilityListing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gomschema.FacilityListing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 facility_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facility_id(), target);
  }

  // repeated .gomschema.Trade supply = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->supply_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->supply(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gomschema.Trade demand = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->demand_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->demand(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomschema.FacilityListing)
  return target;
}

size_t FacilityListing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomschema.FacilityListing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 facility_id = 1;
  if (has_facility_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->facility_id());
  }
  // repeated .gomschema.Trade supply = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->supply_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->supply(static_cast<int>(i)));
    }
  }

  // repeated .gomschema.Trade demand = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->demand_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->demand(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FacilityListing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomschema.FacilityListing)
  GOOGLE_DCHECK_NE(&from, this);
  const FacilityListing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FacilityListing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomschema.FacilityListing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomschema.FacilityListing)
    MergeFrom(*source);
  }
}

void FacilityListing::MergeFrom(const FacilityListing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomschema.FacilityListing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supply_.MergeFrom(from.supply_);
  demand_.MergeFrom(from.demand_);
  if (from.has_facility_id()) {
    set_facility_id(from.facility_id());
  }
}

void FacilityListing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomschema.FacilityListing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacilityListing::CopyFrom(const FacilityListing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomschema.FacilityListing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacilityListing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->supply())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->demand())) return false;
  return true;
}

void FacilityListing::Swap(FacilityListing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FacilityListing::InternalSwap(FacilityListing* other) {
  using std::swap;
  CastToBase(&supply_)->InternalSwap(CastToBase(&other->supply_));
  CastToBase(&demand_)->InternalSwap(CastToBase(&other->demand_));
  swap(facility_id_, other->facility_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FacilityListing::GetMetadata() const {
  protobuf_gomschema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gomschema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gomschema
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::Header_UserdataEntry_DoNotUse* Arena::CreateMaybeMessage< ::gomschema::Header_UserdataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::Header_UserdataEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::Header* Arena::CreateMaybeMessage< ::gomschema::Header >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::Commodity_UserdataEntry_DoNotUse* Arena::CreateMaybeMessage< ::gomschema::Commodity_UserdataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::Commodity_UserdataEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::Commodity* Arena::CreateMaybeMessage< ::gomschema::Commodity >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::Commodity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::Coordinate* Arena::CreateMaybeMessage< ::gomschema::Coordinate >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::Coordinate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::System_UserdataEntry_DoNotUse* Arena::CreateMaybeMessage< ::gomschema::System_UserdataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::System_UserdataEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::System* Arena::CreateMaybeMessage< ::gomschema::System >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::System >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::Services* Arena::CreateMaybeMessage< ::gomschema::Services >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::Services >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::Facility_UserdataEntry_DoNotUse* Arena::CreateMaybeMessage< ::gomschema::Facility_UserdataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::Facility_UserdataEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::Facility* Arena::CreateMaybeMessage< ::gomschema::Facility >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::Facility >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::Trade* Arena::CreateMaybeMessage< ::gomschema::Trade >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::Trade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gomschema::FacilityListing* Arena::CreateMaybeMessage< ::gomschema::FacilityListing >(Arena* arena) {
  return Arena::CreateInternal< ::gomschema::FacilityListing >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
